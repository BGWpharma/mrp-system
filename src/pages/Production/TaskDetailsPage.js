/*
 * ‚úÖ OPTYMALIZACJE WYDAJNO≈öCI - Szczeg√≥≈Çy zadania produkcyjnego
 * 
 * üöÄ WPROWADZONE OPTYMALIZACJE:
 * 
 * 1. GRUPOWE POBIERANIE PARTII MATERIA≈Å√ìW (90% redukcja zapyta≈Ñ)
 *    - getBatchesForMultipleItems() - pobiera partie dla wielu materia≈Ç√≥w jednocze≈õnie
 *    - getReservationsForMultipleBatches() - pobiera rezerwacje dla wielu partii jednocze≈õnie
 *    - Redukcja z N+M√ó2 zapyta≈Ñ do ~3-5 grupowych zapyta≈Ñ
 * 
 * 2. R√ìWNOLEG≈ÅE ≈ÅADOWANIE DANYCH (60% redukcja czasu ≈Çadowania)
 *    - fetchAllTaskData() - ≈Çaduje wszystkie dane jednocze≈õnie zamiast sekwencyjnie
 *    - Promise.all dla historii produkcji, u≈ºytkownik√≥w, formularzy, receptur
 * 
 * 3. GRUPOWE POBIERANIE POZYCJI MAGAZYNOWYCH (85% redukcja zapyta≈Ñ)
 *    - Wykorzystuje Firebase 'in' operator dla wielu ID jednocze≈õnie
 *    - Batching po 10 element√≥w (limit Firebase)
 * 
 * üìä SZACOWANE WYNIKI:
 * - Redukcja zapyta≈Ñ: 80-90%
 * - Czas ≈Çadowania: 60-70% szybciej  
 * - Lepsze UX i mniejsze obciƒÖ≈ºenie bazy danych
 */

import React, { useState, useEffect, useCallback, Suspense, lazy, useMemo } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import {
  Typography,
  Paper,
  Grid,
  Chip,
  Box,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TextField,
  CircularProgress,
  IconButton,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormControlLabel,
  Checkbox,
  FormLabel,
  RadioGroup,
  Radio,
  Alert,
  Tooltip,
  Divider,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  ListItemButton,
  Card,
  CardContent,
  CardActions,
  Collapse,
  Tabs,
  Tab,
  Stack,
  Avatar,
  Container,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  AlertTitle,
  InputAdornment,
  useMediaQuery,
  useTheme,
  Switch,
  Autocomplete,
} from '@mui/material';
import {
  Edit as EditIcon,
  Delete as DeleteIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  Warning as WarningIcon,
  CheckCircle as CheckCircleIcon,
  Inventory as InventoryIcon,
  PlayArrow as PlayArrowIcon,
  Stop as StopIcon,
  Print as PrintIcon,
  Business as BusinessIcon,
  Schedule as ScheduleIcon,
  History as HistoryIcon,
  Add as AddIcon,
  ArrowBack as ArrowBackIcon,
  Settings as SettingsIcon,
  Check as CheckIcon,
  Inventory2 as PackagingIcon,
  BookmarkAdd as BookmarkAddIcon,
  ExpandMore as ExpandMoreIcon,
  Search as SearchIcon,
  Visibility as VisibilityIcon,
  Info as InfoIcon,
  Science as RawMaterialsIcon,
  BuildCircle as BuildCircleIcon,
  Assessment as AssessmentIcon,
  AttachFile as AttachFileIcon,
  CloudUpload as CloudUploadIcon,
  Description as DescriptionIcon,
  Image as ImageIcon,
  PictureAsPdf as PdfIcon,
  Download as DownloadIcon,
  ArrowForward as ArrowForwardIcon,
  Storage as StorageIcon,
  Inventory2 as Materials2Icon,
  Factory as ProductionIcon,
  Assignment as FormIcon,
  Timeline as TimelineIcon,
  Refresh as RefreshIcon,
  Calculate as CalculateIcon,
  Close as CloseIcon
} from '@mui/icons-material';
import { getTaskById, updateTaskStatus, deleteTask, updateActualMaterialUsage, confirmMaterialConsumption, addTaskProductToInventory, startProduction, stopProduction, getProductionHistory, reserveMaterialsForTask, generateMaterialsAndLotsReport, updateProductionSession, addProductionSession, deleteProductionSession } from '../../services/productionService';
import { getProductionDataForHistory, getAvailableMachines } from '../../services/machineDataService';
import { getRecipeVersion, sortIngredientsByQuantity } from '../../services/recipeService';
import { getItemBatches, bookInventoryForTask, cancelBooking, getBatchReservations, getAllInventoryItems, getInventoryItemById, getInventoryBatch, updateBatch } from '../../services/inventory';
import { useAuth } from '../../hooks/useAuth';
import { useNotification } from '../../hooks/useNotification';
import { formatDate, formatCurrency, formatDateTime } from '../../utils/formatters';
import { PRODUCTION_TASK_STATUSES, TIME_INTERVALS } from '../../utils/constants';
import { format, parseISO } from 'date-fns';
import TaskDetails from '../../components/production/TaskDetails';
import { db } from '../../services/firebase/config';
import { getDoc, doc, updateDoc, serverTimestamp, arrayUnion, collection, query, where, getDocs, limit, orderBy, onSnapshot } from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';
import { storage } from '../../services/firebase/config';
import { getUsersDisplayNames } from '../../services/userService';
import { getCompanyData } from '../../services/companyService';
import { getWorkstationById } from '../../services/workstationService';
import { generateEndProductReportPDF } from '../../services/endProductReportService';
import ProductionControlFormDialog from '../../components/production/ProductionControlFormDialog';
import CompletedMOFormDialog from '../../components/production/CompletedMOFormDialog';
import ProductionShiftFormDialog from '../../components/production/ProductionShiftFormDialog';
import POReservationManager from '../../components/production/POReservationManager';
import { useTranslation } from '../../hooks/useTranslation';
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { pl } from 'date-fns/locale';
import { calculateMaterialReservationStatus, getReservationStatusColors, getConsumedQuantityForMaterial, getReservedQuantityForMaterial } from '../../utils/productionUtils';
import { preciseMultiply } from '../../utils/mathUtils';
import { getIngredientReservationLinks } from '../../services/mixingPlanReservationService';

// ‚úÖ Lazy loading komponent√≥w zak≈Çadek dla lepszej wydajno≈õci
const EndProductReportTab = lazy(() => import('../../components/production/EndProductReportTab'));
const ChangeHistoryTab = lazy(() => import('../../components/production/ChangeHistoryTab'));
const FormsTab = lazy(() => import('../../components/production/FormsTab'));
const ProductionPlanTab = lazy(() => import('../../components/production/ProductionPlanTab'));

const TaskDetailsPage = () => {
  const { t } = useTranslation('taskDetails');
  const { id } = useParams();
  const navigate = useNavigate();
  const { showSuccess, showError, showInfo, showWarning } = useNotification();
  const { currentUser } = useAuth();
  
  const [task, setTask] = useState(null);
  const [loading, setLoading] = useState(true);
  const [alert, setAlert] = useState({ open: false, severity: 'success', message: '' });
  const [consumptionDialogOpen, setConsumptionDialogOpen] = useState(false);
  const [confirmationDialogOpen, setConfirmationDialogOpen] = useState(false);
  const [deleteDialog, setDeleteDialog] = useState(false);
  const [materials, setMaterials] = useState([]);
  const [batches, setBatches] = useState({});
  const [stopProductionDialogOpen, setStopProductionDialogOpen] = useState(false);
  const [productionData, setProductionData] = useState({
    completedQuantity: '',
    timeSpent: '',
    startTime: new Date(),
    endTime: new Date(),
    error: null
  });
  const [materialQuantities, setMaterialQuantities] = useState({});
  const [selectedBatches, setSelectedBatches] = useState({});
  const [receiveDialogOpen, setReceiveDialogOpen] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [errors, setErrors] = useState({});
  const [reserveDialogOpen, setReserveDialogOpen] = useState(false);
  const [reservationMethod, setReservationMethod] = useState('automatic');
  const [manualBatchQuantities, setManualBatchQuantities] = useState({});
  const [reservationErrors, setReservationErrors] = useState({});
  const [packagingDialogOpen, setPackagingDialogOpen] = useState(false);
  const [packagingItems, setPackagingItems] = useState([]);
  const [loadingPackaging, setLoadingPackaging] = useState(false);
  const [selectedPackaging, setSelectedPackaging] = useState({});
  const [packagingQuantities, setPackagingQuantities] = useState({});
  const [searchPackaging, setSearchPackaging] = useState('');
  const [consumePackagingImmediately, setConsumePackagingImmediately] = useState(true);
  const [userNames, setUserNames] = useState({});
  const [productionHistory, setProductionHistory] = useState([]);
  const [editingHistoryItem, setEditingHistoryItem] = useState(null);
  const [editedHistoryItem, setEditedHistoryItem] = useState({
    quantity: 0,
    startTime: new Date(),
    endTime: new Date(),
  });
  
  // Nowe stany dla danych z maszyn
  const [availableMachines, setAvailableMachines] = useState([]);
  const [selectedMachineId, setSelectedMachineId] = useState('');
  const [enrichedProductionHistory, setEnrichedProductionHistory] = useState([]);
  const [addHistoryDialogOpen, setAddHistoryDialogOpen] = useState(false);
  const [reservingMaterials, setReservingMaterials] = useState(false);

  const [materialBatchesLoading, setMaterialBatchesLoading] = useState(false);
  const [manualBatchSelectionActive, setManualBatchSelectionActive] = useState(false);
  const [expandedMaterial, setExpandedMaterial] = useState(null);
  const [deleteHistoryItem, setDeleteHistoryItem] = useState(null);
  const [deleteHistoryDialogOpen, setDeleteHistoryDialogOpen] = useState(false);
  const [includeInCosts, setIncludeInCosts] = useState({});

  // Stan dla przechowywania oczekiwanych zam√≥wie≈Ñ
  const [awaitingOrders, setAwaitingOrders] = useState({});
  const [awaitingOrdersLoading, setAwaitingOrdersLoading] = useState(false);
  
  // Stan dla rezerwacji PO
  const [poReservations, setPOReservations] = useState([]);
  
  // Stan edycji pozycji historii
  const [editedHistoryNote, setEditedHistoryNote] = useState('');
  const [editedHistoryQuantity, setEditedHistoryQuantity] = useState('');
  
  // Stan do zarzƒÖdzania usuwaniem pozycji historii
  const [historyItemToDelete, setHistoryItemToDelete] = useState(null);
  
  // Stan komunikatu b≈Çƒôdu
  const [errorMessage, setErrorMessage] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);

  // Dodajƒô brakujƒÖcƒÖ zmiennƒÖ stanu materialTab i materialAwaitingOrders
  const [materialTab, setMaterialTab] = useState(0);
  const [materialAwaitingOrders, setMaterialAwaitingOrders] = useState({});

  // Dodajƒô stan dla odpowiedzi formularzy produkcyjnych
  const [formResponses, setFormResponses] = useState({
    completedMO: [],
    productionControl: [],
    productionShift: []
  });
  const [loadingFormResponses, setLoadingFormResponses] = useState(false);
  
  // Stany dla dialog√≥w formularzy produkcyjnych
  const [productionControlDialogOpen, setProductionControlDialogOpen] = useState(false);
  const [completedMODialogOpen, setCompletedMODialogOpen] = useState(false);
  const [productionShiftDialogOpen, setProductionShiftDialogOpen] = useState(false);
  const [formTab, setFormTab] = useState(0);

  // Stany dla dialogu ustawiania daty wa≈ºno≈õci przy starcie produkcji
  const [startProductionDialogOpen, setStartProductionDialogOpen] = useState(false);
  const [startProductionData, setStartProductionData] = useState({
    expiryDate: null
  });
  const [startProductionError, setStartProductionError] = useState(null);

  // Nowe stany dla opcji dodawania do magazynu w dialogu historii produkcji
  const [addToInventoryOnHistory, setAddToInventoryOnHistory] = useState(true); // domy≈õlnie w≈ÇƒÖczone
  const [historyInventoryData, setHistoryInventoryData] = useState({
    expiryDate: null,
    lotNumber: '',
    finalQuantity: '',
    warehouseId: ''
  });
  const [historyInventoryError, setHistoryInventoryError] = useState(null);
  const [warehouses, setWarehouses] = useState([]);
  const [warehousesLoading, setWarehousesLoading] = useState(false);

  // Nowe stany dla funkcjonalno≈õci dodawania surowc√≥w
  const [rawMaterialsDialogOpen, setRawMaterialsDialogOpen] = useState(false);
  const [rawMaterialsItems, setRawMaterialsItems] = useState([]);
  const [loadingRawMaterials, setLoadingRawMaterials] = useState(false);
  const [searchRawMaterials, setSearchRawMaterials] = useState('');
  const [materialCategoryTab, setMaterialCategoryTab] = useState(0); // 0 = Surowce, 1 = Opakowania jednostkowe

  // Stany dla sekcji 5. Production w raporcie
  const [companyData, setCompanyData] = useState(null);
  const [workstationData, setWorkstationData] = useState(null);

  // Nowe stany dla funkcjonalno≈õci usuwania materia≈Ç√≥w
  const [deleteMaterialDialogOpen, setDeleteMaterialDialogOpen] = useState(false);
  const [materialToDelete, setMaterialToDelete] = useState(null);

  // Nowe stany dla funkcjonalno≈õci konsumpcji materia≈Ç√≥w
  const [consumeMaterialsDialogOpen, setConsumeMaterialsDialogOpen] = useState(false);
  const [consumedMaterials, setConsumedMaterials] = useState([]);
  const [selectedBatchesToConsume, setSelectedBatchesToConsume] = useState({});
  const [consumeQuantities, setConsumeQuantities] = useState({});
  const [consumeErrors, setConsumeErrors] = useState({});

  // Nowe stany dla korekty i usuniƒôcia konsumpcji
  const [editConsumptionDialogOpen, setEditConsumptionDialogOpen] = useState(false);
  const [deleteConsumptionDialogOpen, setDeleteConsumptionDialogOpen] = useState(false);
  const [selectedConsumption, setSelectedConsumption] = useState(null);
  const [editedQuantity, setEditedQuantity] = useState(0);
  const [consumedBatchPrices, setConsumedBatchPrices] = useState({});
  const [consumedIncludeInCosts, setConsumedIncludeInCosts] = useState({});
  const [restoreReservation, setRestoreReservation] = useState(true); // Domy≈õlnie w≈ÇƒÖczone
  const [fixingRecipeData, setFixingRecipeData] = useState(false);
  
  // Stan dla za≈ÇƒÖcznik√≥w z powiƒÖzanych PO
  const [ingredientAttachments, setIngredientAttachments] = useState({});
  
  // Stan dla za≈ÇƒÖcznik√≥w z partii sk≈Çadnik√≥w
  const [ingredientBatchAttachments, setIngredientBatchAttachments] = useState({});
  
  // Stan dla powiƒÖza≈Ñ sk≈Çadnik√≥w z rezerwacjami w planie miesza≈Ñ
  const [ingredientReservationLinks, setIngredientReservationLinks] = useState({});
  
  // Stan dla za≈ÇƒÖcznik√≥w bada≈Ñ klinicznych
  const [clinicalAttachments, setClinicalAttachments] = useState([]);
  const [uploadingClinical, setUploadingClinical] = useState(false);

  // Stan dla dodatkowych za≈ÇƒÖcznik√≥w
  const [additionalAttachments, setAdditionalAttachments] = useState([]);
  const [uploadingAdditional, setUploadingAdditional] = useState(false);

  // Stan dla generowania raportu PDF
  const [generatingPDF, setGeneratingPDF] = useState(false);

  // Stan dla sekcji alergen√≥w w raporcie gotowego produktu
  const [selectedAllergens, setSelectedAllergens] = useState([]);

  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  // Funkcja pomocnicza dla responsive kolory t≈Ça Paper
  const getAdaptiveBackgroundStyle = (paletteColor, opacity = 0.8) => ({
    backgroundColor: theme.palette.mode === 'dark' 
      ? `rgba(${
          paletteColor === 'info' ? '33, 150, 243' :
          paletteColor === 'success' ? '76, 175, 80' :
          paletteColor === 'warning' ? '255, 152, 0' :
          paletteColor === 'secondary' ? '156, 39, 176' :
          '33, 150, 243'
        }, 0.15)` 
      : `${paletteColor}.light`,
    opacity: theme.palette.mode === 'dark' ? 1 : opacity
  });

  // Funkcja pomocnicza do formatowania warto≈õci liczbowych z precyzjƒÖ
  const formatQuantityPrecision = (value, precision = 3) => {
    if (typeof value !== 'number' || isNaN(value)) return 0;
    return Math.round(value * Math.pow(10, precision)) / Math.pow(10, precision);
  };

  // Lista dostƒôpnych alergen√≥w
  const availableAllergens = [
    'Gluten',
    'Crustaceans',
    'Eggs',
    'Fish',
    'Peanuts',
    'Soybeans',
    'Milk',
    'Nuts',
    'Celery',
    'Mustard',
    'Sesame seeds',
    'Sulphur dioxide and sulphites',
    'Lupin',
    'Molluscs'
  ];

  // Funkcja do obs≈Çugi zmiany alergen√≥w
  const handleAllergenChange = (event, newValue) => {
    // Filtruj puste warto≈õci i duplikaty
    const filteredValue = newValue
      .map(value => typeof value === 'string' ? value.trim() : value)
      .filter(value => value && value.length > 0)
      .filter((value, index, array) => array.indexOf(value) === index);
    
    setSelectedAllergens(filteredValue);
  };

  // Stan dla g≈Ç√≥wnej zak≈Çadki
  const [mainTab, setMainTab] = useState(0);
  
  // Stan kontrolujƒÖcy wy≈õwietlanie wyczerpanych partii w dialogu rezerwacji
  const [showExhaustedBatches, setShowExhaustedBatches] = useState(false);

  // ‚úÖ Selective Data Loading - tracking za≈Çadowanych danych dla ka≈ºdej zak≈Çadki
  const [loadedTabs, setLoadedTabs] = useState({
    productionPlan: false,     // Historia produkcji, plan miesza≈Ñ
    forms: false,              // Formularze produkcyjne
    changeHistory: false,      // Historia zmian
    endProductReport: false    // Raport gotowego produktu
  });

  // ‚úÖ Selective Data Loading - funkcje ≈Çadowania danych dla konkretnych zak≈Çadek
  const loadProductionPlanData = useCallback(async () => {
    if (loadedTabs.productionPlan || !task?.id) return;
    
    try {
      // ≈Åadowanie danych planu produkcji
      
      // Historia produkcji
      const history = await getProductionHistory(task.id);
      setProductionHistory(history || []);
      
      // Dostƒôpne maszyny (je≈õli nie zosta≈Çy za≈Çadowane)
      if (availableMachines.length === 0) {
        await fetchAvailableMachines();
      }
      
      setLoadedTabs(prev => ({ ...prev, productionPlan: true }));
      // Plan produkcji za≈Çadowany
    } catch (error) {
      console.error('B≈ÇƒÖd ≈Çadowania planu produkcji:', error.message);
    }
  }, [loadedTabs.productionPlan, task?.id, availableMachines.length]);

  const loadFormsData = useCallback(async () => {
    if (loadedTabs.forms || !task?.moNumber) return;
    
    try {
      // ≈Åadowanie danych formularzy
      
      const responses = await fetchFormResponsesOptimized(task.moNumber);
      setFormResponses(responses);
      
      setLoadedTabs(prev => ({ ...prev, forms: true }));
      // Formularze za≈Çadowane
    } catch (error) {
      console.error('‚ùå Error loading Forms data:', error);
      setFormResponses({ completedMO: [], productionControl: [], productionShift: [] });
    }
  }, [loadedTabs.forms, task?.moNumber]);

  const loadChangeHistoryData = useCallback(async () => {
    if (loadedTabs.changeHistory || !task?.statusHistory?.length) return;
    
    try {
      // ≈Åadowanie historii zmian
      
      // Pobierz nazwy u≈ºytkownik√≥w dla historii zmian (je≈õli nie zosta≈Çy za≈Çadowane)
      const userIds = task.statusHistory.map(change => change.changedBy).filter(id => id);
      const uniqueUserIds = [...new Set(userIds)];
      
      if (uniqueUserIds.length > 0 && Object.keys(userNames).length === 0) {
        const names = await getUsersDisplayNames(uniqueUserIds);
        setUserNames(names);
      }
      
      setLoadedTabs(prev => ({ ...prev, changeHistory: true }));
      // Historia zmian za≈Çadowana
    } catch (error) {
      console.error('‚ùå Error loading Change History data:', error);
    }
  }, [loadedTabs.changeHistory, task?.statusHistory, userNames]);

  const loadEndProductReportData = useCallback(async () => {
    if (loadedTabs.endProductReport) return;
    
    try {
      // ≈Åadowanie raportu produktu ko≈Ñcowego
      
      // Dane firmy (je≈õli nie zosta≈Çy za≈Çadowane)
      if (!companyData) {
        const company = await getCompanyData();
        setCompanyData(company);
      }
      
      // Dane stanowiska pracy (je≈õli nie zosta≈Çy za≈Çadowane)
      if (!workstationData && task?.workstationId) {
        const workstation = await getWorkstationById(task.workstationId);
        setWorkstationData(workstation);
      }
      
      setLoadedTabs(prev => ({ ...prev, endProductReport: true }));
      // Raport produktu ko≈Ñcowego za≈Çadowany
    } catch (error) {
      console.error('‚ùå Error loading End Product Report data:', error);
    }
  }, [loadedTabs.endProductReport, companyData, workstationData, task?.workstationId]);

  // Funkcja do zmiany g≈Ç√≥wnej zak≈Çadki z selective loading
  const handleMainTabChange = (event, newValue) => {
    setMainTab(newValue);
    
    // ‚úÖ Selective Data Loading - ≈Çaduj dane tylko dla aktywnej zak≈Çadki
    switch (newValue) {
      case 2: // Produkcja i Plan
        loadProductionPlanData();
        break;
      case 3: // Formularze
        loadFormsData();
        break;
      case 4: // Historia zmian
        loadChangeHistoryData();
        break;
      case 5: // Raport gotowego produktu
        loadEndProductReportData();
        break;
      default:
        break;
    }
  };

  // ‚úÖ ETAP 2 OPTYMALIZACJI: ZastƒÖpienie starych useEffect hooks jednym zoptymalizowanym
  useEffect(() => {
    fetchAllTaskData();
  }, [id, navigate, showError]);

  // Zachowujemy osobne useEffect dla magazyn√≥w (≈Çadowane niezale≈ºnie)
  useEffect(() => {
    fetchWarehouses();
  }, []);

  // Pobieranie dostƒôpnych maszyn
  useEffect(() => {
    fetchAvailableMachines();
  }, []);

  // Wzbogacanie historii produkcji o dane z maszyn
  useEffect(() => {
    enrichProductionHistoryWithMachineData();
  }, [productionHistory, selectedMachineId]);

  // Zachowujemy useEffect dla synchronizacji formularza magazynu
  useEffect(() => {
    if (addToInventoryOnHistory && editedHistoryItem.quantity) {
      setHistoryInventoryData(prev => ({
        ...prev,
        finalQuantity: editedHistoryItem.quantity.toString()
      }));
    }
  }, [editedHistoryItem.quantity, addToInventoryOnHistory]);

  // USUNIƒòTE STARE useEffect HOOKS - zastƒÖpione przez fetchAllTaskData:
  // ‚ùå useEffect(() => { fetchProductionHistory(); }, [task?.id]);
  // ‚ùå useEffect(() => { if (task?.moNumber) fetchFormResponses(task.moNumber); }, [task?.moNumber]);
  // ‚ùå useEffect(() => { if (task?.id && task?.materials?.length > 0) fetchAwaitingOrdersForMaterials(); }, [task?.id, task?.materials?.length]);
  // ‚ùå useEffect(() => { if (task?.consumedMaterials && task.consumedMaterials.length > 0) fetchConsumedBatchPrices(); }, [task?.consumedMaterials]);

  // ‚úÖ ZOPTYMALIZOWANA funkcja pobierania odpowiedzi formularzy (Promise.all)
  const fetchFormResponsesOptimized = async (moNumber) => {
    if (!moNumber) return { completedMO: [], productionControl: [], productionShift: [] };
    
    try {
      // ‚úÖ OPTYMALIZACJA: R√≥wnoleg≈Çe pobieranie z limitami i sortowaniem
      const [completedMOSnapshot, controlSnapshot, shiftSnapshot] = await Promise.all([
        getDocs(query(
          collection(db, 'Forms/SkonczoneMO/Odpowiedzi'), 
          where('moNumber', '==', moNumber),
          orderBy('date', 'desc'), // Sortowanie od najnowszych
          limit(50) // Limit ostatnich 50 odpowiedzi
        )),
        getDocs(query(
          collection(db, 'Forms/KontrolaProdukcji/Odpowiedzi'), 
          where('manufacturingOrder', '==', moNumber),
          orderBy('fillDate', 'desc'), // Sortowanie od najnowszych
          limit(50) // Limit ostatnich 50 odpowiedzi
        )),
        getDocs(query(
          collection(db, 'Forms/ZmianaProdukcji/Odpowiedzi'), 
          where('moNumber', '==', moNumber),
          orderBy('fillDate', 'desc'), // Sortowanie od najnowszych
          limit(50) // Limit ostatnich 50 odpowiedzi
        ))
      ]);

      const completedMOData = completedMOSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        date: doc.data().date?.toDate(),
        formType: 'completedMO'
      }));

      const controlData = controlSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        fillDate: doc.data().fillDate?.toDate(),
        productionStartDate: doc.data().productionStartDate?.toDate(),
        productionEndDate: doc.data().productionEndDate?.toDate(),
        readingDate: doc.data().readingDate?.toDate(),
        formType: 'productionControl'
      }));

      const shiftData = shiftSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        fillDate: doc.data().fillDate?.toDate(),
        formType: 'productionShift'
      }));


      
      // ‚úÖ OPTYMALIZACJA: Sortowanie ju≈º wykonane w zapytaniu Firebase
      // Nie trzeba dodatkowo sortowaƒá po stronie klienta
      return {
        completedMO: completedMOData,
        productionControl: controlData,
        productionShift: shiftData
      };
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania odpowiedzi formularzy:', error);
      throw error;
    }
  };

  // ‚úÖ ETAP 2 OPTYMALIZACJI: Po≈ÇƒÖczona funkcja ≈Çadowania wszystkich danych zadania
  const fetchAllTaskData = async () => {
    try {
      setLoading(true);
      
      // KROK 1: Pobierz podstawowe dane zadania (musi byƒá pierwsze)
      const fetchedTask = await getTaskById(id);
      setTask(fetchedTask);
      
      // KROK 2: Przetw√≥rz materia≈Çy z grupowym pobieraniem pozycji magazynowych (z Etapu 1)
      if (fetchedTask?.materials?.length > 0) {
        // ‚úÖ OPTYMALIZACJA ETAP 1: Grupowe pobieranie pozycji magazynowych zamiast N+1 zapyta≈Ñ
        
        // Zbierz wszystkie ID pozycji magazynowych z materia≈Ç√≥w
        const inventoryItemIds = fetchedTask.materials
          .map(material => material.inventoryItemId)
          .filter(Boolean); // Usu≈Ñ undefined/null warto≈õci
        
        let inventoryItemsMap = new Map();
        
        if (inventoryItemIds.length > 0) {
          // Firebase "in" operator obs≈Çuguje maksymalnie 10 element√≥w na zapytanie
          const batchSize = 10;
          
          for (let i = 0; i < inventoryItemIds.length; i += batchSize) {
            const batch = inventoryItemIds.slice(i, i + batchSize);
            
            try {
              // Grupowe pobieranie pozycji magazynowych dla batcha
              const itemsQuery = query(
                collection(db, 'inventory'),
                where('__name__', 'in', batch)
              );
              
              const itemsSnapshot = await getDocs(itemsQuery);
              
              // Dodaj pobrane pozycje do mapy
              itemsSnapshot.forEach(doc => {
                inventoryItemsMap.set(doc.id, {
                  id: doc.id,
                  ...doc.data()
                });
              });
            } catch (error) {
              console.error(`B≈ÇƒÖd podczas grupowego pobierania pozycji magazynowych (batch ${i}-${i+batchSize}):`, error);
              // Kontynuuj z nastƒôpnym batchem, nie przerywaj ca≈Çego procesu
            }
          }
          

        }
        
        // Przygotuj listƒô materia≈Ç√≥w z aktualnymi cenami
        const materialsList = fetchedTask.materials.map(material => {
          let updatedMaterial = { ...material };
          
          // Je≈õli materia≈Ç ma powiƒÖzanie z pozycjƒÖ magazynowƒÖ, u≈ºyj danych z mapy
          if (material.inventoryItemId && inventoryItemsMap.has(material.inventoryItemId)) {
            const inventoryItem = inventoryItemsMap.get(material.inventoryItemId);
            updatedMaterial.unitPrice = inventoryItem.unitPrice || inventoryItem.price || 0;
          }
          
          return {
            ...updatedMaterial,
            plannedQuantity: preciseMultiply(updatedMaterial.quantity || 0, fetchedTask.quantity || 1)
          };
        });
        
        setMaterials(materialsList);
        
        // Inicjalizacja rzeczywistych ilo≈õci
        const quantities = {};
        materialsList.forEach(material => {
          // Pobierz actualQuantity z danych zadania lub u≈ºyj plannedQuantity jako warto≈õci domy≈õlnej
          const actualQuantity = fetchedTask.actualMaterialUsage && fetchedTask.actualMaterialUsage[material.id] !== undefined
            ? fetchedTask.actualMaterialUsage[material.id]
            : material.quantity;
          
          quantities[material.id] = actualQuantity;
        });
        
        setMaterialQuantities(quantities);
        
        // Inicjalizacja stanu includeInCosts - domy≈õlnie wszystkie materia≈Çy sƒÖ wliczane do koszt√≥w
        const costsInclude = {};
        materialsList.forEach(material => {
          costsInclude[material.id] = fetchedTask.materialInCosts && fetchedTask.materialInCosts[material.id] !== undefined
            ? fetchedTask.materialInCosts[material.id]
            : true;
        });
        
        setIncludeInCosts(costsInclude);
      }
      
      // KROK 2.5: ‚úÖ Wzbogaƒá dane skonsumowanych materia≈Ç√≥w o informacje z partii magazynowych
      if (fetchedTask?.consumedMaterials?.length > 0) {
        try {

          const enrichedConsumedMaterials = await enrichConsumedMaterialsData(fetchedTask.consumedMaterials);
          fetchedTask.consumedMaterials = enrichedConsumedMaterials;
          setTask(prevTask => ({
            ...prevTask,
            consumedMaterials: enrichedConsumedMaterials
          }));

        } catch (error) {
          console.warn('‚ö†Ô∏è Nie uda≈Ço siƒô wzbogaciƒá danych skonsumowanych materia≈Ç√≥w:', error);
        }
      }
      
      // KROK 3: ‚úÖ OPTYMALIZACJA ETAP 3: ≈Åadowanie tylko podstawowych danych (Selective Data Loading)
      const dataLoadingPromises = [];
      
      // Rezerwacje PO - zawsze potrzebne dla zak≈Çadki materia≈Ç√≥w
      if (fetchedTask?.id) {
        dataLoadingPromises.push(
          import('../../services/poReservationService')
            .then(module => module.getPOReservationsForTask(fetchedTask.id))
            .then(reservations => ({ type: 'poReservations', data: reservations || [] }))
            .catch(error => {
              console.error('B≈ÇƒÖd podczas pobierania rezerwacji PO:', error);
              return { type: 'poReservations', data: [] };
            })
        );
      }
      
      // Dane wersji receptury - potrzebne dla podstawowych informacji
      if (fetchedTask?.recipeId && fetchedTask?.recipeVersion) {
        dataLoadingPromises.push(
          getRecipeVersion(fetchedTask.recipeId, fetchedTask.recipeVersion)
            .then(recipeVersion => ({ type: 'recipeVersion', data: recipeVersion }))
            .catch(error => {
              console.error('B≈ÇƒÖd podczas pobierania wersji receptury:', error);
              return { type: 'recipeVersion', data: null };
            })
        );
      }
      
      // OczekujƒÖce zam√≥wienia dla materia≈Ç√≥w - potrzebne dla zak≈Çadki materia≈Ç√≥w
      if (fetchedTask?.materials?.length > 0) {
        dataLoadingPromises.push(
          fetchAwaitingOrdersForMaterials()
            .then(() => ({ type: 'awaitingOrders', data: 'loaded' }))
            .catch(error => {
              console.error('B≈ÇƒÖd podczas pobierania oczekujƒÖcych zam√≥wie≈Ñ:', error);
              return { type: 'awaitingOrders', data: 'error' };
            })
        );
      }
      
      // Wykonaj wszystkie zapytania r√≥wnolegle
      if (dataLoadingPromises.length > 0) {
        const results = await Promise.all(dataLoadingPromises);
        

        
        // Przetw√≥rz wyniki i ustaw stany (tylko podstawowe dane)
        results.forEach(result => {
          switch (result.type) {
            case 'recipeVersion':
              if (result.data && result.data.data) {
                // Dodaj dane wersji receptury do obiektu task
                setTask(prevTask => ({
                  ...prevTask,
                  recipe: result.data.data // result.data.data zawiera pe≈Çne dane receptury z tej wersji
                }));
              }
              break;
            case 'awaitingOrders':
              // OczekujƒÖce zam√≥wienia sƒÖ ju≈º ustawione w funkcji fetchAwaitingOrdersForMaterials
              break;
            case 'poReservations':
              setPOReservations(result.data);
              break;
          }
        });
      }
      
      // Je≈õli zadanie ma historiƒô status√≥w, pobierz dane u≈ºytkownik√≥w
      if (fetchedTask.statusHistory && fetchedTask.statusHistory.length > 0) {
        const userIds = fetchedTask.statusHistory.map(change => change.changedBy).filter(id => id);
        const uniqueUserIds = [...new Set(userIds)];
        await fetchStatusHistory(uniqueUserIds);
      }
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania zadania:', error);
      showError('Nie uda≈Ço siƒô pobraƒá danych zadania: ' + error.message);
      navigate('/production');
    } finally {
      setLoading(false);
    }
  };

  // Zachowujemy funkcje kompatybilno≈õci wstecznej (u≈ºywane w innych miejscach kodu)
  const fetchTask = async () => {
    // Przekierowanie do nowej zoptymalizowanej funkcji
    await fetchAllTaskData();
  };

  // Funkcja do pobierania rezerwacji PO
  const fetchPOReservations = async () => {
    try {
      const { getPOReservationsForTask } = await import('../../services/poReservationService');
      const reservations = await getPOReservationsForTask(id);
      setPOReservations(reservations);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania rezerwacji PO:', error);
      // Nie pokazujemy b≈Çƒôdu u≈ºytkownikowi - to nie jest krytyczne
    }
  };

  // Funkcja helper do pobierania rezerwacji PO dla konkretnego materia≈Çu
  const getPOReservationsForMaterial = (materialId) => {
    return poReservations.filter(reservation => 
      reservation.materialId === materialId
    );
  };

  // Funkcja helper do obliczania ≈õredniej wa≈ºonej ceny jednostkowej uwzglƒôdniajƒÖcej rezerwacje PO
  const calculateWeightedUnitPrice = (material, materialId) => {
    const reservedBatches = task.materialBatches && task.materialBatches[materialId];
    const allPOReservations = getPOReservationsForMaterial(materialId);
    
    // Filtruj aktywne rezerwacje PO (pending lub delivered ale nie w pe≈Çni przekszta≈Çcone)
    const activePOReservations = allPOReservations.filter(reservation => {
      if (reservation.status === 'pending') return true;
      if (reservation.status === 'delivered') {
        const convertedQuantity = reservation.convertedQuantity || 0;
        const reservedQuantity = reservation.reservedQuantity || 0;
        return convertedQuantity < reservedQuantity;
      }
      return false;
    });

    let totalQuantity = 0;
    let totalValue = 0;

    // Dodaj warto≈õƒá z standardowych rezerwacji magazynowych
    if (reservedBatches && reservedBatches.length > 0) {
      reservedBatches.forEach(batch => {
        const batchQuantity = parseFloat(batch.quantity || 0);
        const batchPrice = parseFloat(batch.unitPrice || material.unitPrice || 0);
        totalQuantity += batchQuantity;
        totalValue += batchQuantity * batchPrice;
      });
    }

    // Dodaj warto≈õƒá z aktywnych rezerwacji PO
    if (activePOReservations.length > 0) {
      activePOReservations.forEach(reservation => {
        const reservedQuantity = parseFloat(reservation.reservedQuantity || 0);
        const convertedQuantity = parseFloat(reservation.convertedQuantity || 0);
        const availableQuantity = reservedQuantity - convertedQuantity;
        const unitPrice = parseFloat(reservation.unitPrice || 0);
        
        if (availableQuantity > 0 && unitPrice > 0) {
          totalQuantity += availableQuantity;
          totalValue += availableQuantity * unitPrice;
        }
      });
    }

    // Je≈õli mamy jakiekolwiek rezerwacje z cenami, zwr√≥ƒá ≈õredniƒÖ wa≈ºonƒÖ
    if (totalQuantity > 0 && totalValue > 0) {
      return totalValue / totalQuantity;
    }

    // Fallback na cenƒô materia≈Çu
    return parseFloat(material.unitPrice || 0);
  };

  // Funkcja helper do generowania tooltip z informacjƒÖ o sk≈Çadzie ceny
  const getPriceBreakdownTooltip = (material, materialId) => {
    const reservedBatches = task.materialBatches && task.materialBatches[materialId];
    const allPOReservations = getPOReservationsForMaterial(materialId);
    const activePOReservations = allPOReservations.filter(reservation => {
      if (reservation.status === 'pending') return true;
      if (reservation.status === 'delivered') {
        const convertedQuantity = reservation.convertedQuantity || 0;
        const reservedQuantity = reservation.reservedQuantity || 0;
        return convertedQuantity < reservedQuantity;
      }
      return false;
    });

    const breakdown = [];
    
    // Standardowe rezerwacje
    if (reservedBatches && reservedBatches.length > 0) {
      const batchTotal = reservedBatches.reduce((sum, batch) => sum + parseFloat(batch.quantity || 0), 0);
      breakdown.push(`Rezerwacje magazynowe: ${batchTotal} ${material.unit}`);
    }

    // Rezerwacje PO
    if (activePOReservations.length > 0) {
      const poTotal = activePOReservations.reduce((sum, reservation) => {
        const reservedQuantity = parseFloat(reservation.reservedQuantity || 0);
        const convertedQuantity = parseFloat(reservation.convertedQuantity || 0);
        return sum + (reservedQuantity - convertedQuantity);
      }, 0);
      breakdown.push(`Rezerwacje z PO: ${poTotal} ${material.unit}`);
      
      // Detale PO
      activePOReservations.forEach(reservation => {
        const availableQuantity = parseFloat(reservation.reservedQuantity || 0) - parseFloat(reservation.convertedQuantity || 0);
        const unitPrice = parseFloat(reservation.unitPrice || 0);
        breakdown.push(`  ‚Ä¢ PO ${reservation.poNumber}: ${availableQuantity} ${material.unit} @ ${unitPrice.toFixed(4)}‚Ç¨`);
      });
    }

    if (breakdown.length === 0) {
      return `Brak rezerwacji - u≈ºywana cena z katalogu: ${parseFloat(material.unitPrice || 0).toFixed(4)}‚Ç¨`;
    }

    return breakdown.join('\n');
  };

  // Funkcja do obliczania czy materia≈Ç ma wystarczajƒÖce pokrycie rezerwacji
  const calculateMaterialReservationCoverage = (material, materialId) => {
    // 1. Wymagana ilo≈õƒá - u≈ºyj rzeczywistej ilo≈õci je≈õli dostƒôpna, w przeciwnym razie planowanƒÖ
    const actualUsage = task.actualMaterialUsage || {};
    const requiredQuantity = (actualUsage[materialId] !== undefined) 
      ? parseFloat(actualUsage[materialId]) || 0
      : (materialQuantities[material.id] || material.quantity || 0);
    
    // 2. Skonsumowana ilo≈õƒá
    const consumedQuantity = getConsumedQuantityForMaterial(task.consumedMaterials, materialId);
    
    // 3. Standardowe rezerwacje magazynowe
    const reservedBatches = task.materialBatches && task.materialBatches[materialId];
    const standardReservationsTotal = reservedBatches ? reservedBatches.reduce((sum, batch) => {
      const batchQuantity = parseFloat(batch.quantity || 0);
      return sum + batchQuantity;
    }, 0) : 0;
    
    // 4. Rezerwacje z PO (tylko aktywne) - WY≈ÅƒÑCZONE z wylicze≈Ñ kolorowania
    const allPOReservations = getPOReservationsForMaterial(materialId);
    const activePOReservationsTotal = allPOReservations
      .filter(reservation => {
        // Uwzglƒôdnij tylko pending i delivered (ale nie w pe≈Çni przekszta≈Çcone)
        if (reservation.status === 'pending') return true;
        if (reservation.status === 'delivered') {
          const convertedQuantity = reservation.convertedQuantity || 0;
          const reservedQuantity = reservation.reservedQuantity || 0;
          return convertedQuantity < reservedQuantity;
        }
        return false;
      })
      .reduce((sum, reservation) => {
        const convertedQuantity = reservation.convertedQuantity || 0;
        const reservedQuantity = reservation.reservedQuantity || 0;
        return sum + (reservedQuantity - convertedQuantity);
      }, 0);
    
    // 5. Ca≈Çkowite pokrycie = skonsumowana ilo≈õƒá + standardowe rezerwacje (BEZ rezerwacji PO)
    // Formatuj wszystkie warto≈õci z precyzjƒÖ 3 miejsc po przecinku
    const formatPrecision = (value) => Math.round(value * 1000) / 1000;
    
    const formattedRequiredQuantity = formatPrecision(requiredQuantity);
    const formattedConsumedQuantity = formatPrecision(consumedQuantity);
    const formattedStandardReservationsTotal = formatPrecision(standardReservationsTotal);
    const totalCoverage = formatPrecision(formattedConsumedQuantity + formattedStandardReservationsTotal);
    
    // 6. Sprawd≈∫ czy pokrycie jest wystarczajƒÖce
    // U≈ºywamy tolerancji dla por√≥wnania liczb zmiennoprzecinkowych (0.001 = 1g dla kg)
    const tolerance = 0.001;
    const hasFullCoverage = (totalCoverage + tolerance) >= formattedRequiredQuantity;
    
    // Debug logging dla problem√≥w z pokryciem
    if (Math.abs(totalCoverage - formattedRequiredQuantity) < 0.1 && !hasFullCoverage) {
      console.log(`[DEBUG COVERAGE] Materia≈Ç ${materialId}:`, {
        originalRequiredQuantity: requiredQuantity,
        formattedRequiredQuantity,
        originalTotalCoverage: formattedConsumedQuantity + formattedStandardReservationsTotal,
        formattedTotalCoverage: totalCoverage,
        consumedQuantity: formattedConsumedQuantity,
        standardReservationsTotal: formattedStandardReservationsTotal,
        difference: totalCoverage - formattedRequiredQuantity,
        hasFullCoverage,
        tolerance
      });
    }
    
    return {
      requiredQuantity: formattedRequiredQuantity,
      consumedQuantity: formattedConsumedQuantity,
      standardReservationsTotal: formattedStandardReservationsTotal,
      activePOReservationsTotal,
      totalCoverage,
      hasFullCoverage,
      coveragePercentage: formattedRequiredQuantity > 0 ? (totalCoverage / formattedRequiredQuantity) * 100 : 100
    };
  };

  // Funkcja do pobierania powiƒÖza≈Ñ sk≈Çadnik√≥w z rezerwacjami
  const fetchIngredientReservationLinks = async () => {
    if (!task?.id) return;
    
    try {
      const links = await getIngredientReservationLinks(task.id);
      setIngredientReservationLinks(links);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania powiƒÖza≈Ñ sk≈Çadnik√≥w:', error);
    }
  };

  // Memoizowana mapa ilo≈õci wydanych dla wszystkich materia≈Ç√≥w
  const issuedQuantitiesMap = useMemo(() => {
    if (!ingredientReservationLinks || Object.keys(ingredientReservationLinks).length === 0) {
      return {};
    }

    const quantitiesMap = {};

    // Przejd≈∫ przez wszystkie powiƒÖzania sk≈Çadnik√≥w
    Object.entries(ingredientReservationLinks).forEach(([ingredientId, linksArray]) => {
      if (Array.isArray(linksArray)) {
        linksArray.forEach(link => {
          const batchMaterialName = link.batchSnapshot?.materialName;
          if (batchMaterialName) {
            // Zainicjalizuj sumƒô dla materia≈Çu je≈õli nie istnieje
            if (!quantitiesMap[batchMaterialName]) {
              quantitiesMap[batchMaterialName] = 0;
            }
            // Dodaj powiƒÖzanƒÖ ilo≈õƒá do sumy
            quantitiesMap[batchMaterialName] += parseFloat(link.linkedQuantity || 0);
          }
        });
      }
    });

    return quantitiesMap;
  }, [ingredientReservationLinks]);

  // Funkcja do obliczania ilo≈õci wydanej dla materia≈Çu na podstawie powiƒÖza≈Ñ w planie miesza≈Ñ
  const calculateIssuedQuantityForMaterial = useCallback((materialName) => {
    return issuedQuantitiesMap[materialName] || 0;
  }, [issuedQuantitiesMap]);

  // Funkcja do od≈õwie≈ºania tylko podstawowych danych zadania (dla POReservationManager)
  const fetchTaskBasicData = async () => {
    try {
      // Pobierz tylko podstawowe dane zadania bez pokazywania wska≈∫nika ≈Çadowania
      const fetchedTask = await getTaskById(id);
      setTask(fetchedTask);
      
      // Je≈õli zadanie ma materia≈Çy, od≈õwie≈º tylko dane materia≈Ç√≥w
      if (fetchedTask?.materials?.length > 0) {
        await fetchBatchesForMaterialsOptimized();
      }
      
      // Od≈õwie≈º r√≥wnie≈º rezerwacje PO
      await fetchPOReservations();
    } catch (error) {
      console.error('B≈ÇƒÖd podczas od≈õwie≈ºania podstawowych danych zadania:', error);
      showError('Nie uda≈Ço siƒô od≈õwie≈ºyƒá danych zadania: ' + error.message);
    }
  };
  
  const fetchProductionHistory = async () => {
    if (!task || !task.id) {
      return; // Zabezpieczenie przed b≈Çƒôdami null/undefined
    }
    try {
      const history = await getProductionHistory(task.id);
      setProductionHistory(history || []);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania historii produkcji:', error);
      setProductionHistory([]);
    }
  };

  // Dodajƒô efekt pobierajƒÖcy odpowiedzi formularzy przy ka≈ºdej zmianie numeru MO
  useEffect(() => {
    if (task?.moNumber) {
      fetchFormResponses(task.moNumber);
    }
  }, [task?.moNumber]);

  // Dodajƒô efekt pobierajƒÖcy oczekiwane zam√≥wienia przy ka≈ºdym za≈Çadowaniu zadania
  useEffect(() => {
    if (task?.id && task?.materials?.length > 0) {
      fetchAwaitingOrdersForMaterials();
    }
  }, [task?.id, task?.materials?.length]);

  // Dodajƒô efekt pobierajƒÖcy ceny skonsumowanych partii
  useEffect(() => {
    if (task?.consumedMaterials && task.consumedMaterials.length > 0) {
      fetchConsumedBatchPrices();
    }
  }, [task?.consumedMaterials]);

  // Dodajƒô efekt pobierajƒÖcy za≈ÇƒÖczniki z PO dla sk≈Çadnik√≥w
  useEffect(() => {
    if (task?.recipe?.ingredients && task?.consumedMaterials && materials.length > 0) {
      fetchIngredientAttachments();
      fetchIngredientBatchAttachments();
    }
  }, [task?.recipe?.ingredients, task?.consumedMaterials, materials]);

  // Efekt z listenerem w czasie rzeczywistym dla powiƒÖza≈Ñ sk≈Çadnik√≥w z rezerwacjami
  useEffect(() => {
    if (!task?.id) return;

    console.log('üîÑ [INGREDIENT LINKS] Ustawianie listenera dla zadania:', task.id);
    
    const ingredientLinksQuery = query(
      collection(db, 'ingredientReservationLinks'),
      where('taskId', '==', task.id)
    );

    const unsubscribeIngredientLinks = onSnapshot(
      ingredientLinksQuery,
      (snapshot) => {
        console.log('üì° [INGREDIENT LINKS] Otrzymano aktualizacjƒô powiƒÖza≈Ñ sk≈Çadnik√≥w');
        
        const links = {};
        snapshot.docs.forEach(doc => {
          const data = doc.data();
          
          // Oblicz procent konsumpcji
          const consumptionPercentage = data.linkedQuantity > 0 
            ? Math.round((data.consumedQuantity / data.linkedQuantity) * 100)
            : 0;
          
          const linkItem = {
            id: doc.id,
            ...data,
            consumptionPercentage: consumptionPercentage,
            // U≈ºywaj danych ze snapshotu zamiast pobierania na bie≈ºƒÖco
            warehouseName: data.batchSnapshot?.warehouseName,
            warehouseAddress: data.batchSnapshot?.warehouseAddress,
            expiryDateString: data.batchSnapshot?.expiryDateString,
            batchNumber: data.batchSnapshot?.batchNumber,
            // Zachowaj kompatybilno≈õƒá wstecznƒÖ
            quantity: data.linkedQuantity, // Dla komponent√≥w u≈ºywajƒÖcych starego pola
            reservationType: data.reservationType
          };
          
          // Grupuj powiƒÖzania po ingredientId
          if (!links[data.ingredientId]) {
            links[data.ingredientId] = [];
          }
          links[data.ingredientId].push(linkItem);
        });
        
        setIngredientReservationLinks(links);
        console.log('‚úÖ [INGREDIENT LINKS] Zaktualizowano powiƒÖzania sk≈Çadnik√≥w:', Object.keys(links).length, 'sk≈Çadnik√≥w');
      },
      (error) => {
        console.error('‚ùå [INGREDIENT LINKS] B≈ÇƒÖd listenera powiƒÖza≈Ñ sk≈Çadnik√≥w:', error);
      }
    );

    // Cleanup funkcja
    return () => {
      console.log('üßπ [INGREDIENT LINKS] Czyszczenie listenera dla zadania:', task.id);
      unsubscribeIngredientLinks();
    };
  }, [task?.id]);

  // Pobieranie za≈ÇƒÖcznik√≥w bada≈Ñ klinicznych
  useEffect(() => {
    if (task?.id) {
      fetchClinicalAttachments();
      fetchAdditionalAttachments();
    }
  }, [task?.id]);

  // Pobieranie alergen√≥w z receptury przy za≈Çadowaniu zadania
  useEffect(() => {
    if (task?.recipe?.allergens && task.recipe.allergens.length > 0) {
      console.log('Pobieranie alergen√≥w z receptury:', task.recipe.allergens);
      setSelectedAllergens(task.recipe.allergens);
    } else if (task?.recipeId && !task?.recipe?.allergens) {
      // Je≈õli zadanie ma recipeId ale nie ma za≈Çadowanych danych receptury, pobierz je
      const fetchRecipeAllergens = async () => {
        try {
          const { getRecipeById } = await import('../../services/recipeService');
          const recipe = await getRecipeById(task.recipeId);
          if (recipe?.allergens && recipe.allergens.length > 0) {
            console.log('Pobrano alergeny z receptury:', recipe.allergens);
            setSelectedAllergens(recipe.allergens);
          }
        } catch (error) {
          console.error('B≈ÇƒÖd podczas pobierania alergen√≥w z receptury:', error);
        }
      };
      fetchRecipeAllergens();
    }
  }, [task?.recipe?.allergens, task?.recipeId]);

  // Zunifikowana automatyczna aktualizacja koszt√≥w z kontrolƒÖ pƒôtli i szczeg√≥≈Çowymi logami diagnostycznymi
  useEffect(() => {
    if (!task?.id || !materials.length) return;
    
    let isActive = true;
    let updateTimeout = null;
    
    const checkAndUpdateCosts = async () => {
      try {
        console.log('üîç [COST-SYNC] Rozpoczynam sprawdzanie synchronizacji koszt√≥w');
        
        // Por√≥wnaj koszty u≈ºywajƒÖc nowej funkcji
        const comparison = await compareCostsWithDatabase();
        if (!comparison || !isActive) return;
        
        const { uiCosts, dbCosts, differences } = comparison;
        const COST_TOLERANCE = 0.005;
        const maxChange = Math.max(...Object.values(differences));
        const costChanged = maxChange > COST_TOLERANCE;
        
        if (costChanged) {
          console.log(`üö® [COST-SYNC] Wykryto r√≥≈ºnicƒô koszt√≥w - max zmiana: ${maxChange.toFixed(4)}‚Ç¨ > ${COST_TOLERANCE}‚Ç¨`);
          console.log('üìä [COST-SYNC] Szczeg√≥≈Çy r√≥≈ºnic:', {
            totalMaterialCost: `UI: ${uiCosts.totalMaterialCost}‚Ç¨ vs DB: ${dbCosts.totalMaterialCost}‚Ç¨ (Œî${differences.totalMaterialCost.toFixed(4)}‚Ç¨)`,
            unitMaterialCost: `UI: ${uiCosts.unitMaterialCost}‚Ç¨ vs DB: ${dbCosts.unitMaterialCost}‚Ç¨ (Œî${differences.unitMaterialCost.toFixed(4)}‚Ç¨)`,
            totalFullProductionCost: `UI: ${uiCosts.totalFullProductionCost}‚Ç¨ vs DB: ${dbCosts.totalFullProductionCost}‚Ç¨ (Œî${differences.totalFullProductionCost.toFixed(4)}‚Ç¨)`,
            unitFullProductionCost: `UI: ${uiCosts.unitFullProductionCost}‚Ç¨ vs DB: ${dbCosts.unitFullProductionCost}‚Ç¨ (Œî${differences.unitFullProductionCost.toFixed(4)}‚Ç¨)`
          });
          
          // Anuluj poprzedni timeout je≈õli istnieje
          if (updateTimeout) {
            clearTimeout(updateTimeout);
          }
          
          // Debounce aktualizacja
          updateTimeout = setTimeout(async () => {
            if (!isActive) return;
            
            try {
              console.log('üîÑ [COST-SYNC] Rozpoczynam synchronizacjƒô koszt√≥w z bazƒÖ danych');
              const { updateTaskCostsAutomatically, getTaskById } = await import('../../services/productionService');
              const result = await updateTaskCostsAutomatically(
                task.id, 
                currentUser?.uid || 'system', 
                'Synchronizacja koszt√≥w - r√≥≈ºnica miƒôdzy UI a bazƒÖ danych'
              );
              
              if (result.success && isActive) {
                  const updatedTask = await getTaskById(task.id);
                  setTask(updatedTask);
                console.log('‚úÖ [COST-SYNC] Pomy≈õlnie zsynchronizowano koszty z bazƒÖ danych');
                
                // Sprawd≈∫ rezultat po synchronizacji
                setTimeout(async () => {
                  if (isActive) {
                    const postSyncComparison = await compareCostsWithDatabase();
                    if (postSyncComparison) {
                      const postSyncMaxChange = Math.max(...Object.values(postSyncComparison.differences));
                      console.log(`üìà [COST-SYNC] Stan po synchronizacji - max r√≥≈ºnica: ${postSyncMaxChange.toFixed(4)}‚Ç¨`);
                    }
                  }
                }, 1000);
              } else {
                console.warn('‚ö†Ô∏è [COST-SYNC] Synchronizacja nie powiod≈Ça siƒô:', result);
              }
            } catch (error) {
              console.error('‚ùå [COST-SYNC] B≈ÇƒÖd podczas synchronizacji koszt√≥w:', error);
            }
          }, 2000);
        } else {
          console.log(`‚úÖ [COST-SYNC] Koszty sƒÖ zsynchronizowane (max r√≥≈ºnica: ${maxChange.toFixed(4)}‚Ç¨ ‚â§ ${COST_TOLERANCE}‚Ç¨)`);
        }
      } catch (error) {
        console.error('‚ùå [COST-SYNC] B≈ÇƒÖd podczas sprawdzania synchronizacji koszt√≥w:', error);
      }
    };
    
    // Uruchom sprawdzenie po kr√≥tkiej przerwie dla stabilno≈õci
    const initTimeout = setTimeout(() => {
      if (isActive) checkAndUpdateCosts();
    }, 500); // Zwiƒôkszony delay dla stabilno≈õci
    
    return () => {
      isActive = false;
      if (initTimeout) clearTimeout(initTimeout);
      if (updateTimeout) clearTimeout(updateTimeout);
    };
  }, [
    task?.id,
    task?.totalMaterialCost, 
    task?.unitMaterialCost, 
    task?.totalFullProductionCost, 
    task?.unitFullProductionCost, 
    task?.consumedMaterials, 
    task?.materialBatches, 
    materialQuantities, 
    includeInCosts, 
    materials,
    currentUser?.uid
  ]);

  // Nas≈Çuchiwanie powiadomie≈Ñ o aktualizacji koszt√≥w zada≈Ñ z innych miejsc (np. z PO)
  useEffect(() => {
    if (!task?.id) return;

    let channel;
    try {
      // Stw√≥rz BroadcastChannel do nas≈Çuchiwania aktualizacji koszt√≥w
      channel = new BroadcastChannel('production-costs-update');
      
      const handleCostUpdate = async (event) => {
        if (event.data.type === 'TASK_COSTS_UPDATED' && event.data.taskId === task.id) {
          console.log(`[BROADCAST] Otrzymano powiadomienie o aktualizacji koszt√≥w zadania ${task.id}:`, event.data.costs);
          
          // Od≈õwie≈º dane zadania po kr√≥tkiej przerwie, aby upewniƒá siƒô, ≈ºe baza danych zosta≈Ça zaktualizowana
          setTimeout(async () => {
            try {
              const { getTaskById } = await import('../../services/productionService');
              const updatedTask = await getTaskById(task.id);
              setTask(updatedTask);
              console.log('üîÑ Od≈õwie≈ºono dane zadania po otrzymaniu powiadomienia o aktualizacji koszt√≥w');
            } catch (error) {
              console.warn('‚ö†Ô∏è Nie uda≈Ço siƒô od≈õwie≈ºyƒá danych zadania po powiadomieniu:', error);
            }
          }, 500);
        }
      };

      channel.addEventListener('message', handleCostUpdate);
      console.log(`[BROADCAST] Nas≈Çuchiwanie powiadomie≈Ñ o kosztach dla zadania ${task.id}`);
      
    } catch (error) {
      console.warn('Nie mo≈ºna utworzyƒá BroadcastChannel dla koszt√≥w zada≈Ñ:', error);
    }

    return () => {
      if (channel) {
        channel.close();
        console.log(`[BROADCAST] Zamkniƒôto nas≈Çuchiwanie powiadomie≈Ñ o kosztach dla zadania ${task.id}`);
      }
    };
  }, [task?.id]);

  // Funkcja do pobierania magazyn√≥w
  const fetchWarehouses = async () => {
    try {
      setWarehousesLoading(true);
      const { getAllWarehouses } = await import('../../services/inventory');
      const warehousesList = await getAllWarehouses();
      setWarehouses(warehousesList);
      
      // Je≈õli jest przynajmniej jeden magazyn, ustaw go jako domy≈õlny
      if (warehousesList.length > 0) {
        setHistoryInventoryData(prev => ({
          ...prev,
          warehouseId: warehousesList[0].id
        }));
      }
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania magazyn√≥w:', error);
    } finally {
      setWarehousesLoading(false);
    }
  };

  // Funkcja do pobierania dostƒôpnych maszyn
  const fetchAvailableMachines = async () => {
    try {
      const machines = await getAvailableMachines();
      setAvailableMachines(machines);
      
      // Je≈õli zadanie ma workstationId, spr√≥buj znale≈∫ƒá odpowiadajƒÖcƒÖ maszynƒô
      if (task?.workstationId && machines.length > 0) {
        // Mo≈ºemy u≈ºyƒá workstationId jako machineId lub znale≈∫ƒá maszynƒô na podstawie nazwy
        const machineForWorkstation = machines.find(machine => 
          machine.id === task.workstationId || 
          machine.name.toLowerCase().includes(task.workstationId.toLowerCase())
        );
        
        if (machineForWorkstation) {
          setSelectedMachineId(machineForWorkstation.id);
        }
      }
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania maszyn:', error);
    }
  };

  // Funkcja do wzbogacania historii produkcji o dane z maszyn
  const enrichProductionHistoryWithMachineData = async () => {
    if (!selectedMachineId || !productionHistory || productionHistory.length === 0) {
      setEnrichedProductionHistory(productionHistory || []);
      return;
    }

    try {
      console.log(`Wzbogacanie historii produkcji danymi z maszyny ${selectedMachineId}`);
      const enrichedHistory = await getProductionDataForHistory(selectedMachineId, productionHistory);
      setEnrichedProductionHistory(enrichedHistory);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas wzbogacania historii produkcji:', error);
      setEnrichedProductionHistory(productionHistory || []);
    }
  };

  // Pobieranie magazyn√≥w przy montowaniu komponentu
  useEffect(() => {
    fetchWarehouses();
  }, []);

  // Synchronizacja ilo≈õci wyprodukowanej z ilo≈õciƒÖ ko≈ÑcowƒÖ w formularzu magazynu dla dialogu historii
  useEffect(() => {
    if (addToInventoryOnHistory && editedHistoryItem.quantity) {
      setHistoryInventoryData(prev => ({
        ...prev,
        finalQuantity: editedHistoryItem.quantity.toString()
      }));
    }
  }, [editedHistoryItem.quantity, addToInventoryOnHistory]);

  const fetchStatusHistory = async (userIds) => {
    const names = await getUsersDisplayNames(userIds);
    setUserNames(names);
  };

  const handleStatusChange = async (newStatus) => {
    try {
      if (newStatus === 'Zako≈Ñczone' && !task.materialConsumptionConfirmed && task.materials && task.materials.length > 0) {
        setConsumptionDialogOpen(true);
        return;
      }

      setLoading(true);
      await updateTaskStatus(id, newStatus, currentUser.uid);
      
      // Ponowne pobranie danych zadania
      const updatedTask = await getTaskById(id);
      setTask(updatedTask);
      
      // Aktualizacja danych u≈ºytkownik√≥w
      if (updatedTask.statusHistory && updatedTask.statusHistory.length > 0) {
        const userIds = updatedTask.statusHistory.map(change => change.changedBy).filter(id => id);
        const uniqueUserIds = [...new Set(userIds)];
        const missingUserIds = uniqueUserIds.filter(id => !userNames[id]);
        
        if (missingUserIds.length > 0) {
          const newNames = await getUsersDisplayNames(missingUserIds);
          setUserNames(prevNames => ({
            ...prevNames,
            ...newNames
          }));
        }
      }
      
      // Wy≈õwietl powiadomienie
      showSuccess(`Status zadania zmieniony na: ${newStatus}`);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas zmiany statusu:', error);
      showError('Nie uda≈Ço siƒô zmieniƒá statusu zadania: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // Funkcje obs≈ÇugujƒÖce zarzƒÖdzanie materia≈Çami
  const handleQuantityChange = (materialId, value) => {
    // Konwertuj warto≈õƒá na liczbƒô tylko je≈õli nie jest pusta
    const numValue = value === '' ? '' : parseFloat(value);
    
    // Zapisz warto≈õƒá tylko je≈õli jest pusta, lub jest poprawnƒÖ liczbƒÖ
    if (value === '' || (!isNaN(numValue))) {
      setMaterialQuantities(prev => ({
        ...prev,
        [materialId]: numValue
      }));
      
      // Resetuj b≈Çƒôdy
      if (errors[materialId]) {
        setErrors(prev => {
          const newErrors = { ...prev };
          delete newErrors[materialId];
          return newErrors;
        });
      }
    }
  };
  
  const validateQuantities = () => {
    const newErrors = {};
    let isValid = true;
    
    materials.forEach(material => {
      const quantity = materialQuantities[material.id];
      
      // Sprawd≈∫ czy quantity jest liczbƒÖ
      if (isNaN(quantity)) {
        newErrors[material.id] = 'Ilo≈õƒá musi byƒá liczbƒÖ';
        isValid = false;
      }
      // Sprawd≈∫ czy quantity nie jest ujemne
      else if (quantity < 0) {
        newErrors[material.id] = 'Ilo≈õƒá nie mo≈ºe byƒá ujemna';
        isValid = false;
      }
    });
    
    setErrors(newErrors);
    return isValid;
  };
  
  const handleSaveChanges = async () => {
    try {
      if (!validateQuantities()) {
        return;
      }
      
      const result = await updateActualMaterialUsage(id, materialQuantities);
      showSuccess(result.message || 'Zu≈ºycie materia≈Ç√≥w zaktualizowane');
      
      // Je≈õli zu≈ºycie by≈Ço wcze≈õniej potwierdzone, wy≈õwietl dodatkowe powiadomienie
      if (result.message && result.message.includes('Poprzednie potwierdzenie zu≈ºycia zosta≈Ço anulowane')) {
        setTimeout(() => {
          showInfo('Poprzednie potwierdzenie zu≈ºycia zosta≈Ço anulowane z powodu zmiany ilo≈õci. Proszƒô ponownie potwierdziƒá zu≈ºycie materia≈Ç√≥w.');
        }, 1000);
      }
      
      setEditMode(false);
      
      // Od≈õwie≈º dane zadania
      const updatedTask = await getTaskById(id);
      setTask(updatedTask);

      // Zaktualizuj te≈º lokalne zmienne
      if (updatedTask?.materials?.length > 0) {
        const materialsList = updatedTask.materials.map(material => ({
          ...material,
          plannedQuantity: preciseMultiply(material.quantity || 0, updatedTask.quantity || 1)
        }));
        
        setMaterials(materialsList);
      }
    } catch (error) {
      console.error('B≈ÇƒÖd podczas zapisywania zmian:', error);
      showError('Nie uda≈Ço siƒô zaktualizowaƒá zu≈ºycia materia≈Ç√≥w: ' + error.message);
    }
  };
  
  const handleConfirmConsumption = async () => {
    try {
      setConfirmationDialogOpen(false);
      
      await confirmMaterialConsumption(id);
      showSuccess('Zu≈ºycie materia≈Ç√≥w potwierdzone. Stany magazynowe zosta≈Çy zaktualizowane.');
      
      // Od≈õwie≈º dane zadania
      const updatedTask = await getTaskById(id);
      setTask(updatedTask);
      
      // Zamknij dialog konsumpcji po pomy≈õlnym potwierdzeniu
      setConsumptionDialogOpen(false);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas potwierdzania zu≈ºycia:', error);
      showError('Nie uda≈Ço siƒô potwierdziƒá zu≈ºycia materia≈Ç√≥w: ' + error.message);
    }
  };

  const handleDelete = async () => {
    try {
      setDeleteDialog(false);
      setLoading(true);
      await deleteTask(id);
      showSuccess('Zadanie zosta≈Ço usuniƒôte');
      navigate('/production');
    } catch (error) {
      showError('B≈ÇƒÖd podczas usuwania zadania: ' + error.message);
      console.error('Error deleting task:', error);
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'Zaplanowane':
        return '#1976d2'; // oryginalny niebieski
      case 'W trakcie':
        return '#ff9800'; // oryginalny pomara≈Ñczowy
      case 'Potwierdzenie zu≈ºycia':
        return '#2196f3'; // oryginalny jasnoniebieski
      case 'Zako≈Ñczone':
        return '#4caf50'; // oryginalny zielony
      case 'Anulowane':
        return '#f44336'; // oryginalny czerwony
      case 'Wstrzymane':
        return '#757575'; // oryginalny szary
      default:
        return '#757575'; // oryginalny szary
    }
  };

  const getStatusActions = () => {
    // Przygotuj przyciski akcji w zale≈ºno≈õci od statusu zadania
    const actions = [];

    // Przycisk do wydruku szczeg√≥≈Ç√≥w MO
    actions.push(
      <Button
        key="print-mo"
        variant="outlined"
        startIcon={<PrintIcon />}
        onClick={handlePrintMODetails}
        sx={{ mr: 1, mb: isMobile ? 1 : 0 }}
      >
        {t('buttons.printMO')}
      </Button>
    );

    // Przycisk do wydruku raportu materia≈Ç√≥w i LOT-√≥w
    actions.push(
      <Button
        key="print-materials"
        variant="outlined"
        startIcon={<PrintIcon />}
        onClick={handlePrintMaterialsAndLots}
        sx={{ mr: 1, mb: isMobile ? 1 : 0 }}
      >
        {t('buttons.materialReport')}
      </Button>
    );

    // ... pozosta≈Çe przyciski akcji ...

    // Zwr√≥ƒá kontener z przyciskami, zastosuj flexbox dla lepszego uk≈Çadu na mobilnych
    return (
      <Box sx={{ 
        display: 'flex', 
        flexDirection: isMobile ? 'column' : 'row',
        alignItems: isMobile ? 'stretch' : 'center',
        gap: 1
      }}>
        {actions}
      </Box>
    );
  };

  // Funkcja otwierajƒÖca dialog przyjƒôcia do magazynu
  const handleReceiveClick = () => {
    setReceiveDialogOpen(true);
  };
  
  // Funkcja obs≈ÇugujƒÖca dodanie produktu do magazynu
  const handleReceiveItem = async () => {
    try {
      setLoading(true);
      setReceiveDialogOpen(false);
      
      // Sprawd≈∫ czy zadanie ma pozycjƒô magazynowƒÖ, je≈õli nie - spr√≥buj znale≈∫ƒá przez recepturƒô
      let inventoryProductId = task.inventoryProductId;
      
      if (!inventoryProductId && task.recipeId) {
        try {
          console.log(`Sprawdzanie pozycji magazynowej dla receptury ${task.recipeId}`);
          const { getInventoryItemByRecipeId } = await import('../../services/inventory');
          const recipeInventoryItem = await getInventoryItemByRecipeId(task.recipeId);
          
          if (recipeInventoryItem) {
            inventoryProductId = recipeInventoryItem.id;
            console.log(`Znaleziono pozycjƒô magazynowƒÖ z receptury: ${recipeInventoryItem.name} (ID: ${inventoryProductId})`);
            
            // Zaktualizuj zadanie z pozycjƒÖ magazynowƒÖ z receptury
            const { updateTask } = await import('../../services/productionService');
            await updateTask(id, {
              inventoryProductId: inventoryProductId
            }, currentUser.uid);
            
            // Od≈õwie≈º dane zadania z nowƒÖ pozycjƒÖ magazynowƒÖ
            const updatedTask = await getTaskById(id);
            setTask(updatedTask);
          }
        } catch (error) {
          console.error('B≈ÇƒÖd podczas pobierania pozycji magazynowej z receptury:', error);
        }
      }
      
      // Je≈õli produkt jest powiƒÖzany z pozycjƒÖ w magazynie, przenie≈õ do formularza przyjƒôcia
      if (inventoryProductId) {
        // Przekieruj do strony przyjƒôcia towaru z parametrami
        const unitPrice = task.costs && task.quantity ? 
          Number(task.costs.totalCost / task.quantity) : 0;
        
        // U≈ºyj LOT z zadania produkcyjnego, je≈õli jest dostƒôpny,
        // w przeciwnym przypadku wygeneruj na podstawie numeru MO
        const lotNumber = task.lotNumber || 
                         (task.moNumber ? `SN${task.moNumber.replace('MO', '')}` : `LOT-PROD-${id.substring(0, 6)}`);
          
        // Przygotuj dodatkowe informacje o pochodzeniu produktu
        const sourceInfo = new URLSearchParams();
        sourceInfo.append('poNumber', `PROD-${id.substring(0, 6)}`);
        sourceInfo.append('quantity', task.quantity);
        sourceInfo.append('unitPrice', unitPrice);
        sourceInfo.append('reason', 'production');
        sourceInfo.append('lotNumber', lotNumber);
        sourceInfo.append('source', 'production');
        sourceInfo.append('sourceId', id);
        
        // Dodaj datƒô wa≈ºno≈õci, je≈õli zosta≈Ça zdefiniowana w zadaniu
        if (task.expiryDate) {
          // Konwertuj r√≥≈ºne formaty daty do ISO string
          let expiryDateStr;
          if (task.expiryDate instanceof Date) {
            expiryDateStr = task.expiryDate.toISOString();
          } else if (task.expiryDate.toDate && typeof task.expiryDate.toDate === 'function') {
            // Firebase Timestamp
            expiryDateStr = task.expiryDate.toDate().toISOString();
          } else if (task.expiryDate.seconds) {
            // Timestamp z sekundami
            expiryDateStr = new Date(task.expiryDate.seconds * 1000).toISOString();
          } else if (typeof task.expiryDate === 'string') {
            // String z datƒÖ - upewnij siƒô, ≈ºe to poprawny format ISO
            try {
              expiryDateStr = new Date(task.expiryDate).toISOString();
            } catch (e) {
              console.error('B≈ÇƒÖd podczas konwersji daty wa≈ºno≈õci:', e);
            }
          }
          
          if (expiryDateStr) {
            sourceInfo.append('expiryDate', expiryDateStr);
          }
        }
        
        // Dodaj informacje o MO i CO
        if (task.moNumber) {
          sourceInfo.append('moNumber', task.moNumber);
        }
        
        if (task.orderNumber) {
          sourceInfo.append('orderNumber', task.orderNumber);
        }
        
        if (task.orderId) {
          sourceInfo.append('orderId', task.orderId);
        }
        
        // Przygotuj opis dla partii
        let notes = `Partia z zadania produkcyjnego: ${task.name || ''}`;
        if (task.moNumber) {
          notes += ` (MO: ${task.moNumber})`;
        }
        if (task.orderNumber) {
          notes += ` (CO: ${task.orderNumber})`;
        }
        sourceInfo.append('notes', notes);
        
        console.log('Przekazujƒô parametry do formularza przyjƒôcia:', Object.fromEntries(sourceInfo));
        
        navigate(`/inventory/${inventoryProductId}/receive?${sourceInfo.toString()}`);
      } else {
        // Je≈õli nie ma powiƒÖzanej pozycji magazynowej, u≈ºyj standardowej funkcji
        await addTaskProductToInventory(id, currentUser.uid);
        
        setAlert({
          open: true,
          severity: 'success',
          message: 'Produkt zosta≈Ç pomy≈õlnie dodany do magazynu jako partia'
        });
        
        // Od≈õwie≈º dane zadania
        const updatedTask = await getTaskById(id);
        setTask(updatedTask);
      }
    } catch (error) {
      console.error('B≈ÇƒÖd podczas dodawania produktu do magazynu:', error);
      setAlert({
        open: true,
        severity: 'error',
        message: `B≈ÇƒÖd podczas dodawania produktu do magazynu: ${error.message}`
      });
    } finally {
      setLoading(false);
    }
  };

  // Funkcja obs≈ÇugujƒÖca dodanie produktu do magazynu
  const handleAddToInventory = () => {
    handleReceiveClick();
  };

  const handleStartProduction = async () => {
    try {
      // Sprawd≈∫ czy zadanie ma ju≈º ustawionƒÖ datƒô wa≈ºno≈õci
      if (!task?.expiryDate) {
        // Otw√≥rz dialog do ustawienia daty wa≈ºno≈õci
        setStartProductionData({
          expiryDate: null
        });
        setStartProductionDialogOpen(true);
        return;
      }
      
      // Je≈õli ma datƒô wa≈ºno≈õci, rozpocznij produkcjƒô
      const result = await startProduction(id, currentUser.uid);
      
      // Wy≈õwietl komunikat na podstawie wyniku tworzenia partii
      if (result.batchResult) {
        if (result.batchResult.message === 'Partia ju≈º istnieje') {
          showSuccess('Produkcja wznowiona - u≈ºywa istniejƒÖcƒÖ partiƒô produktu');
        } else if (result.batchResult.isNewBatch === false) {
          showSuccess('Produkcja wznowiona - dodano do istniejƒÖcej partii produktu');
        } else {
          showSuccess('Produkcja rozpoczƒôta - utworzono nowƒÖ pustƒÖ partiƒô produktu');
        }
      } else {
        showSuccess('Produkcja rozpoczƒôta');
      }
      
      const updatedTask = await getTaskById(id);
      setTask(updatedTask);
    } catch (error) {
      showError('B≈ÇƒÖd podczas rozpoczynania produkcji: ' + error.message);
    }
  };

  // Funkcja obs≈ÇugujƒÖca start produkcji z datƒÖ wa≈ºno≈õci
  const handleStartProductionWithExpiry = async () => {
    try {
      if (!startProductionData.expiryDate) {
        setStartProductionError('Podaj datƒô wa≈ºno≈õci gotowego produktu');
        return;
      }

      setStartProductionError(null);
      
      // Rozpocznij produkcjƒô z datƒÖ wa≈ºno≈õci
      const result = await startProduction(id, currentUser.uid, startProductionData.expiryDate);
      
      // Wy≈õwietl komunikat na podstawie wyniku tworzenia partii
      if (result.batchResult) {
        if (result.batchResult.message === 'Partia ju≈º istnieje') {
          showSuccess('Produkcja wznowiona - u≈ºywa istniejƒÖcƒÖ partiƒô produktu');
        } else if (result.batchResult.isNewBatch === false) {
          showSuccess('Produkcja wznowiona - dodano do istniejƒÖcej partii produktu');
        } else {
          showSuccess('Produkcja rozpoczƒôta - utworzono nowƒÖ pustƒÖ partiƒô produktu');
        }
      } else {
        showSuccess('Produkcja rozpoczƒôta');
      }
      
      // Zamknij dialog
      setStartProductionDialogOpen(false);
      setStartProductionData({
        expiryDate: null
      });
      
      // Od≈õwie≈º dane zadania
      const updatedTask = await getTaskById(id);
      setTask(updatedTask);
    } catch (error) {
      setStartProductionError('B≈ÇƒÖd podczas rozpoczynania produkcji: ' + error.message);
      console.error('Error starting production:', error);
    }
  };

  const handleStopProduction = async () => {
    if (!productionData.completedQuantity) {
      showError('Podaj ilo≈õƒá wyprodukowanƒÖ');
      return;
    }
    
    const quantity = parseFloat(productionData.completedQuantity);
    
    if (isNaN(quantity) || quantity <= 0) {
      showError('Ilo≈õƒá wyprodukowana musi byƒá liczbƒÖ wiƒôkszƒÖ od zera');
      return;
    }
    
    setLoading(true);
    
    try {
      const result = await stopProduction(
        id, 
        quantity, 
        productionData.timeSpent || 0,
        currentUser.uid,
        // Przeka≈º informacje o czasie
        {
          startTime: productionData.startTime.toISOString(),
          endTime: productionData.endTime.toISOString()
        }
      );
      
      setStopProductionDialogOpen(false);
      
      if (result.isCompleted) {
        showSuccess('Zadanie zosta≈Ço zako≈Ñczone');
        showInfo('Rezerwacje materia≈Ç√≥w pozostajƒÖ aktywne do momentu potwierdzenia zu≈ºycia materia≈Ç√≥w. Przejd≈∫ do zak≈Çadki "Zu≈ºycie materia≈Ç√≥w", aby je potwierdziƒá.');
      } else {
        showSuccess('Produkcja zosta≈Ça wstrzymana');
      }
      
      fetchTask(); // Od≈õwie≈º dane zadania
    } catch (error) {
      console.error('Error stopping production:', error);
      showError('B≈ÇƒÖd podczas zatrzymywania produkcji: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ SUPER OPTYMALIZACJA: Nowa funkcja do grupowego pobierania partii dla materia≈Ç√≥w
  const fetchBatchesForMaterialsOptimized = async () => {
    try {
      setMaterialBatchesLoading(true);
      if (!task || !task.materials) return;
      
      const batchesData = {};
      const initialSelectedBatches = {};
      
      // KROK 1: Pobierz wszystkie magazyny na poczƒÖtku (ju≈º zoptymalizowane)
      const { getAllWarehouses, getBatchesForMultipleItems, getReservationsForMultipleBatches } = await import('../../services/inventory');
      const allWarehouses = await getAllWarehouses();
      // Stw√≥rz mapƒô magazyn√≥w dla szybkiego dostƒôpu po ID
      const warehousesMap = {};
      allWarehouses.forEach(warehouse => {
        warehousesMap[warehouse.id] = warehouse.name;
      });
      
      // KROK 2: ‚úÖ SUPER OPTYMALIZACJA - Grupowe pobieranie partii dla wszystkich materia≈Ç√≥w JEDNOCZE≈öNIE
      const materialIds = task.materials
        .map(material => material.inventoryItemId || material.id)
        .filter(Boolean);
      
      if (materialIds.length === 0) {
        setBatches(batchesData);
        setSelectedBatches(initialSelectedBatches);
        return;
      }
      
      // POJEDYNCZE GRUPOWE ZAPYTANIE dla wszystkich partii materia≈Ç√≥w
      const materialBatchesMap = await getBatchesForMultipleItems(materialIds);
      
      // Zbierz wszystkie ID partii dla grupowego pobierania rezerwacji
      const allBatchIds = [];
      Object.values(materialBatchesMap).forEach(batches => {
        batches.forEach(batch => {
          if (batch.id && !allBatchIds.includes(batch.id)) {
            allBatchIds.push(batch.id);
          }
        });
      });
      

      
      // KROK 3: ‚úÖ SUPER OPTYMALIZACJA - Grupowe pobieranie rezerwacji dla wszystkich partii JEDNOCZE≈öNIE
      let allBatchReservationsMap = {};
      
      if (allBatchIds.length > 0) {
        // POJEDYNCZE GRUPOWE ZAPYTANIE dla wszystkich rezerwacji partii
        allBatchReservationsMap = await getReservationsForMultipleBatches(allBatchIds);
        

      }
      
      // KROK 4: Przetw√≥rz dane i stw√≥rz finalne struktury
      for (const material of task.materials) {
        const materialId = material.inventoryItemId || material.id;
        if (!materialId) continue;
        
        const batches = materialBatchesMap[materialId] || [];
        
        if (batches.length > 0) {
          // Dla ka≈ºdej partii wzbogaƒá o informacje o rezerwacjach i magazynie
          const batchesWithReservations = batches.map((batch) => {
            const reservations = allBatchReservationsMap[batch.id] || [];
            
            // Oblicz ilo≈õƒá zarezerwowanƒÖ przez inne zadania (z wy≈ÇƒÖczeniem bie≈ºƒÖcego)
            const reservedByOthers = reservations.reduce((sum, reservation) => {
              if (reservation.taskId === id) return sum; // Pomi≈Ñ rezerwacje bie≈ºƒÖcego zadania
              return sum + (reservation.quantity || 0);
            }, 0);
            
            // Oblicz faktycznie dostƒôpnƒÖ ilo≈õƒá po uwzglƒôdnieniu rezerwacji
            const effectiveQuantity = Math.max(0, batch.quantity - reservedByOthers);
            
            // Przygotuj informacje o magazynie z prawid≈ÇowƒÖ nazwƒÖ
            let warehouseInfo = {
              id: 'main',
              name: 'Magazyn g≈Ç√≥wny'
            };
            
            if (batch.warehouseId) {
              // Pobierz nazwƒô magazynu z naszej mapy
              const warehouseName = warehousesMap[batch.warehouseId];
              warehouseInfo = {
                id: batch.warehouseId,
                name: warehouseName || `Magazyn ${batch.warehouseId.substring(0, 6)}`
              };
            }
            
            return {
              ...batch,
              reservedByOthers,
              effectiveQuantity,
              warehouseInfo
            };
          });
          
          batchesData[materialId] = batchesWithReservations;
          initialSelectedBatches[materialId] = [];
          
          // Sprawd≈∫ czy materia≈Ç ma ju≈º zarezerwowane partie w zadaniu
          const reservedBatches = task.materialBatches && task.materialBatches[materialId] 
            ? task.materialBatches[materialId] 
            : [];
          
          if (reservedBatches.length > 0) {
            // Dla ka≈ºdej zarezerwowanej partii
            for (const reservedBatch of reservedBatches) {
              // Znajd≈∫ odpowiadajƒÖcƒÖ partiƒô w dostƒôpnych partiach
              const matchingBatch = batchesWithReservations.find(b => b.id === reservedBatch.batchId);
              
              if (matchingBatch) {
                // Dodaj zarezerwowanƒÖ partiƒô do wybranych partii
                initialSelectedBatches[materialId].push({
                  batchId: reservedBatch.batchId,
                  quantity: reservedBatch.quantity,
                  batchNumber: reservedBatch.batchNumber || matchingBatch.batchNumber || matchingBatch.lotNumber || 'Bez numeru'
                });
              }
            }
          }
        } else {
          batchesData[materialId] = [];
          initialSelectedBatches[materialId] = [];
        }
      }
      
      setBatches(batchesData);
      setSelectedBatches(initialSelectedBatches);
      

      
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania partii dla materia≈Ç√≥w:', error);
      showError('Nie uda≈Ço siƒô pobraƒá informacji o partiach materia≈Ç√≥w');
    } finally {
      setMaterialBatchesLoading(false);
    }
  };

  // Zachowujemy starƒÖ funkcjƒô dla kompatybilno≈õci wstecznej
  const fetchBatchesForMaterials = async () => {
    // Przekierowanie do nowej zoptymalizowanej funkcji
    await fetchBatchesForMaterialsOptimized();
  };
  
  // Obs≈Çuga zmiany metody rezerwacji
  const handleReservationMethodChange = (e) => {
    const newMethod = e.target.value;
    setReservationMethod(newMethod);
    
    // Je≈õli wybrano rƒôcznƒÖ metodƒô, pobierz partie
    if (newMethod === 'manual') {
      if (Object.keys(batches).length === 0) {
        fetchBatchesForMaterials();
      }
      // Zawsze pobieraj oczekiwane zam√≥wienia przy wyborze rƒôcznej metody
      fetchAwaitingOrdersForMaterials();
      setManualBatchSelectionActive(true);
    } else {
      setManualBatchSelectionActive(false);
    }
  };
  
  // Obs≈Çuga zmiany wybranej partii
  const handleBatchSelection = (materialId, batchId, quantity) => {
    // Upewnij siƒô, ≈ºe quantity jest liczbƒÖ
    const numericQuantity = parseFloat(quantity) || 0;
    
    setSelectedBatches(prev => {
      const materialBatches = [...(prev[materialId] || [])];
      const existingBatchIndex = materialBatches.findIndex(b => b.batchId === batchId);
      
      if (existingBatchIndex >= 0) {
        // Aktualizuj istniejƒÖcƒÖ partiƒô
        if (numericQuantity < 0) {
          // Usu≈Ñ partiƒô tylko je≈õli ilo≈õƒá jest ujemna (nie gdy jest 0)
          materialBatches.splice(existingBatchIndex, 1);
        } else {
          // Zachowaj partiƒô nawet z quantity = 0 dla dalszej obr√≥bki (usuniƒôcie rezerwacji)
          materialBatches[existingBatchIndex].quantity = numericQuantity;
        }
      } else if (numericQuantity >= 0) {
        // Dodaj nowƒÖ partiƒô
        const batch = batches[materialId].find(b => b.id === batchId);
        if (batch) {
          materialBatches.push({
            batchId: batchId,
            quantity: numericQuantity,
            batchNumber: batch.batchNumber || batch.lotNumber || 'Bez numeru'
          });
        }
      }
      
      return {
        ...prev,
        [materialId]: materialBatches
      };
    });
  };
  
  // Walidacja rƒôcznego wyboru partii
  const validateManualBatchSelection = () => {
    if (!task || !task.materials) return { valid: false, error: "Brak materia≈Ç√≥w do walidacji" };
    
    for (const material of task.materials) {
      const materialId = material.inventoryItemId || material.id;
      if (!materialId) continue;
      
      // U≈ºyj funkcji uwzglƒôdniajƒÖcej konsumpcjƒô
      const requiredQuantity = getRequiredQuantityForReservation(material, materialId);
      
      // POPRAWKA: Pomi≈Ñ walidacjƒô tylko gdy konsumpcja zosta≈Ça potwierdzona i nie ma wymaganej ilo≈õci
      if (task.materialConsumptionConfirmed && requiredQuantity <= 0) {
        continue;
      }
      
      const materialBatches = selectedBatches[materialId] || [];
      const totalSelectedQuantity = materialBatches.reduce((sum, batch) => sum + parseFloat(batch.quantity || 0), 0);
      
      // Usu≈Ñ walidacjƒô wymagajƒÖcƒÖ pe≈Çnej ilo≈õci - umo≈ºliw rezerwacjƒô mniejszej ilo≈õci
      // if (totalSelectedQuantity < requiredQuantity) {
      //   return { 
      //     valid: false, 
      //     error: `NiewystarczajƒÖca ilo≈õƒá partii wybrana dla materia≈Çu ${material.name}. Wybrano: ${totalSelectedQuantity}, wymagane: ${requiredQuantity}`
      //   };
      // }
    }
    
    return { valid: true };
  };
  
  // Podobnie zmodyfikujemy funkcjƒô validateManualBatchSelectionForMaterial
  const validateManualBatchSelectionForMaterial = (materialId) => {
    const materialBatches = selectedBatches[materialId] || [];
    const material = task.materials.find(m => (m.inventoryItemId || m.id) === materialId);
    
    if (!material) {
      return { valid: false, error: `Nie znaleziono materia≈Çu dla ID: ${materialId}. Sprawd≈∫ czy materia≈Ç istnieje w zadaniu.` };
    }
    
    // U≈ºyj funkcji uwzglƒôdniajƒÖcej konsumpcjƒô
    const requiredQuantity = getRequiredQuantityForReservation(material, materialId);
    
    // POPRAWKA: Je≈õli konsumpcja zosta≈Ça potwierdzona i wymagana ilo≈õƒá jest 0, uznaj walidacjƒô za poprawnƒÖ
    if (task.materialConsumptionConfirmed && requiredQuantity <= 0) {
      return { valid: true };
    }
    
    const totalSelectedQuantity = materialBatches.reduce((sum, batch) => sum + parseFloat(batch.quantity || 0), 0);
    
    // Pozw√≥l na rezerwacjƒô zerowej ilo≈õci - u≈ºytkownik mo≈ºe nie chcieƒá rezerwowaƒá tego materia≈Çu teraz
    // if (totalSelectedQuantity === 0) {
    //   return { valid: false, error: `Nie wybrano ≈ºadnych partii dla materia≈Çu ${material.name}` };
    // }
    
    // Usu≈Ñ walidacjƒô wymagajƒÖcƒÖ pe≈Çnej ilo≈õci - umo≈ºliw rezerwacjƒô mniejszej ilo≈õci
    // if (totalSelectedQuantity < requiredQuantity) {
    //   return {
    //     valid: false,
    //     error: `Wybrana ilo≈õƒá (${totalSelectedQuantity}) jest mniejsza ni≈º wymagana (${requiredQuantity}) dla materia≈Çu ${material.name}` 
    //   };
    // }
    
    return { valid: true };
  };

  // Funkcja pomocnicza do obliczania wymaganej ilo≈õci do rezerwacji (po uwzglƒôdnieniu konsumpcji)
  const getRequiredQuantityForReservation = (material, materialId) => {
    const baseQuantity = materialQuantities[materialId] !== undefined 
      ? materialQuantities[materialId] 
      : material.quantity;
    
    const consumedQuantity = getConsumedQuantityForMaterial(task.consumedMaterials, materialId);
    
    // POPRAWKA: Nie blokuj rezerwacji gdy materia≈Ç jest w pe≈Çni skonsumowany
    // Pozw√≥l na rezerwacjƒô dodatkowej ilo≈õci - zwr√≥ƒá zawsze przynajmniej bazowƒÖ ilo≈õƒá
    // je≈õli nie ma jeszcze formalnego potwierdzenia konsumpcji
    if (!task.materialConsumptionConfirmed) {
      // Je≈õli konsumpcja nie zosta≈Ça potwierdzona, pozw√≥l na rezerwacjƒô bazowej ilo≈õci
      return baseQuantity;
    } else {
      // Je≈õli konsumpcja zosta≈Ça potwierdzona, oblicz pozosta≈ÇƒÖ ilo≈õƒá
      const remainingQuantity = Math.max(0, baseQuantity - consumedQuantity);
      return remainingQuantity;
    }
  };

  // Funkcja do usuwania pojedynczej rezerwacji partii
  const handleDeleteSingleReservation = async (materialId, batchId, batchNumber) => {
    try {
      setLoading(true);
      
      console.log('handleDeleteSingleReservation wywo≈Çane z:', { materialId, batchId, batchNumber, taskId: task.id });
      
      // Importuj potrzebne funkcje
      const { deleteReservation } = await import('../../services/inventory');
      const { collection, query, where, getDocs } = await import('firebase/firestore');
      const { db } = await import('../../services/firebase/config');
      
      // Szukaj rezerwacji bezpo≈õrednio (podobnie jak w handleQuantityChange)
      const transactionsRef = collection(db, 'inventoryTransactions');
      
      // ‚úÖ OPTYMALIZACJA: Dodaj limit(1) - potrzebujemy tylko jednej rezerwacji
      // Pierwsza pr√≥ba - po referenceId
      let reservationQuery = query(
        transactionsRef,
        where('type', '==', 'booking'),
        where('referenceId', '==', task.id),
        where('itemId', '==', materialId),
        where('batchId', '==', batchId),
        limit(1) // Dodany limit - potrzebujemy tylko jednej rezerwacji
      );
      
      let reservationSnapshot = await getDocs(reservationQuery);
      
      // Je≈õli nie znaleziono, spr√≥buj po taskId
      if (reservationSnapshot.empty) {
        console.log('Nie znaleziono po referenceId, pr√≥bujƒô po taskId...');
        reservationQuery = query(
          transactionsRef,
          where('type', '==', 'booking'),
          where('taskId', '==', task.id),
          where('itemId', '==', materialId),
          where('batchId', '==', batchId),
          limit(1) // Dodany limit - potrzebujemy tylko jednej rezerwacji
        );
        
        reservationSnapshot = await getDocs(reservationQuery);
      }
      
      if (reservationSnapshot.empty) {
        console.log('Brak rezerwacji w bazie danych, pr√≥bujƒô usunƒÖƒá bezpo≈õrednio z task.materialBatches...');
        
        // Je≈õli nie ma w bazie, usu≈Ñ bezpo≈õrednio z struktury zadania
        if (task.materialBatches && task.materialBatches[materialId]) {
          const updatedMaterialBatches = { ...task.materialBatches };
          
          // Usu≈Ñ partiƒô z listy
          updatedMaterialBatches[materialId] = updatedMaterialBatches[materialId].filter(
            batch => batch.batchId !== batchId
          );
          
          // Je≈õli nie zosta≈Çy ≈ºadne partie dla tego materia≈Çu, usu≈Ñ ca≈Çy klucz
          if (updatedMaterialBatches[materialId].length === 0) {
            delete updatedMaterialBatches[materialId];
          }
          
          // Sprawd≈∫, czy zosta≈Çy jakiekolwiek zarezerwowane materia≈Çy
          const hasAnyReservations = Object.keys(updatedMaterialBatches).length > 0;
          
          // Aktualizuj zadanie produkcyjne
          const { updateDoc, doc, serverTimestamp } = await import('firebase/firestore');
          const taskRef = doc(db, 'productionTasks', task.id);
          
          await updateDoc(taskRef, {
            materialBatches: updatedMaterialBatches,
            materialsReserved: hasAnyReservations,
            updatedAt: serverTimestamp(),
            updatedBy: currentUser.uid
          });
          
          // Od≈õwie≈º dane zadania
          await fetchAllTaskData();
          
          showSuccess(`Usuniƒôto rezerwacjƒô partii ${batchNumber} (bezpo≈õrednia aktualizacja zadania)`);
          return;
        } else {
          showError('Nie znaleziono rezerwacji do usuniƒôcia');
          return;
        }
      }
      
      // Je≈õli znaleziono rezerwacjƒô w bazie danych
      const reservationDoc = reservationSnapshot.docs[0];
      console.log('Znaleziono rezerwacjƒô:', reservationDoc.id, reservationDoc.data());
      
      // Usu≈Ñ rezerwacjƒô
      await deleteReservation(reservationDoc.id, currentUser.uid);
      
      // Od≈õwie≈º dane zadania
      await fetchAllTaskData();
      
      showSuccess(`Usuniƒôto rezerwacjƒô partii ${batchNumber}`);
      
    } catch (error) {
      console.error('B≈ÇƒÖd podczas usuwania pojedynczej rezerwacji:', error);
      showError('B≈ÇƒÖd podczas usuwania rezerwacji: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // Zmodyfikowana funkcja do rezerwacji materia≈Ç√≥w z obs≈ÇugƒÖ rƒôcznego wyboru partii
  const handleReserveMaterials = async (singleMaterialId = null) => {
    // Sprawd≈∫ czy pierwszy argument to event object (gdy klikniƒôty jest przycisk bez argument√≥w)
    if (singleMaterialId && typeof singleMaterialId === 'object' && singleMaterialId.target) {
      singleMaterialId = null; // Reset do null je≈õli to event object
    }
    try {
      setReservingMaterials(true);
      
      // Funkcja pomocnicza do anulowania istniejƒÖcych rezerwacji dla materia≈Çu
      const cancelExistingReservations = async (materialId) => {
        if (task.materialBatches && task.materialBatches[materialId] && task.materialBatches[materialId].length > 0) {
          try {
            // Importuj funkcjƒô do czyszczenia rezerwacji dla zadania
            const { cleanupTaskReservations } = await import('../../services/inventory');
            console.log(`Usuwanie istniejƒÖcych rezerwacji dla materia≈Çu ${materialId} w zadaniu ${id}`);
            await cleanupTaskReservations(id, [materialId]);
          } catch (error) {
            console.error(`B≈ÇƒÖd podczas anulowania istniejƒÖcych rezerwacji dla ${materialId}:`, error);
            throw error;
          }
        }
      };
      
      // Dla rƒôcznej rezerwacji
      if (reservationMethod === 'manual') {
        // Walidacja tylko dla pojedynczego materia≈Çu lub dla wszystkich materia≈Ç√≥w
        let validationResult;
        if (singleMaterialId) {
          // Sprawd≈∫ czy materia≈Ç istnieje przed walidacjƒÖ
          const materialExists = task.materials.some(m => (m.inventoryItemId || m.id) === singleMaterialId);
          if (!materialExists) {
            showError(`Materia≈Ç o ID ${singleMaterialId} nie zosta≈Ç znaleziony w zadaniu`);
            return;
          }
          validationResult = validateManualBatchSelectionForMaterial(singleMaterialId);
        } else {
          validationResult = validateManualBatchSelection();
        }
          
        if (!validationResult.valid) {
          showError(validationResult.error);
          return;
        }
      
        // Wybierz materia≈Çy do rezerwacji - jeden okre≈õlony lub wszystkie
        const materialsToReserve = singleMaterialId
          ? task.materials.filter(m => (m.inventoryItemId || m.id) === singleMaterialId)
          : task.materials;
        
        // Dla ka≈ºdego materia≈Çu
        for (const material of materialsToReserve) {
          const materialId = material.inventoryItemId || material.id;
          if (!materialId) continue;
          
          // Sprawd≈∫ czy sƒÖ partie z quantity = 0 (oznaczajƒÖce usuniƒôcie)
          const selectedMaterialBatches = selectedBatches[materialId] || [];
          const hasZeroQuantityBatches = selectedMaterialBatches.some(batch => batch.quantity === 0);
          
          // Anuluj istniejƒÖce rezerwacje tylko je≈õli nie ma partii z quantity = 0
          // (bo w przeciwnym razie bookInventoryForTask sam obs≈Çu≈ºy aktualizacjƒô/usuniƒôcie)
          if (!hasZeroQuantityBatches) {
            await cancelExistingReservations(materialId);
          } else {
            console.log(`Pomijam anulowanie rezerwacji dla materia≈Çu ${materialId} - zawiera partie do usuniƒôcia (quantity=0)`);
          }
          
          // Oblicz wymaganƒÖ ilo≈õƒá do rezerwacji uwzglƒôdniajƒÖc skonsumowane materia≈Çy
          const requiredQuantity = getRequiredQuantityForReservation(material, materialId);
          
          // POPRAWKA: Blokuj rezerwacjƒô tylko gdy konsumpcja zosta≈Ça potwierdzona i nie ma pozosta≈Çej ilo≈õci
          if (task.materialConsumptionConfirmed && requiredQuantity <= 0) {
            console.log(`Materia≈Ç ${material.name} zosta≈Ç ju≈º w pe≈Çni skonsumowany i potwierdzony, pomijam rezerwacjƒô`);
            continue;
          }
            
          // Dla ka≈ºdej wybranej partii wykonaj rezerwacjƒô (lub usu≈Ñ je≈õli quantity = 0)
          for (const batch of selectedMaterialBatches) {
            // Nie pomijamy partii z quantity = 0, bo mo≈ºe to oznaczaƒá usuniƒôcie rezerwacji
            
            // Utw√≥rz/zaktualizuj/usu≈Ñ rezerwacjƒô dla konkretnej partii
            console.log('üîÑ [TASK] Wywo≈Çanie bookInventoryForTask:', { materialId, quantity: batch.quantity, taskId: id, batchId: batch.batchId });
            const result = await bookInventoryForTask(
              materialId,
              batch.quantity,
              id, // ID zadania
              currentUser.uid,
              'manual', // Metoda rƒôczna
              batch.batchId // ID konkretnej partii
            );
            console.log('‚úÖ [TASK] Rezultat bookInventoryForTask:', result);
          }
        }
        
        showSuccess(`Materia≈Çy zosta≈Çy zarezerwowane dla zadania ${task.moNumber || task.id}`);
      }
      // Dla automatycznej rezerwacji
      else {
        const materialsToReserve = singleMaterialId
          ? task.materials.filter(m => (m.inventoryItemId || m.id) === singleMaterialId)
          : task.materials;
          
        // Dla ka≈ºdego materia≈Çu
        for (const material of materialsToReserve) {
          const materialId = material.inventoryItemId || material.id;
          if (!materialId) continue;
          
          // Najpierw anuluj istniejƒÖce rezerwacje dla tego materia≈Çu
          await cancelExistingReservations(materialId);
              
          // Oblicz wymaganƒÖ ilo≈õƒá do rezerwacji uwzglƒôdniajƒÖc skonsumowane materia≈Çy
          const requiredQuantity = getRequiredQuantityForReservation(material, materialId);
          
          // POPRAWKA: Blokuj automatycznƒÖ rezerwacjƒô tylko gdy konsumpcja zosta≈Ça potwierdzona
          if (task.materialConsumptionConfirmed && requiredQuantity <= 0) {
            console.log(`Materia≈Ç ${material.name} zosta≈Ç ju≈º w pe≈Çni skonsumowany i potwierdzony, pomijam automatycznƒÖ rezerwacjƒô`);
            continue;
          }
          
          // Utw√≥rz rezerwacjƒô automatycznƒÖ
          await bookInventoryForTask(
            materialId,
            requiredQuantity,
            id, // ID zadania
            currentUser.uid,
            'fifo' // Metoda FIFO
          );
        }
        
        showSuccess(`Materia≈Çy zosta≈Çy automatycznie zarezerwowane dla zadania ${task.moNumber || task.id}`);
      }
        
      // Zamknij dialog tylko je≈õli rezerwujemy wszystkie materia≈Çy
      if (!singleMaterialId) {
        setReserveDialogOpen(false);
      }
      
      // Od≈õwie≈º dane zadania
      console.log("Pobieranie zaktualizowanych danych zadania po rezerwacji");
      const updatedTask = await getTaskById(id);
      console.log("Zaktualizowane dane zadania:", updatedTask);
      setTask(updatedTask);
      
    } catch (error) {
      console.error('B≈ÇƒÖd podczas rezerwacji materia≈Ç√≥w:', error);
      showError('Nie uda≈Ço siƒô zarezerwowaƒá materia≈Ç√≥w: ' + error.message);
    } finally {
      setReservingMaterials(false);
    }
  };
  
  // Renderowanie komponentu do rƒôcznego wyboru partii
  const renderManualBatchSelection = () => {
    if (materialBatchesLoading) {
      return (
        <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
          <CircularProgress />
        </Box>
      );
    }

    return (
      <Box sx={{ mt: 2 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
          <Typography variant="subtitle1">
            Wybierz partie dla ka≈ºdego materia≈Çu:
          </Typography>
          <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
            <FormControlLabel
              control={
                <Checkbox
                  checked={showExhaustedBatches}
                  onChange={(e) => setShowExhaustedBatches(e.target.checked)}
                  size="small"
                />
              }
              label="Poka≈º wyczerpane partie"
              sx={{ fontSize: '0.875rem' }}
            />
            <Button
              variant="outlined"
              size="small"
              startIcon={<RefreshIcon />}
              onClick={fetchBatchesForMaterialsOptimized}
              disabled={materialBatchesLoading}
              sx={{ minWidth: 'auto' }}
            >
              Od≈õwie≈º partie
            </Button>
          </Box>
        </Box>
        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
          üí° Mo≈ºesz zarezerwowaƒá mniejszƒÖ ilo≈õƒá ni≈º wymagana. Niezarezerwowane materia≈Çy mo≈ºna uzupe≈Çniƒá p√≥≈∫niej.
        </Typography>
        
        {task.materials.map((material) => {
          const materialId = material.inventoryItemId || material.id;
          if (!materialId) return null;
          
          // Oblicz wymaganƒÖ ilo≈õƒá do rezerwacji uwzglƒôdniajƒÖc skonsumowane materia≈Çy
          const baseQuantity = materialQuantities[materialId] !== undefined 
            ? materialQuantities[materialId] 
            : material.quantity;
          const consumedQuantity = getConsumedQuantityForMaterial(task.consumedMaterials, materialId);
          const requiredQuantity = getRequiredQuantityForReservation(material, materialId);
          
          let materialBatches = batches[materialId] || [];
          
          // NOWE: Filtruj wyczerpane partie je≈õli opcja jest wy≈ÇƒÖczona
          if (!showExhaustedBatches) {
            materialBatches = materialBatches.filter(batch => {
              const effectiveQuantity = batch.effectiveQuantity || 0;
              const isReservedForTask = task.materialBatches && 
                                       task.materialBatches[materialId] && 
                                       task.materialBatches[materialId].some(b => b.batchId === batch.id);
              
              // Poka≈º partiƒô je≈õli:
              // 1. Ma dostƒôpnƒÖ ilo≈õƒá (effectiveQuantity > 0), LUB
              // 2. Jest ju≈º zarezerwowana dla tego zadania
              return effectiveQuantity > 0 || isReservedForTask;
            });
          }
          
          const selectedMaterialBatches = selectedBatches[materialId] || [];
          const totalSelectedQuantity = selectedMaterialBatches.reduce((sum, batch) => sum + parseFloat(batch.quantity || 0), 0);
          // Umo≈ºliwi rezerwacjƒô czƒô≈õciowƒÖ - przycisk bƒôdzie aktywny nawet gdy nie wszystko jest zarezerwowane
          const isComplete = true; // Zawsze pozw√≥l na rezerwacjƒô (u≈ºytkownik mo≈ºe zarezerwowaƒá mniej ni≈º wymagane)
          
          // Sprawd≈∫, czy materia≈Ç jest ju≈º zarezerwowany
          const isAlreadyReserved = task.materialBatches && task.materialBatches[materialId] && task.materialBatches[materialId].length > 0;
          
          // Sortuj partie: najpierw zarezerwowane dla zadania, potem wg daty wa≈ºno≈õci
          materialBatches = [...materialBatches].sort((a, b) => {
            // Sprawd≈∫, czy partie sƒÖ zarezerwowane dla tego zadania
            const aIsReserved = task.materialBatches && 
                               task.materialBatches[materialId] && 
                               task.materialBatches[materialId].some(batch => batch.batchId === a.id);
            const bIsReserved = task.materialBatches && 
                               task.materialBatches[materialId] && 
                               task.materialBatches[materialId].some(batch => batch.batchId === b.id);
            
            // Je≈õli obie partie sƒÖ zarezerwowane lub obie nie sƒÖ, sortuj wed≈Çug daty wa≈ºno≈õci
            if (aIsReserved === bIsReserved) {
              // Sortuj wed≈Çug daty wa≈ºno≈õci (najkr√≥tszej najpierw)
              if (!a.expiryDate && !b.expiryDate) return 0;
              if (!a.expiryDate) return 1; // Partia bez daty wa≈ºno≈õci na ko≈Ñcu
              if (!b.expiryDate) return -1; // Partia bez daty wa≈ºno≈õci na ko≈Ñcu
              return new Date(a.expiryDate) - new Date(b.expiryDate);
            }
            
            // Partie zarezerwowane na poczƒÖtku
            return aIsReserved ? -1 : 1;
          });
          
          return (
            <Accordion 
              key={materialId}
              expanded={expandedMaterial === materialId}
              onChange={() => setExpandedMaterial(expandedMaterial === materialId ? null : materialId)}
            >
              <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', width: '100%', alignItems: 'center' }}>
                  <Box>
                  <Typography>{material.name}</Typography>
                    {consumedQuantity > 0 && (
                      <Typography variant="caption" color="text.secondary" display="block">
                        Skonsumowano: {consumedQuantity.toFixed(3)} {material.unit} z {baseQuantity.toFixed(3)} {material.unit}
                      </Typography>
                    )}
                  </Box>
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    <Chip
                      label={`${totalSelectedQuantity.toFixed(3)} / ${parseFloat(requiredQuantity).toFixed(3)} ${material.unit}`}
                      color={isComplete ? "success" : requiredQuantity > 0 ? "warning" : "default"}
                      size="small"
                      sx={{ mr: 1 }}
                    />
                    {requiredQuantity <= 0 && task.materialConsumptionConfirmed && (
                      <Chip
                        label="W pe≈Çni skonsumowany"
                        color="success"
                        size="small"
                        sx={{ mr: 1 }}
                      />
                    )}
                    {totalSelectedQuantity > 0 && totalSelectedQuantity < requiredQuantity && requiredQuantity > 0 && (
                      <Chip
                        label="Czƒô≈õciowa rezerwacja"
                        color="warning"
                        size="small"
                        sx={{ mr: 1 }}
                        variant="outlined"
                      />
                    )}
                    {isAlreadyReserved && (
                      <Chip
                        label="Zarezerwowany"
                        color="primary"
                        size="small"
                        sx={{ mr: 1 }}
                      />
                    )}
                  </Box>
                </Box>
              </AccordionSummary>
              <AccordionDetails>
                {materialBatches.length === 0 ? (
                  <Typography color="error">
                    Brak dostƒôpnych partii dla tego materia≈Çu
                  </Typography>
                ) : (
                  <>
                    <Typography variant="subtitle2" gutterBottom>Partie magazynowe:</Typography>
                    <TableContainer>
                      <Table size="small">
                        <TableHead>
                          <TableRow>
                            <TableCell>Nr partii</TableCell>
                            <TableCell>Magazyn</TableCell>
                            <TableCell>Data wa≈ºno≈õci</TableCell>
                            <TableCell>Dostƒôpna ilo≈õƒá</TableCell>
                            <TableCell>Cena jedn.</TableCell>
                            <TableCell>Do rezerwacji</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {materialBatches.map((batch) => {
                            const selectedBatch = selectedMaterialBatches.find(b => b.batchId === batch.id);
                            const selectedQuantity = selectedBatch ? selectedBatch.quantity : 0;
                            // Sprawd≈∫ czy partia jest ju≈º zarezerwowana dla tego zadania
                            const isReservedForTask = task.materialBatches && 
                                                     task.materialBatches[materialId] && 
                                                     task.materialBatches[materialId].some(b => b.batchId === batch.id);
                            
                            // Wy≈õwietl informacje o faktycznej dostƒôpno≈õci
                            const effectiveQuantity = batch.effectiveQuantity || 0;
                            const reservedByOthers = batch.reservedByOthers || 0;
                            
                            return (
                              <TableRow key={batch.id}>
                                <TableCell>
                                  {batch.batchNumber || batch.lotNumber || 'Bez numeru'}
                                  {isReservedForTask && (
                                    <Chip 
                                      label="Zarezerwowana" 
                                      color="primary" 
                                      size="small" 
                                      sx={{ ml: 1 }} 
                                      variant="outlined" 
                                    />
                                  )}
                                </TableCell>
                                <TableCell>
                                  {batch.warehouseInfo ? batch.warehouseInfo.name : 'Magazyn g≈Ç√≥wny'}
                                </TableCell>
                                <TableCell>
                                  {batch.expiryDate ? formatDate(batch.expiryDate) : 'Brak'}
                                </TableCell>
                                <TableCell>
                                  {parseFloat(batch.quantity).toFixed(3)} {material.unit}
                                  {reservedByOthers > 0 && (
                                    <Typography variant="caption" color="error" display="block">
                                      Zarezerwowane: {parseFloat(reservedByOthers).toFixed(3)} {material.unit}
                                    </Typography>
                                  )}
                                  <Typography variant="caption" color={effectiveQuantity > 0 ? "success" : "error"} display="block">
                                    Dostƒôpne: {parseFloat(effectiveQuantity).toFixed(3)} {material.unit}
                                  </Typography>
                                </TableCell>
                                <TableCell>
                                  {batch.unitPrice ? `${parseFloat(batch.unitPrice).toFixed(4)} ‚Ç¨` : '‚Äî'}
                                </TableCell>
                                <TableCell>
                                  <TextField
                                    type="number"
                                    value={selectedQuantity}
                                    onChange={(e) => {
                                      const value = parseFloat(e.target.value);
                                      const quantity = isNaN(value) ? 0 : Math.min(value, effectiveQuantity);
                                      handleBatchSelection(materialId, batch.id, quantity);
                                    }}
                                    onFocus={(e) => {
                                      // Je≈õli warto≈õƒá to 0, wyczy≈õƒá pole przy focusie
                                      if (selectedQuantity === 0) {
                                        e.target.select();
                                      }
                                    }}
                                    onBlur={(e) => {
                                      // Je≈õli pole jest puste po utracie focusu, ustaw 0
                                      if (e.target.value === '' || e.target.value === null) {
                                        handleBatchSelection(materialId, batch.id, 0);
                                      }
                                    }}
                                    onWheel={(e) => e.target.blur()} // Wy≈ÇƒÖcza reakcjƒô na scroll
                                    inputProps={{ 
                                      min: 0, 
                                      max: effectiveQuantity, // Maksymalna warto≈õƒá to efektywnie dostƒôpna ilo≈õƒá
                                      step: 'any'
                                    }}
                                    size="small"
                                    sx={{ width: '130px' }} // Poszerzony z 100px do 130px
                                    error={effectiveQuantity <= 0}
                                    helperText={effectiveQuantity <= 0 ? "Brak dostƒôpnej ilo≈õci" : ""}
                                    disabled={effectiveQuantity <= 0}
                                  />
                                </TableCell>
                              </TableRow>
                            );
                          })}
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </>
                )}
                
                {/* Sekcja z oczekiwanymi zam√≥wieniami - wydzielona poza warunek sprawdzajƒÖcy partie */}
                <Box sx={{ mt: 3 }}>
                  <Typography variant="subtitle2" gutterBottom>Oczekiwane zam√≥wienia:</Typography>
                  {awaitingOrdersLoading ? (
                    <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>
                      <CircularProgress size={24} />
                    </Box>
                  ) : (
                    <>
                      {awaitingOrders[materialId] && awaitingOrders[materialId].length > 0 ? (
                        <TableContainer>
                          <Table size="small">
                            <TableHead>
                              <TableRow>
                                <TableCell>Nr zam√≥wienia</TableCell>
                                <TableCell>Status</TableCell>
                                <TableCell>Zam√≥wione</TableCell>
                                <TableCell>Otrzymane</TableCell>
                                <TableCell>Cena jednostkowa</TableCell>
                                <TableCell>Data zam√≥wienia</TableCell>
                                <TableCell>Oczekiwana dostawa</TableCell>
                                <TableCell>Akcje</TableCell>
                              </TableRow>
                            </TableHead>
                            <TableBody>
                              {awaitingOrders[materialId].flatMap(order => 
                                order.items ? order.items.map(item => ({ ...item, orderData: order })) : []
                              ).map((item, index) => {
                                const order = item.orderData;
                                                    const statusText = (() => {
                      switch(order.status) {
                        case 'pending': return 'OczekujƒÖce';
                        case 'approved': return 'Zatwierdzone';
                        case 'ordered': return 'Zam√≥wione';
                        case 'partial': return 'Czƒô≈õciowo dostarczone';
                        case 'confirmed': return 'Potwierdzone';
                        default: return order.status;
                      }
                    })();
                                
                                const statusColor = (() => {
                                  switch(order.status) {
                                    case 'pending': return '#757575'; // szary - oczekujƒÖce
                                    case 'approved': return '#ffeb3b'; // ≈º√≥≈Çty - zatwierdzone
                                    case 'ordered': return '#1976d2'; // niebieski - zam√≥wione
                                    case 'partial': return '#81c784'; // jasno zielony - czƒô≈õciowo dostarczone
                                    case 'confirmed': return '#4caf50'; // oryginalny zielony
                                    default: return '#757575'; // oryginalny szary
                                  }
                                })();
                                
                                // Pomocnicza funkcja do formatowania dat
                                const formatOrderDate = (dateValue) => {
                                  if (!dateValue) return '-';
                                  
                                  try {
                                    let date;
                                    
                                    // Obs≈Çuga Timestamp z Firebase
                                    if (dateValue.toDate && typeof dateValue.toDate === 'function') {
                                      date = dateValue.toDate();
                                    }
                                    // Obs≈Çuga obiektu z seconds (Firebase Timestamp JSON)
                                    else if (dateValue.seconds) {
                                      date = new Date(dateValue.seconds * 1000);
                                    }
                                    // Obs≈Çuga standardowego Date lub string
                                    else {
                                      date = new Date(dateValue);
                                    }
                                    
                                    // Sprawd≈∫ czy data jest prawid≈Çowa
                                    if (isNaN(date.getTime())) {
                                      return '-';
                                    }
                                    
                                    return date.toLocaleDateString('pl-PL');
                                  } catch (error) {
                                    console.error('B≈ÇƒÖd formatowania daty:', error, dateValue);
                                    return '-';
                                  }
                                };

                                return (
                                  <TableRow key={`${order.id}-${index}`}>
                                    <TableCell>{order.number || order.poNumber || '-'}</TableCell>
                                    <TableCell>
                                      <Chip 
                                        label={statusText} 
                                        size="small"
                                        sx={{
                                          backgroundColor: statusColor,
                                          color: order.status === 'approved' ? 'black' : 'white'
                                        }}
                                      />
                                    </TableCell>
                                    <TableCell align="right">
                                      {item.quantityOrdered || item.quantity || '-'} {item.unit || ''}
                                    </TableCell>
                                    <TableCell align="right">
                                      {item.quantityReceived || '0'} {item.unit || ''}
                                    </TableCell>
                                    <TableCell align="right">
                                      {(() => {
                                        if (!item.unitPrice) return '-';
                                        const price = parseFloat(item.unitPrice);
                                        return !isNaN(price) ? `${price.toFixed(2)} EUR` : '-';
                                      })()}
                                    </TableCell>
                                    <TableCell>
                                      {formatOrderDate(order.orderDate || order.createdAt)}
                                    </TableCell>
                                    <TableCell>
                                      {formatOrderDate(item.expectedDeliveryDate || order.expectedDeliveryDate) || 'Nie okre≈õlono'}
                                    </TableCell>
                                    <TableCell>
                                      <IconButton
                                        size="small"
                                        color="primary"
                                        onClick={() => navigate(`/purchase-orders/${order.id}`)}
                                        title="Przejd≈∫ do zam√≥wienia"
                                      >
                                        <ArrowForwardIcon />
                                      </IconButton>
                                    </TableCell>
                                  </TableRow>
                                );
                              })}
                            </TableBody>
                          </Table>
                        </TableContainer>
                      ) : (
                        <Typography variant="body2" color="textSecondary">
                          Brak oczekujƒÖcych zam√≥wie≈Ñ dla tego materia≈Çu
                        </Typography>
                      )}
                    </>
                  )}
                </Box>
                    
                <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>
                  <Button 
                    variant="contained" 
                    color="primary"
                    size="small"
                    disabled={!isComplete || reservingMaterials || (isAlreadyReserved && reservationMethod !== 'manual')}
                    onClick={() => handleReserveMaterials(materialId)}
                  >
                    {isAlreadyReserved ? 'Zaktualizuj rezerwacjƒô' : 'Rezerwuj ten materia≈Ç'}
                  </Button>
                </Box>
              </AccordionDetails>
            </Accordion>
          );
        })}
      </Box>
    );
  };

  // Funkcja zwracajƒÖca nazwƒô u≈ºytkownika zamiast ID
  const getUserName = (userId) => {
    if (!userId) return 'System';
    
    // Je≈õli mamy ju≈º nazwƒô u≈ºytkownika w stanie, u≈ºyj jej
    if (userNames[userId]) {
      return userNames[userId];
    }
    
    // Je≈õli ID jest d≈Çu≈ºsze ni≈º 10 znak√≥w, zwr√≥ƒá skr√≥conƒÖ wersjƒô
    if (userId.length > 10) {
      // Pobierz dane u≈ºytkownika asynchronicznie tylko raz
      if (!userNames[userId] && !userNames[`loading_${userId}`]) {
        // Nie wywo≈Çuj setState w render - zostanie za≈Çadowane przez useEffect
        // setUserNames jest przeniesione do useEffect
        // ≈Åadowanie nazw przeniesione do useEffect
      }
      
      // Tymczasowo zwr√≥ƒá skr√≥conƒÖ wersjƒô ID
      return `${userId.substring(0, 5)}...${userId.substring(userId.length - 4)}`;
    }
    
    return userId;
  };

  // Dodaj funkcjƒô do generowania i pobierania raportu materia≈Ç√≥w i LOT-√≥w
  const handlePrintMaterialsAndLots = async () => {
    if (!task) return;
    
    try {
      const report = await generateMaterialsAndLotsReport(id);
      
      // Formatowanie daty dla wydruku
      const formatDate = (dateString) => {
        if (!dateString) return 'Nie okre≈õlono';
        const date = new Date(dateString);
        return date.toLocaleDateString('pl-PL', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        });
      };
      
      // HTML do wydruku
      const printContents = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>Rozpiska materia≈Ç√≥w - MO ${task.moNumber}</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              margin: 20px;
              line-height: 1.5;
            }
            h1, h2, h3 {
              margin-top: 20px;
              margin-bottom: 10px;
            }
            table {
              width: 100%;
              border-collapse: collapse;
              margin-bottom: 20px;
            }
            th, td {
              border: 1px solid #ddd;
              padding: 8px;
              text-align: left;
            }
            th {
              background-color: #f2f2f2;
            }
            .header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 20px;
            }
            .section {
              margin-bottom: 30px;
            }
            .footer {
              margin-top: 50px;
              text-align: center;
              font-size: 12px;
              color: #666;
            }
            @media print {
              button {
                display: none;
              }
            }
            .reserved {
              background-color: #e8f5e9;
            }
            .not-reserved {
              background-color: #ffebee;
            }
            .excluded {
              text-decoration: line-through;
              color: #888;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <div>
              <h1>Rozpiska materia≈Ç√≥w</h1>
              <h2>MO: ${task.moNumber}</h2>
            </div>
            <div>
              <p><strong>Data:</strong> ${new Date().toLocaleDateString('pl-PL')}</p>
              <p><strong>Status:</strong> ${task.status}</p>
            </div>
          </div>
          
          <div class="section">
            <h3>Szczeg√≥≈Çy zadania</h3>
            <table>
              <tr><th>Produkt:</th><td>${task.productName}</td></tr>
              <tr><th>Ilo≈õƒá:</th><td>${task.quantity} ${task.unit}</td></tr>
              <tr><th>Data rozpoczƒôcia:</th><td>${formatDate(task.scheduledDate)}</td></tr>
              <tr><th>Planowane zako≈Ñczenie:</th><td>${formatDate(task.endDate)}</td></tr>
            </table>
          </div>
          
          <div class="section">
            <h3>Lista materia≈Ç√≥w</h3>
            <table>
              <thead>
                <tr>
                  <th>Nazwa materia≈Çu</th>
                  <th>Ilo≈õƒá potrzebna</th>
                  <th>Jednostka</th>
                  <th>Cena jedn.</th>
                  <th>Koszt</th>
                  <th>Stan</th>
                  <th>Wliczany do koszt√≥w</th>
                </tr>
              </thead>
              <tbody>
                ${report.materials.map(material => {
                  const isReserved = material.batches && material.batches.length > 0;
                  const isIncludedInCosts = includeInCosts[material.id] !== undefined ? includeInCosts[material.id] : true;
                  const rowClass = isReserved ? 'reserved' : 'not-reserved';
                  const nameClass = !isIncludedInCosts ? 'excluded' : '';
                  
                  return `
                  <tr class="${rowClass}">
                    <td class="${nameClass}">${material.name}</td>
                    <td>${material.quantity}</td>
                    <td>${material.unit || 'szt.'}</td>
                    <td>${(() => {
                      const materialId = material.inventoryItemId || material.id;
                      const unitPrice = calculateWeightedUnitPrice(material, materialId);
                      return unitPrice > 0 ? `${unitPrice.toFixed(4)} ‚Ç¨` : '‚Äî';
                    })()}</td>
                    <td>${material.cost ? `${material.cost.toFixed(2)} ‚Ç¨` : '‚Äî'}</td>
                    <td>${material.available ? 'Dostƒôpny' : 'Brak'}</td>
                    <td>${isIncludedInCosts ? 'Tak' : 'Nie'}</td>
                  </tr>
                  `;
                }).join('')}
                
                <tr>
                  <th colspan="4" style="text-align: right">Ca≈Çkowity koszt materia≈Ç√≥w:</th>
                  <th>${report.totalMaterialCost ? `${report.totalMaterialCost.toFixed(2)} ‚Ç¨` : '‚Äî'}</th>
                  <th colspan="2"></th>
                </tr>
                <tr>
                  <th colspan="4" style="text-align: right">Koszt materia≈Ç√≥w na jednostkƒô:</th>
                  <th>${report.unitMaterialCost ? `~${report.unitMaterialCost.toFixed(4)} ‚Ç¨/${task.unit}` : '‚Äî'}</th>
                  <th colspan="2"></th>
                </tr>
              </tbody>
            </table>
          </div>
          
          <div class="section">
            <h3>Zarezerwowane partie (LOT)</h3>
            ${Object.keys(report.batches || {}).length === 0 ? 
              `<p>Brak zarezerwowanych partii</p>` : 
              `<table>
                <thead>
                  <tr>
                    <th>Materia≈Ç</th>
                    <th>Partia (LOT)</th>
                    <th>Ilo≈õƒá</th>
                    <th>Cena jedn.</th>
                    <th>Koszt</th>
                    <th>Data wa≈ºno≈õci</th>
                  </tr>
                </thead>
                <tbody>
                  ${Object.entries(report.batches || {}).map(([materialId, batches]) => {
                    const material = report.materials.find(m => m.id === materialId || m.inventoryItemId === materialId);
                    
                    return batches.map(batch => {
                      const batchCost = (batch.quantity || 0) * (batch.unitPrice || 0);
                      return `
                        <tr>
                          <td>${material ? material.name : 'Nieznany materia≈Ç'}</td>
                          <td>${batch.batchNumber}</td>
                          <td>${batch.quantity} ${material ? material.unit : 'szt.'}</td>
                          <td>${batch.unitPrice ? batch.unitPrice.toFixed(4) + ' ‚Ç¨' : '‚Äî'}</td>
                          <td>${batchCost ? batchCost.toFixed(2) + ' ‚Ç¨' : '‚Äî'}</td>
                          <td>${formatDate(batch.expiryDate)}</td>
                        </tr>
                      `;
                    }).join('');
                  }).join('')}
                </tbody>
              </table>`
            }
          </div>
          
          <div class="footer">
            <p>Wygenerowano: ${new Date().toLocaleString('pl-PL')}</p>
            <p>System MRP</p>
          </div>
          
          <div style="text-align: center; margin-top: 20px;">
            <button onclick="window.print()" style="padding: 10px 20px; background-color: #2196F3; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 16px;">
              Drukuj raport
            </button>
          </div>
        </body>
        </html>
      `;
      
      // Otw√≥rz nowe okno z zawarto≈õciƒÖ do wydruku
      const printWindow = window.open('', '_blank');
      printWindow.document.open();
      printWindow.document.write(printContents);
      printWindow.document.close();
    } catch (error) {
      console.error('B≈ÇƒÖd podczas generowania raportu materia≈Ç√≥w:', error);
      showError('WystƒÖpi≈Ç b≈ÇƒÖd podczas generowania raportu materia≈Ç√≥w');
    }
  };

  // Funkcja do pobierania dostƒôpnych opakowa≈Ñ
  const fetchAvailablePackaging = async () => {
    try {
      setLoadingPackaging(true);
      
      // Pobierz wszystkie pozycje magazynowe z odpowiedniƒÖ strukturƒÖ danych zawierajƒÖcƒÖ stany magazynowe
      const result = await getAllInventoryItems();
      
      // Upewniamy siƒô, ≈ºe mamy dostƒôp do w≈Ça≈õciwych danych
      const allItems = Array.isArray(result) ? result : result.items || [];
      
      // Filtrujemy tylko opakowania zbiorcze
      const packagingItems = allItems.filter(item => 
        item.category === 'Opakowania zbiorcze'
      );
      
      console.log('Pobrane opakowania:', packagingItems);
      
      // Pobierz partie dla ka≈ºdego opakowania
      const packagingWithBatches = await Promise.all(
        packagingItems.map(async (item) => {
          try {
            const batches = await getItemBatches(item.id);
            // Filtruj tylko partie z dostƒôpnƒÖ ilo≈õciƒÖ > 0
            const availableBatches = batches.filter(batch => batch.quantity > 0);
            
            return {
              ...item,
              selected: false,
              quantity: 0,
              availableQuantity: item.currentQuantity || item.quantity || 0,
              unitPrice: item.unitPrice || item.price || 0,
              batches: availableBatches,
              selectedBatch: null,
              batchQuantity: 0
            };
          } catch (error) {
            console.error(`B≈ÇƒÖd podczas pobierania partii dla opakowania ${item.name}:`, error);
            return {
              ...item,
              selected: false,
              quantity: 0,
              availableQuantity: item.currentQuantity || item.quantity || 0,
              unitPrice: item.unitPrice || item.price || 0,
              batches: [],
              selectedBatch: null,
              batchQuantity: 0
            };
          }
        })
      );
      
      setPackagingItems(packagingWithBatches);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania opakowa≈Ñ:', error);
      showError('Nie uda≈Ço siƒô pobraƒá listy opakowa≈Ñ: ' + error.message);
    } finally {
      setLoadingPackaging(false);
    }
  };
  
  // Obs≈Çuga otwierania dialogu opakowa≈Ñ
  const handleOpenPackagingDialog = () => {
    fetchAvailablePackaging();
    setPackagingDialogOpen(true);
  };
  

  
  // Obs≈Çuga wyboru/odznaczenia opakowania
  const handlePackagingSelection = (id, selected) => {
    setPackagingItems(prev => prev.map(item => 
      item.id === id ? { ...item, selected, selectedBatch: null, batchQuantity: 0 } : item
    ));
  };

  // Obs≈Çuga wyboru partii dla opakowania
  const handlePackagingBatchSelection = (itemId, batchId) => {
    setPackagingItems(prev => prev.map(item => {
      if (item.id === itemId) {
        const selectedBatch = item.batches.find(batch => batch.id === batchId);
        return { 
          ...item, 
          selectedBatch: selectedBatch,
          batchQuantity: 0 
        };
      }
      return item;
    }));
  };

  // Obs≈Çuga zmiany ilo≈õci dla wybranej partii
  const handlePackagingBatchQuantityChange = (itemId, value) => {
    setPackagingItems(prev => prev.map(item => {
      if (item.id === itemId && item.selectedBatch) {
        const parsedValue = parseFloat(value) || 0;
        const limitedValue = Math.min(parsedValue, item.selectedBatch.quantity);
        
        return { 
          ...item, 
          batchQuantity: limitedValue,
          quantity: limitedValue // synchronizuj z g≈Ç√≥wnƒÖ ilo≈õciƒÖ
        };
      }
      return item;
    }));
  };
  
  // Dodanie wybranych opakowa≈Ñ do materia≈Ç√≥w zadania
  const handleAddPackagingToTask = async () => {
    try {
      setLoadingPackaging(true);
      
      // Filtrujemy wybrane opakowania z partiƒÖ i ilo≈õciƒÖ > 0
      const packagingToAdd = packagingItems.filter(item => 
        item.selected && item.selectedBatch && item.batchQuantity > 0
      );
      
      if (packagingToAdd.length === 0) {
        showError('Nie wybrano ≈ºadnych opakowa≈Ñ z partiami do dodania');
        return;
      }
      
      // Pobierz aktualne zadanie
      const updatedTask = await getTaskById(id);
      const currentMaterials = updatedTask.materials || [];
      
      // Przygotuj nowe materia≈Çy do dodania z informacjami o partii
      const newMaterials = packagingToAdd.map(item => {
        const material = {
          id: item.id,
          name: item.name || '',
          quantity: item.batchQuantity || 0,
          unit: item.unit || '',
          inventoryItemId: item.id,
          isPackaging: true,
          category: item.category || 'Opakowania zbiorcze',
          unitPrice: item.unitPrice || 0,
          // Dodaj informacje o wybranej partii
          selectedBatch: {
            id: item.selectedBatch.id,
            quantity: item.batchQuantity || 0
          }
        };

        // Dodaj opcjonalne pola tylko je≈õli nie sƒÖ undefined
        if (item.selectedBatch.lotNumber || item.selectedBatch.batchNumber) {
          material.selectedBatch.lotNumber = item.selectedBatch.lotNumber || item.selectedBatch.batchNumber;
        }

        if (item.selectedBatch.expiryDate) {
          material.selectedBatch.expiryDate = item.selectedBatch.expiryDate;
        }

        return material;
      });
      
      // Po≈ÇƒÖcz istniejƒÖce materia≈Çy z nowymi opakowaniami
      const updatedMaterials = [...currentMaterials];
      
      // Sprawd≈∫ czy dane opakowanie ju≈º istnieje i aktualizuj ilo≈õƒá lub dodaj nowe
      newMaterials.forEach(newMaterial => {
        const existingIndex = updatedMaterials.findIndex(m => 
          m.id === newMaterial.id && 
          m.selectedBatch?.id === newMaterial.selectedBatch?.id
        );
        
        if (existingIndex >= 0) {
          // Aktualizuj istniejƒÖce opakowanie z tƒÖ samƒÖ partiƒÖ
          updatedMaterials[existingIndex].quantity = 
            (parseFloat(updatedMaterials[existingIndex].quantity) || 0) + 
            (parseFloat(newMaterial.quantity) || 0);
          
          if (updatedMaterials[existingIndex].selectedBatch && newMaterial.selectedBatch) {
            updatedMaterials[existingIndex].selectedBatch.quantity = 
              (parseFloat(updatedMaterials[existingIndex].selectedBatch.quantity) || 0) + 
              (parseFloat(newMaterial.selectedBatch.quantity) || 0);
          }
        } else {
          // Dodaj nowe opakowanie
          updatedMaterials.push(newMaterial);
        }
      });
      
      let consumptionData = [];
      let successMessage = 'Opakowania zosta≈Çy dodane do zadania';
      
      // Konsumuj ilo≈õci z wybranych partii tylko je≈õli opcja jest w≈ÇƒÖczona
      if (consumePackagingImmediately) {
        for (const item of packagingToAdd) {
          try {
            // Pobierz aktualne dane partii
            const currentBatch = await getInventoryBatch(item.selectedBatch.id);
            
            if (currentBatch) {
              const currentQuantity = Number(currentBatch.quantity) || 0;
              const consumeQuantity = Number(item.batchQuantity) || 0;
              const newQuantity = Math.max(0, currentQuantity - consumeQuantity);
              
              console.log('Konsumpcja opakowania:', {
                itemName: item.name,
                batchId: item.selectedBatch.id,
                currentQuantity,
                consumeQuantity,
                newQuantity
              });
              
              // Aktualizuj ilo≈õƒá w partii
              await updateBatch(item.selectedBatch.id, {
                quantity: newQuantity
              }, currentUser.uid);
              
              // Zapisz informacje o konsumpcji
              consumptionData.push({
                materialId: item.id,
                batchId: item.selectedBatch.id,
                batchNumber: item.selectedBatch.lotNumber || item.selectedBatch.batchNumber || 'Brak numeru',
                quantity: consumeQuantity,
                unitPrice: item.unitPrice || 0,
                timestamp: new Date().toISOString(),
                userId: currentUser.uid,
                userName: currentUser.displayName || currentUser.email,
                includeInCosts: true
              });
            }
          } catch (error) {
            console.error(`B≈ÇƒÖd podczas konsumpcji partii ${item.selectedBatch.id}:`, error);
            showError(`Nie uda≈Ço siƒô skonsumowaƒá partii ${item.selectedBatch.lotNumber || item.selectedBatch.batchNumber}: ${error.message}`);
          }
        }
        successMessage = 'Opakowania zosta≈Çy dodane do zadania i skonsumowane z wybranych partii';
      }

      // Pobierz aktualne skonsumowane materia≈Çy
      const currentConsumedMaterials = updatedTask.consumedMaterials || [];
      const newConsumedMaterials = [...currentConsumedMaterials, ...consumptionData];

      // Zaktualizuj zadanie w bazie danych - dodaj materia≈Çy i informacje o konsumpcji
      const updateData = {
        materials: updatedMaterials,
        updatedAt: serverTimestamp()
      };
      
      // Dodaj consumedMaterials tylko je≈õli konsumujemy natychmiast
      if (consumePackagingImmediately) {
        updateData.consumedMaterials = newConsumedMaterials;
      }
      
      await updateDoc(doc(db, 'productionTasks', id), updateData);
      
      // Od≈õwie≈º dane zadania
      fetchTask();
      
      showSuccess(successMessage);
      setPackagingDialogOpen(false);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas dodawania opakowa≈Ñ:', error);
      showError('Nie uda≈Ço siƒô dodaƒá opakowa≈Ñ do zadania: ' + error.message);
    } finally {
      setLoadingPackaging(false);
    }
  };

  // Funkcja do pobierania dostƒôpnych materia≈Ç√≥w dla wybranej kategorii
  const fetchAvailableRawMaterials = async (category = null) => {
    try {
      setLoadingRawMaterials(true);
      
      // Okre≈õl kategoriƒô do pobrania
      const targetCategory = category || (materialCategoryTab === 0 ? 'Surowce' : 'Opakowania jednostkowe');
      
      // Pobierz wszystkie pozycje magazynowe z odpowiedniƒÖ strukturƒÖ danych zawierajƒÖcƒÖ stany magazynowe
      const result = await getAllInventoryItems();
      
      // Upewniamy siƒô, ≈ºe mamy dostƒôp do w≈Ça≈õciwych danych
      const allItems = Array.isArray(result) ? result : result.items || [];
      
      // Filtrujemy tylko pozycje z wybranej kategorii
      const rawMaterialsItems = allItems.filter(item => 
        item.category === targetCategory
      );
      
      console.log(`Pobrane materia≈Çy z kategorii "${targetCategory}":`, rawMaterialsItems);
      
      setRawMaterialsItems(rawMaterialsItems.map(item => ({
        ...item,
        selected: false,
        quantity: 0,
        // U≈ºywamy aktualnej ilo≈õci dostƒôpnej w magazynie, a nie pierwotnej warto≈õci
        availableQuantity: item.currentQuantity || item.quantity || 0,
        unitPrice: item.unitPrice || item.price || 0
      })));
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania materia≈Ç√≥w:', error);
      showError('Nie uda≈Ço siƒô pobraƒá listy materia≈Ç√≥w: ' + error.message);
    } finally {
      setLoadingRawMaterials(false);
    }
  };
  
  // Obs≈Çuga otwierania dialogu surowc√≥w
  const handleOpenRawMaterialsDialog = () => {
    setMaterialCategoryTab(0); // Resetuj do pierwszej zak≈Çadki
    setSearchRawMaterials(''); // Wyczy≈õƒá wyszukiwanie
    fetchAvailableRawMaterials('Surowce'); // Pobierz surowce jako domy≈õlnƒÖ kategoriƒô
    setRawMaterialsDialogOpen(true);
  };
  
  // Obs≈Çuga zmiany ilo≈õci wybranego surowca
  const handleRawMaterialsQuantityChange = (id, value) => {
    setRawMaterialsItems(prev => prev.map(item => {
      if (item.id === id) {
        // Pozwalamy na wprowadzenie dowolnej warto≈õci - to tylko planowanie, nie rezerwacja
        const parsedValue = value === '' ? '' : parseFloat(value);
        const finalValue = value === '' ? 0 : (isNaN(parsedValue) ? 0 : Math.max(0, parsedValue));
        
        return { 
          ...item, 
          quantity: finalValue, 
          selected: finalValue > 0 
        };
      }
      return item;
    }));
  };
  
  // Obs≈Çuga wyboru/odznaczenia surowca
  const handleRawMaterialsSelection = (id, selected) => {
    setRawMaterialsItems(prev => prev.map(item => 
      item.id === id ? { ...item, selected } : item
    ));
  };
  
  // Dodanie wybranych surowc√≥w do materia≈Ç√≥w zadania
  const handleAddRawMaterialsToTask = async () => {
    try {
      setLoadingRawMaterials(true);
      
      // Filtrujemy wybrane surowce
      const rawMaterialsToAdd = rawMaterialsItems.filter(item => item.selected && item.quantity > 0);
      
      if (rawMaterialsToAdd.length === 0) {
        showError('Nie wybrano ≈ºadnych materia≈Ç√≥w do dodania');
        return;
      }
      
      // Pobierz aktualne zadanie
      const updatedTask = await getTaskById(id);
      const currentMaterials = updatedTask.materials || [];
      
      // Przygotuj nowe materia≈Çy do dodania
      const newMaterials = rawMaterialsToAdd.map(item => ({
        id: item.id,
        name: item.name,
        quantity: item.quantity,
        unit: item.unit,
        inventoryItemId: item.id,
        isRawMaterial: true,
        category: item.category || 'Surowce',
        unitPrice: item.unitPrice || 0
      }));
      
      // Po≈ÇƒÖcz istniejƒÖce materia≈Çy z nowymi surowcami
      const updatedMaterials = [...currentMaterials];
      
      // Sprawd≈∫ czy dany surowiec ju≈º istnieje i aktualizuj ilo≈õƒá lub dodaj nowy
      newMaterials.forEach(newMaterial => {
        const existingIndex = updatedMaterials.findIndex(m => m.id === newMaterial.id);
        if (existingIndex >= 0) {
          // Aktualizuj istniejƒÖcy surowiec
          updatedMaterials[existingIndex].quantity = 
            (parseFloat(updatedMaterials[existingIndex].quantity) || 0) + 
            (parseFloat(newMaterial.quantity) || 0);
        } else {
          // Dodaj nowy surowiec
          updatedMaterials.push(newMaterial);
        }
      });
      
      // Zaktualizuj zadanie w bazie danych
      await updateDoc(doc(db, 'productionTasks', id), {
        materials: updatedMaterials,
        updatedAt: serverTimestamp()
      });
      
      // Od≈õwie≈º dane zadania
      fetchTask();
      
      showSuccess('Materia≈Çy zosta≈Çy dodane do zadania produkcyjnego');
      setRawMaterialsDialogOpen(false);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas dodawania materia≈Ç√≥w:', error);
      showError('Nie uda≈Ço siƒô dodaƒá materia≈Ç√≥w do zadania: ' + error.message);
    } finally {
      setLoadingRawMaterials(false);
    }
  };

  // Funkcja obs≈ÇugujƒÖca rozpoczƒôcie edycji sesji produkcyjnej
  const handleEditHistoryItem = (item) => {
    setEditingHistoryItem(item.id);
    setEditedHistoryItem({
      quantity: item.quantity || 0,
      startTime: item.startTime ? new Date(item.startTime) : new Date(),
      endTime: item.endTime ? new Date(item.endTime) : new Date(),
    });
  };

  // Funkcja zapisujƒÖca zmiany w sesji produkcyjnej
  const handleSaveHistoryItemEdit = async (historyItemId) => {
    try {
      setLoading(true);
      
      if (!historyItemId) {
        showError('Nie mo≈ºna edytowaƒá sesji produkcyjnej: brak identyfikatora');
        return;
      }
      
      // Walidacja danych
      if (editedHistoryItem.endTime < editedHistoryItem.startTime) {
        showError('Czas zako≈Ñczenia nie mo≈ºe byƒá wcze≈õniejszy ni≈º czas rozpoczƒôcia');
        return;
      }
      
      if (isNaN(editedHistoryItem.quantity) || editedHistoryItem.quantity < 0) {
        showError('Nieprawid≈Çowa ilo≈õƒá');
        return;
      }
      
      // Obliczenie nowego czasu trwania w minutach
      const durationMs = editedHistoryItem.endTime.getTime() - editedHistoryItem.startTime.getTime();
      const durationMinutes = Math.round(durationMs / (1000 * 60));
      
      if (durationMinutes <= 0) {
        showError('Przedzia≈Ç czasowy musi byƒá d≈Çu≈ºszy ni≈º 0 minut');
        return;
      }
      
      // Przygotuj dane do aktualizacji
      const updateData = {
        quantity: parseFloat(editedHistoryItem.quantity),
        timeSpent: durationMinutes,
        startTime: editedHistoryItem.startTime.toISOString(),
        endTime: editedHistoryItem.endTime.toISOString()
      };
      
      // Wywo≈Çaj funkcjƒô aktualizujƒÖcƒÖ sesjƒô produkcyjnƒÖ
      await updateProductionSession(historyItemId, updateData, currentUser.uid);
      
      showSuccess('Sesja produkcyjna zosta≈Ça zaktualizowana');
      
      // Od≈õwie≈º dane historii produkcji i zadania
      await fetchProductionHistory();
      await fetchTask();
      
      // Zresetuj stan edycji
      setEditingHistoryItem(null);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas aktualizacji sesji produkcyjnej:', error);
      showError('Nie uda≈Ço siƒô zaktualizowaƒá sesji produkcyjnej: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // Funkcja anulujƒÖca edycjƒô
  const handleCancelHistoryItemEdit = () => {
    setEditingHistoryItem(null);
  };

  // Funkcja do rƒôcznego dodawania sesji produkcyjnej
  const handleAddHistoryItem = async () => {
    try {
      setLoading(true);
      setHistoryInventoryError(null);
      
      // Walidacja danych
      if (editedHistoryItem.endTime < editedHistoryItem.startTime) {
        showError('Czas zako≈Ñczenia nie mo≈ºe byƒá wcze≈õniejszy ni≈º czas rozpoczƒôcia');
        return;
      }
      
      if (isNaN(editedHistoryItem.quantity) || editedHistoryItem.quantity <= 0) {
        showError('Nieprawid≈Çowa ilo≈õƒá');
        return;
      }
      
      // Obliczenie czasu trwania w minutach
      const durationMs = editedHistoryItem.endTime.getTime() - editedHistoryItem.startTime.getTime();
      const durationMinutes = Math.round(durationMs / (1000 * 60));
      
      if (durationMinutes <= 0) {
        showError('Przedzia≈Ç czasowy musi byƒá d≈Çu≈ºszy ni≈º 0 minut');
        return;
      }

      // Je≈õli u≈ºytkownik wybra≈Ç opcjƒô dodania do magazynu, waliduj dane magazynowe
      if (addToInventoryOnHistory) {
        if (!historyInventoryData.expiryDate) {
          setHistoryInventoryError('Podaj datƒô wa≈ºno≈õci produktu');
          return;
        }

        if (!historyInventoryData.lotNumber.trim()) {
          setHistoryInventoryError('Podaj numer partii (LOT)');
          return;
        }
        
        if (!historyInventoryData.warehouseId) {
          setHistoryInventoryError('Wybierz magazyn docelowy');
          return;
        }

        const inventoryQuantity = parseFloat(historyInventoryData.finalQuantity);
        if (isNaN(inventoryQuantity) || inventoryQuantity <= 0) {
          setHistoryInventoryError('Nieprawid≈Çowa ilo≈õƒá ko≈Ñcowa');
          return;
        }
      }
      
      // Przygotuj dane do zapisania nowej sesji
      const sessionData = {
        quantity: parseFloat(editedHistoryItem.quantity),
        timeSpent: durationMinutes,
        startTime: editedHistoryItem.startTime.toISOString(),
        endTime: editedHistoryItem.endTime.toISOString(),
        userId: currentUser.uid
      };
      
      // Wywo≈Çaj funkcjƒô dodajƒÖcƒÖ nowƒÖ sesjƒô produkcyjnƒÖ
      // Je≈õli u≈ºytkownik zaznaczy≈Ç opcjƒô dodania do magazynu, pomi≈Ñ automatycznƒÖ aktualizacjƒô partii
      // aby uniknƒÖƒá podw√≥jnego dodawania ilo≈õci
      await addProductionSession(task.id, sessionData, addToInventoryOnHistory);
      
      // Je≈õli u≈ºytkownik wybra≈Ç opcjƒô dodania do magazynu, dodaj produkt do magazynu
      if (addToInventoryOnHistory) {
        try {
          const result = await addTaskProductToInventory(task.id, currentUser.uid, {
            expiryDate: historyInventoryData.expiryDate.toISOString(),
            lotNumber: historyInventoryData.lotNumber,
            finalQuantity: parseFloat(historyInventoryData.finalQuantity),
            warehouseId: historyInventoryData.warehouseId
          });
          
          showSuccess(`Sesja produkcyjna zosta≈Ça dodana i ${result.message}`);
        } catch (inventoryError) {
          console.error('B≈ÇƒÖd podczas dodawania produktu do magazynu:', inventoryError);
          showError('Sesja produkcyjna zosta≈Ça dodana, ale wystƒÖpi≈Ç b≈ÇƒÖd podczas dodawania produktu do magazynu: ' + inventoryError.message);
        }
      } else {
        showSuccess('Sesja produkcyjna zosta≈Ça dodana');
      }
      
      // Od≈õwie≈º dane historii produkcji i zadania
      await fetchProductionHistory();
      await fetchTask();
      
      // Zamknij dialog i resetuj formularz
      setAddHistoryDialogOpen(false);
      setAddToInventoryOnHistory(true); // domy≈õlnie w≈ÇƒÖczone dla nastƒôpnego u≈ºycia
      setHistoryInventoryData({
        expiryDate: null,
        lotNumber: '',
        finalQuantity: '',
        warehouseId: warehouses.length > 0 ? warehouses[0].id : ''
      });
      setHistoryInventoryError(null);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas dodawania sesji produkcyjnej:', error);
      showError('Nie uda≈Ço siƒô dodaƒá sesji produkcyjnej: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // Funkcja do drukowania szczeg√≥≈Ç√≥w MO
  const handlePrintMODetails = () => {
    // Funkcja pomocnicza do formatowania dat
    const formatDateForPrint = (dateValue) => {
      if (!dateValue) return 'Nie okre≈õlono';
      
      try {
        // Spr√≥buj r√≥≈ºne formaty konwersji daty
        let date;
        if (dateValue instanceof Date) {
          date = dateValue;
        } else if (dateValue.toDate && typeof dateValue.toDate === 'function') {
          // Timestamp z Firebase
          date = dateValue.toDate();
        } else if (dateValue.seconds) {
          // Obiekt timestamp z sekundami
          date = new Date(dateValue.seconds * 1000);
        } else {
          // String lub inny format
          date = new Date(dateValue);
        }
        
        // Sprawd≈∫ czy data jest prawid≈Çowa
        if (isNaN(date.getTime())) {
          return 'Nie okre≈õlono';
        }
        
        // Formatuj datƒô do czytelnego formatu
        return date.toLocaleDateString('pl-PL', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
      } catch (error) {
        console.error('B≈ÇƒÖd konwersji daty:', error);
        return 'Nie okre≈õlono';
      }
    };
    
    // Przygotuj zawarto≈õƒá do wydruku
    let printContents = `
      <html>
      <head>
        <title>Szczeg√≥≈Çy MO: ${task.moNumber || ''}</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .header { text-align: center; margin-bottom: 20px; border-bottom: 1px solid #ccc; padding-bottom: 10px; }
          h1 { margin-bottom: 5px; }
          table { width: 100%; border-collapse: collapse; margin: 15px 0; }
          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          th { background-color: #f2f2f2; width: 30%; }
          .section { margin-top: 20px; }
          .footer { text-align: center; margin-top: 50px; font-size: 0.8em; border-top: 1px solid #ccc; padding-top: 10px; }
          .highlighted { background-color: #f9f9f9; border-left: 4px solid #2196F3; padding-left: 10px; }
          @media print {
            body { -webkit-print-color-adjust: exact; color-adjust: exact; }
            button { display: none; }
          }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>Szczeg√≥≈Çy zlecenia produkcyjnego</h1>
          <h2>MO: ${task.moNumber || 'Nie okre≈õlono'}</h2>
        </div>
        
        <div class="section">
          <h3>Informacje podstawowe</h3>
          <table>
            <tr><th>Nazwa zadania:</th><td>${task.name || 'Nie okre≈õlono'}</td></tr>
            <tr><th>Produkt:</th><td>${task.productName || 'Nie okre≈õlono'}</td></tr>
            <tr><th>Ilo≈õƒá:</th><td>${task.quantity || '0'} ${task.unit || 'szt.'}</td></tr>
            <tr><th>Status:</th><td>${task.status || 'Nie okre≈õlono'}</td></tr>

            ${(task.recipeName || task.recipe?.recipeName) ? `<tr><th>Receptura:</th><td>${task.recipeName || task.recipe?.recipeName}${task.recipeVersion ? ` (wersja ${task.recipeVersion})` : ''}</td></tr>` : ''}
          </table>
        </div>

        <div class="section highlighted">
          <h3>Informacje o partii produktu</h3>
          <table>
            <tr><th>Numer LOT:</th><td>${task.lotNumber || 'Nie okre≈õlono'}</td></tr>
            <tr><th>Data wa≈ºno≈õci:</th><td>${task.expiryDate ? formatDateForPrint(task.expiryDate).split(',')[0] : 'Nie okre≈õlono'}</td></tr>
          </table>
        </div>

        <div class="section">
          <h3>Harmonogram</h3>
          <table>
            <tr><th>Planowany start:</th><td>${formatDateForPrint(task.scheduledDate)}</td></tr>
            <tr><th>Planowane zako≈Ñczenie:</th><td>${formatDateForPrint(task.endDate)}</td></tr>
            <tr><th>Szacowany czas produkcji:</th><td>${task.estimatedDuration ? (task.estimatedDuration / 60).toFixed(2) + ' godz.' : 'Nie okre≈õlono'}</td></tr>
            <tr><th>Czas na jednostkƒô:</th><td>${task.productionTimePerUnit ? parseFloat(task.productionTimePerUnit).toFixed(2) + ' min./szt.' : 'Nie okre≈õlono'}</td></tr>
          </table>
        </div>

        <div class="section">
          <h3>Materia≈Çy</h3>
          <table>
            <thead>
              <tr>
                <th>Nazwa</th>
                <th>Zaplanowana ilo≈õƒá</th>
                <th>Jednostka</th>
              </tr>
            </thead>
            <tbody>
              ${materials.map(material => `
                <tr>
                  <td>${material.name || 'Nie okre≈õlono'}</td>
                  <td>${materialQuantities[material.id] || 0}</td>
                  <td>${material.unit || 'szt.'}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        </div>

        ${task.notes ? `
        <div class="section">
          <h3>Notatki</h3>
          <p>${task.notes}</p>
        </div>
        ` : ''}

        <div class="footer">
          <p>Data wydruku: ${new Date().toLocaleDateString('pl-PL', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          })}</p>
          <p>System MRP</p>
        </div>
        
        <div style="text-align: center; margin-top: 20px;">
          <button onclick="window.print()" style="padding: 10px 20px; background-color: #2196F3; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 16px;">
            Drukuj dokument
          </button>
        </div>
      </body>
      </html>
    `;
    
    // Otw√≥rz nowe okno z zawarto≈õciƒÖ do wydruku zamiast modyfikowaƒá bie≈ºƒÖce dokumentu
    const printWindow = window.open('', '_blank');
    printWindow.document.open();
    printWindow.document.write(printContents);
    printWindow.document.close();
  };

  // Funkcja do pobierania aktualnych cen partii i aktualizacji cen materia≈Ç√≥w
  const updateMaterialPricesFromBatches = useCallback(async () => {
    if (!task || !task.materialBatches) return;
    
    try {
      // Tworzymy kopiƒô materia≈Ç√≥w, aby je zaktualizowaƒá
      const updatedMaterials = [...materials];
      let hasChanges = false;
      
      // Dla ka≈ºdego materia≈Çu z przypisanymi partiami, obliczamy aktualnƒÖ cenƒô
      for (const material of updatedMaterials) {
        const materialId = material.inventoryItemId || material.id;
        const reservedBatches = task.materialBatches && task.materialBatches[materialId];
        
        if (reservedBatches && reservedBatches.length > 0) {
          let totalCost = 0;
          let totalQuantity = 0;
          
          // Pobierz aktualne dane ka≈ºdej partii i oblicz ≈õredniƒÖ wa≈ºonƒÖ cenƒô
          for (const batchReservation of reservedBatches) {
            try {
              const batchData = await getInventoryBatch(batchReservation.batchId);
              if (batchData) {
                const batchQuantity = parseFloat(batchReservation.quantity) || 0;
                const batchUnitPrice = parseFloat(batchData.unitPrice) || 0;
                
                totalCost += batchQuantity * batchUnitPrice;
                totalQuantity += batchQuantity;
                
                // Batch ${batchData.batchNumber}: ${batchQuantity} √ó ${batchUnitPrice}‚Ç¨
              }
            } catch (error) {
              console.error(`B≈ÇƒÖd podczas pobierania danych partii ${batchReservation.batchId}:`, error);
            }
          }
          
          // Oblicz ≈õredniƒÖ wa≈ºonƒÖ cenƒô jednostkowƒÖ
          if (totalQuantity > 0) {
            const averagePrice = totalCost / totalQuantity;
            // Sprawd≈∫ czy cena siƒô zmieni≈Ça przed aktualizacjƒÖ
            if (Math.abs(material.unitPrice - averagePrice) > 0.001) {
            material.unitPrice = averagePrice;
              hasChanges = true;
            console.log(`üîÑ [ZAREZERWOWANE] Zaktualizowano cenƒô dla ${material.name}: ${averagePrice.toFixed(2)} ‚Ç¨`);
            }
          }
        }
      }
      
      // Aktualizuj stan materia≈Ç√≥w tylko je≈õli wykryto zmiany
      if (hasChanges) {
      setMaterials(updatedMaterials);
        
        // Tylko logowanie - NIE zapisujemy automatycznie do bazy danych
        if (task && updatedMaterials.length > 0) {
          // Oblicz ca≈Çkowity koszt materia≈Ç√≥w (tylko z flagƒÖ "wliczaj")
          const totalMaterialCost = updatedMaterials.reduce((sum, material) => {
            // Sprawd≈∫ czy dla tego materia≈Çu sƒÖ zarezerwowane partie
            const materialId = material.inventoryItemId || material.id;
            const reservedBatches = task.materialBatches && task.materialBatches[materialId];
            
            // Uwzglƒôdnij koszt tylko je≈õli materia≈Ç ma zarezerwowane partie i jest wliczany do koszt√≥w
            if (reservedBatches && reservedBatches.length > 0 && includeInCosts[material.id]) {
              const quantity = materialQuantities[material.id] || material.quantity || 0;
              const materialId = material.inventoryItemId || material.id;
              const unitPrice = calculateWeightedUnitPrice(material, materialId);
              return sum + (quantity * unitPrice);
            }
            return sum;
          }, 0);
          
          // Oblicz pe≈Çny koszt produkcji (wszystkie materia≈Çy niezale≈ºnie od flagi "wliczaj")
          const totalFullProductionCost = updatedMaterials.reduce((sum, material) => {
            // Sprawd≈∫ czy dla tego materia≈Çu sƒÖ zarezerwowane partie
            const materialId = material.inventoryItemId || material.id;
            const reservedBatches = task.materialBatches && task.materialBatches[materialId];
            
            // Uwzglƒôdnij koszt wszystkich materia≈Ç√≥w z zarezerwowanymi partiami
            if (reservedBatches && reservedBatches.length > 0) {
              const quantity = materialQuantities[material.id] || material.quantity || 0;
              const unitPrice = calculateWeightedUnitPrice(material, materialId);
              return sum + (quantity * unitPrice);
            }
            return sum;
          }, 0);
          
          // Oblicz koszty na jednostkƒô
          const unitMaterialCost = task.quantity ? (totalMaterialCost / task.quantity) : 0;
          const unitFullProductionCost = task.quantity ? (totalFullProductionCost / task.quantity) : 0;
          
          console.log(`Zaktualizowano ceny materia≈Ç√≥w - obliczony koszt: ${totalMaterialCost.toFixed(2)} ‚Ç¨ (${unitMaterialCost.toFixed(2)} ‚Ç¨/${task.unit}) | Pe≈Çny koszt: ${totalFullProductionCost.toFixed(2)} ‚Ç¨ (${unitFullProductionCost.toFixed(2)} ‚Ç¨/${task.unit}) - tylko aktualizacja interfejsu`);
          
          // USUNIƒòTO: Automatyczne zapisywanie do bazy danych
          // U≈ºytkownik mo≈ºe rƒôcznie zaktualizowaƒá koszty przyciskiem "Aktualizuj rƒôcznie"
        }
      }
    } catch (error) {
      console.error('B≈ÇƒÖd podczas aktualizacji cen materia≈Ç√≥w:', error);
    }
  }, [task, materials, materialQuantities, id, currentUser, showSuccess, showError, includeInCosts, consumedBatchPrices]);

  // Funkcja do pobierania aktualnych cen skonsumowanych partii i aktualizacji cen w konsumpcjach
  const updateConsumedMaterialPricesFromBatches = useCallback(async () => {
    if (!task?.consumedMaterials || task.consumedMaterials.length === 0) return;
    
    try {
      const { getInventoryBatch } = await import('../../services/inventory');
      let hasChanges = false;
      const updatedConsumedMaterials = [...task.consumedMaterials];

      // Dla ka≈ºdej konsumpcji, sprawd≈∫ aktualnƒÖ cenƒô partii
      for (let i = 0; i < updatedConsumedMaterials.length; i++) {
        const consumed = updatedConsumedMaterials[i];
        try {
          const batchData = await getInventoryBatch(consumed.batchId);
          if (batchData && batchData.unitPrice) {
            const currentPrice = consumed.unitPrice || 0;
            const newPrice = parseFloat(batchData.unitPrice) || 0;
            
            // Sprawd≈∫ czy cena siƒô zmieni≈Ça przed aktualizacjƒÖ
            if (Math.abs(currentPrice - newPrice) > 0.001) {
              updatedConsumedMaterials[i] = {
                ...consumed,
                unitPrice: newPrice,
                priceUpdatedAt: new Date().toISOString(),
                priceUpdatedFrom: 'batch-price-sync'
              };
              hasChanges = true;
              console.log(`üí∞ [SKONSUMOWANE] Zaktualizowano cenƒô partii ${batchData.batchNumber || consumed.batchId}: ${currentPrice.toFixed(4)}‚Ç¨ -> ${newPrice.toFixed(4)}‚Ç¨`);
            }
          }
        } catch (error) {
          console.error(`B≈ÇƒÖd podczas pobierania danych partii ${consumed.batchId}:`, error);
        }
      }

      // Aktualizuj dane zadania tylko je≈õli wykryto zmiany cen
      if (hasChanges) {
        await updateDoc(doc(db, 'productionTasks', id), {
          consumedMaterials: updatedConsumedMaterials,
          updatedAt: serverTimestamp()
        });
        
        // Zaktualizuj lokalny stan
        setTask(prevTask => ({
          ...prevTask,
          consumedMaterials: updatedConsumedMaterials
        }));
        
        console.log('‚úÖ [SKONSUMOWANE] Zaktualizowano ceny skonsumowanych partii - automatyczna aktualizacja koszt√≥w zostanie uruchomiona');
        // Automatyczna aktualizacja koszt√≥w zostanie wywo≈Çana przez useEffect z dependency na task.consumedMaterials
      }
    } catch (error) {
      console.error('B≈ÇƒÖd podczas aktualizacji cen skonsumowanych partii:', error);
    }
  }, [task?.consumedMaterials, id]);
  
  // Aktualizuj ceny materia≈Ç√≥w przy ka≈ºdym za≈Çadowaniu zadania lub zmianie zarezerwowanych partii
  useEffect(() => {
    if (task && task.materialBatches) {
      // U≈ºywamy referencji do funkcji z pamiƒôciƒÖ podrƒôcznƒÖ useCallback
      let isMounted = true;
      const updatePrices = async () => {
        if (isMounted) {
          await updateMaterialPricesFromBatches();
        }
      };
      
      updatePrices();
      
      return () => {
        isMounted = false;
      };
    }
  }, [task?.id, task?.materialBatches ? Object.keys(task.materialBatches).length : 0, updateMaterialPricesFromBatches]); // Uproszczone zale≈ºno≈õci

  // Aktualizuj ceny skonsumowanych partii przy ka≈ºdym za≈Çadowaniu zadania
  useEffect(() => {
    if (task?.consumedMaterials && task.consumedMaterials.length > 0) {
      // U≈ºywamy referencji do funkcji z pamiƒôciƒÖ podrƒôcznƒÖ useCallback
      let isMounted = true;
      const updateConsumedPrices = async () => {
        if (isMounted) {
          await updateConsumedMaterialPricesFromBatches();
        }
      };
      
      updateConsumedPrices();
      
      return () => {
        isMounted = false;
      };
    }
  }, [task?.id, task?.consumedMaterials ? task.consumedMaterials.length : 0, updateConsumedMaterialPricesFromBatches]); // Reaguje na zmiany liczby konsumpcji

  // Funkcja do aktualizacji zwiƒÖzanych zam√≥wie≈Ñ klient√≥w po zmianie koszt√≥w produkcji
  const updateRelatedCustomerOrders = async (taskData, totalMaterialCost, totalFullProductionCost, unitMaterialCost, unitFullProductionCost) => {
    try {
      if (!taskData || !taskData.id) return;
      
      console.log(`Szukam zam√≥wie≈Ñ klient√≥w powiƒÖzanych z zadaniem ${taskData.moNumber}...`);
      console.log('Dane zadania przekazane do aktualizacji:', { 
        id: taskData.id, 
        moNumber: taskData.moNumber,
        totalMaterialCost,
        totalFullProductionCost 
      });
      
      // Importuj funkcje do zarzƒÖdzania zam√≥wieniami
      const { getAllOrders, updateOrder } = await import('../../services/orderService');
      const { calculateFullProductionUnitCost, calculateProductionUnitCost } = await import('../../utils/costCalculator');
      
      // Pobierz wszystkie zam√≥wienia
      const allOrders = await getAllOrders();
      
      // Znajd≈∫ zam√≥wienia, kt√≥re majƒÖ pozycje powiƒÖzane z tym zadaniem produkcyjnym
      const relatedOrders = allOrders.filter(order => 
        order.items && order.items.some(item => item.productionTaskId === taskData.id)
      );
      
      if (relatedOrders.length === 0) {
        console.log('Nie znaleziono zam√≥wie≈Ñ powiƒÖzanych z tym zadaniem');
        return;
      }
      
      console.log(`Znaleziono ${relatedOrders.length} zam√≥wie≈Ñ do zaktualizowania`);
      
      // Dla ka≈ºdego powiƒÖzanego zam√≥wienia, zaktualizuj koszty produkcji
      for (const order of relatedOrders) {
        let orderUpdated = false;
        const updatedItems = [...order.items];
        
        for (let i = 0; i < updatedItems.length; i++) {
          const item = updatedItems[i];
          
          if (item.productionTaskId === taskData.id) {
            // Oblicz pe≈Çny koszt produkcji na jednostkƒô z uwzglƒôdnieniem logiki listy cenowej
            const calculatedFullProductionUnitCost = calculateFullProductionUnitCost(item, totalFullProductionCost);
            const calculatedProductionUnitCost = calculateProductionUnitCost(item, totalMaterialCost);
            
            // Zaktualizuj koszty w pozycji
            updatedItems[i] = {
              ...item,
              productionCost: totalMaterialCost,
              fullProductionCost: totalFullProductionCost,
              productionUnitCost: calculatedProductionUnitCost,
              fullProductionUnitCost: calculatedFullProductionUnitCost
            };
            orderUpdated = true;
            
            console.log(`Zaktualizowano pozycjƒô "${item.name}" w zam√≥wieniu ${order.orderNumber}: koszt produkcji=${totalMaterialCost}‚Ç¨, pe≈Çny koszt=${totalFullProductionCost}‚Ç¨, pe≈Çny koszt/szt=${calculatedFullProductionUnitCost.toFixed(2)}‚Ç¨ (lista cenowa: ${item.fromPriceList ? 'tak' : 'nie'})`);
          }
        }
        
        if (orderUpdated) {
          // Przelicz nowƒÖ warto≈õƒá zam√≥wienia z uwzglƒôdnieniem zmienionych koszt√≥w produkcji
          const calculateItemTotalValue = (item) => {
            const itemValue = (parseFloat(item.quantity) || 0) * (parseFloat(item.price) || 0);
            
            // Je≈õli produkt jest z listy cenowej I ma cenƒô wiƒôkszƒÖ od 0, zwracamy tylko warto≈õƒá pozycji
            if (item.fromPriceList && parseFloat(item.price || 0) > 0) {
              return itemValue;
            }
            
            // Je≈õli produkt nie jest z listy cenowej LUB ma cenƒô 0, i ma koszt produkcji, dodajemy go
            if (item.productionTaskId && item.productionCost !== undefined) {
              return itemValue + parseFloat(item.productionCost || 0);
            }
            
            return itemValue;
          };

          // Oblicz nowƒÖ warto≈õƒá produkt√≥w
          const subtotal = (updatedItems || []).reduce((sum, item) => {
            return sum + calculateItemTotalValue(item);
          }, 0);

          // Zachowaj pozosta≈Çe sk≈Çadniki warto≈õci zam√≥wienia
          const shippingCost = parseFloat(order.shippingCost) || 0;
          const additionalCosts = order.additionalCostsItems ? 
            order.additionalCostsItems
              .filter(cost => parseFloat(cost.value) > 0)
              .reduce((sum, cost) => sum + (parseFloat(cost.value) || 0), 0) : 0;
          const discounts = order.additionalCostsItems ? 
            Math.abs(order.additionalCostsItems
              .filter(cost => parseFloat(cost.value) < 0)
              .reduce((sum, cost) => sum + (parseFloat(cost.value) || 0), 0)) : 0;

          // Oblicz nowƒÖ ca≈ÇkowitƒÖ warto≈õƒá zam√≥wienia
          const newTotalValue = subtotal + shippingCost + additionalCosts - discounts;

          // Zaktualizuj zam√≥wienie w bazie danych - przeka≈º tylko niezbƒôdne pola
          const updateData = {
            items: updatedItems,
            // Zaktualizowana warto≈õƒá zam√≥wienia
            totalValue: newTotalValue,
            // Zachowaj podstawowe pola wymagane przez walidacjƒô
            orderNumber: order.orderNumber,
            orderDate: order.orderDate, // Wymagane przez walidacjƒô
            status: order.status,
            // Inne pola kt√≥re sƒÖ bezpieczne
            customer: order.customer,
            shippingCost: order.shippingCost,
            additionalCostsItems: order.additionalCostsItems,
            productionTasks: order.productionTasks,
            linkedPurchaseOrders: order.linkedPurchaseOrders
          };
          
          console.log(`Aktualizujƒô zam√≥wienie ${order.orderNumber} z danymi:`, {
            ...updateData,
            orderDate: updateData.orderDate ? 'obecna' : 'brak',
            itemsCount: updateData.items ? updateData.items.length : 0,
            oldTotalValue: order.totalValue,
            newTotalValue: newTotalValue
          });
          console.log(`UserID do aktualizacji: ${currentUser?.uid || 'brak'}`);
          await updateOrder(order.id, updateData, currentUser?.uid || 'system');
          
          console.log(`Zaktualizowano zam√≥wienie ${order.orderNumber} - warto≈õƒá zmieniona z ${order.totalValue}‚Ç¨ na ${newTotalValue}‚Ç¨`);
        }
      }
      
      showInfo(`Zaktualizowano koszty produkcji w ${relatedOrders.length} powiƒÖzanych zam√≥wieniach`);
      
    } catch (error) {
      console.error('B≈ÇƒÖd podczas aktualizacji powiƒÖzanych zam√≥wie≈Ñ:', error);
      showError('Nie uda≈Ço siƒô zaktualizowaƒá powiƒÖzanych zam√≥wie≈Ñ: ' + error.message);
    }
  };

  // Funkcja do rƒôcznej aktualizacji koszt√≥w materia≈Ç√≥w w bazie danych
  const updateMaterialCostsManually = async () => {
    if (!task || !materials.length) return;
    
    try {
      console.log('Rƒôczna aktualizacja koszt√≥w materia≈Ç√≥w z poziomu szczeg√≥≈Ç√≥w zadania');
      
      // U≈ºyj globalnej funkcji aktualizacji z productionService
      const { updateTaskCostsAutomatically } = await import('../../services/productionService');
      const result = await updateTaskCostsAutomatically(task.id, currentUser?.uid || 'system', 'Rƒôczna aktualizacja z poziomu szczeg√≥≈Ç√≥w zadania');
      
      if (result.success) {
      // Od≈õwie≈º dane zadania, aby wy≈õwietliƒá zaktualizowane koszty
      const updatedTask = await getTaskById(id);
      setTask(updatedTask);
        showSuccess('Koszty materia≈Ç√≥w i powiƒÖzanych zam√≥wie≈Ñ zosta≈Çy zaktualizowane');
        console.log('‚úÖ Rƒôczna aktualizacja koszt√≥w zako≈Ñczona pomy≈õlnie:', result);
      } else {
        console.warn('‚ö†Ô∏è Aktualizacja koszt√≥w nie by≈Ça potrzebna:', result.message);
        showInfo('Koszty materia≈Ç√≥w sƒÖ ju≈º aktualne');
      }

    } catch (error) {
      console.error('B≈ÇƒÖd podczas rƒôcznej aktualizacji koszt√≥w materia≈Ç√≥w:', error);
      showError('Nie uda≈Ço siƒô zaktualizowaƒá koszt√≥w materia≈Ç√≥w: ' + error.message);
    }
  };

  // Nowa funkcja do automatycznej aktualizacji koszt√≥w w tle po zmianach
  const updateMaterialCostsAutomatically = async (reason = 'Automatyczna aktualizacja po zmianie materia≈Ç√≥w') => {
    if (!task || !materials.length) return;
    
    try {
      // Oblicz wszystkie koszty jednƒÖ funkcjƒÖ
      const {
        totalMaterialCost,
        unitMaterialCost,
        totalFullProductionCost,
        unitFullProductionCost
      } = calculateAllCosts();
      

      
      // Sprawd≈∫ czy koszty siƒô rzeczywi≈õcie zmieni≈Çy (ni≈ºszy pr√≥g dla automatycznej aktualizacji)
      const costChanged = 
        Math.abs((task.totalMaterialCost || 0) - totalMaterialCost) > 0.001 ||
        Math.abs((task.unitMaterialCost || 0) - unitMaterialCost) > 0.001 ||
        Math.abs((task.totalFullProductionCost || 0) - totalFullProductionCost) > 0.001 ||
        Math.abs((task.unitFullProductionCost || 0) - unitFullProductionCost) > 0.001;

      if (!costChanged) {
        console.log('[AUTO] Koszty materia≈Ç√≥w nie zmieni≈Çy siƒô znaczƒÖco, pomijam automatycznƒÖ aktualizacjƒô');
        return false;
      }
      
      // Wykonaj aktualizacjƒô w bazie danych
      const taskRef = doc(db, 'productionTasks', id);
      await updateDoc(taskRef, {
        totalMaterialCost,
        unitMaterialCost,
        totalFullProductionCost,
        unitFullProductionCost,
        costLastUpdatedAt: serverTimestamp(),
        costLastUpdatedBy: currentUser.uid,
        updatedAt: serverTimestamp(),
        updatedBy: currentUser.uid,
        // Dodaj wpis do historii koszt√≥w
        costHistory: arrayUnion({
          timestamp: new Date().toISOString(),
          userId: currentUser.uid,
          userName: currentUser.displayName || currentUser.email || 'System',
          previousTotalCost: task.totalMaterialCost || 0,
          newTotalCost: totalMaterialCost,
          previousUnitCost: task.unitMaterialCost || 0,
          newUnitCost: unitMaterialCost,
          previousFullProductionCost: task.totalFullProductionCost || 0,
          newFullProductionCost: totalFullProductionCost,
          previousUnitFullProductionCost: task.unitFullProductionCost || 0,
          newUnitFullProductionCost: unitFullProductionCost,
          reason: reason
        })
      });
      
      console.log(`[AUTO] Zaktualizowano koszty materia≈Ç√≥w w zadaniu: ${totalMaterialCost.toFixed(2)} ‚Ç¨ (${unitMaterialCost.toFixed(2)} ‚Ç¨/${task.unit}) | Pe≈Çny koszt: ${totalFullProductionCost.toFixed(2)} ‚Ç¨ (${unitFullProductionCost.toFixed(2)} ‚Ç¨/${task.unit})`);
      
      // Automatycznie aktualizuj zwiƒÖzane zam√≥wienia klient√≥w
      await updateRelatedCustomerOrders(task, totalMaterialCost, totalFullProductionCost, unitMaterialCost, unitFullProductionCost);
      
      // Aktualizuj lokalny stan zadania
      setTask(prevTask => ({
        ...prevTask,
        totalMaterialCost,
        unitMaterialCost,
        totalFullProductionCost,
        unitFullProductionCost,
        costLastUpdatedAt: new Date(),
        costLastUpdatedBy: currentUser.uid
      }));

      return true;
    } catch (error) {
      console.error('[AUTO] B≈ÇƒÖd podczas automatycznej aktualizacji koszt√≥w materia≈Ç√≥w:', error);
      return false;
    }
  };

  // ZUNIFIKOWANA FUNKCJA do obliczania wszystkich koszt√≥w (kompatybilna z productionService)
  const calculateAllCosts = async (customConsumedMaterials = null, customMaterialBatches = null) => {
    try {
      // Obliczanie koszt√≥w w UI
      
      // Import funkcji matematycznych dla precyzyjnych oblicze≈Ñ
      const { fixFloatingPointPrecision, preciseMultiply, preciseAdd, preciseSubtract, preciseDivide } = await import('../../utils/mathUtils');
      
      // U≈ºywaj ju≈º istniejƒÖcych import√≥w Firebase z g√≥ry pliku
      // const { doc, getDoc } = await import('firebase/firestore'); - ju≈º zaimportowane statycznie
      // const { db } = await import('../../services/firebase/config'); - ju≈º zaimportowane statycznie
      
      const currentConsumedMaterials = customConsumedMaterials || task?.consumedMaterials || [];
      const currentMaterialBatches = customMaterialBatches || task?.materialBatches || {};
      
      let totalMaterialCost = 0;
      let totalFullProductionCost = 0;

      // ===== 1. KOSZTY SKONSUMOWANYCH MATERIA≈Å√ìW (zunifikowana logika) =====
      const consumedCostDetails = {};
      
      if (currentConsumedMaterials.length > 0) {
        // Przetwarzanie skonsumowanych materia≈Ç√≥w
        
        // Pobierz aktualne ceny partii dla skonsumowanych materia≈Ç√≥w
        const uniqueBatchIds = [...new Set(
          currentConsumedMaterials
            .filter(consumed => consumed.batchId)
            .map(consumed => consumed.batchId)
        )];
        
        // Pobieranie cen partii
        
        const consumedBatchPricesCache = {};
        const batchPromises = uniqueBatchIds.map(async (batchId) => {
          try {
            const batchRef = doc(db, 'inventoryBatches', batchId);
            const batchDoc = await getDoc(batchRef);
            if (batchDoc.exists()) {
              const batchData = batchDoc.data();
              const price = fixFloatingPointPrecision(parseFloat(batchData.unitPrice) || 0);
              consumedBatchPricesCache[batchId] = price;
              // Pobrana cena partii ${batchId}
            } else {
              consumedBatchPricesCache[batchId] = 0;
              console.warn(`‚ö†Ô∏è [UI-COSTS] Nie znaleziono partii ${batchId}`);
            }
          } catch (error) {
            console.warn(`‚ö†Ô∏è [UI-COSTS] B≈ÇƒÖd podczas pobierania ceny skonsumowanej partii ${batchId}:`, error);
            consumedBatchPricesCache[batchId] = 0;
          }
        });
        
        await Promise.all(batchPromises);
        
        for (const consumed of currentConsumedMaterials) {
          const materialId = consumed.materialId;
          const material = materials.find(m => (m.inventoryItemId || m.id) === materialId);
          
          if (!material) continue;

          if (!consumedCostDetails[materialId]) {
            consumedCostDetails[materialId] = {
              material,
              totalQuantity: 0,
              totalCost: 0,
              batches: []
            };
          }

          // Hierarchia cen: consumed.unitPrice ‚Üí consumedBatchPrices[batchId] ‚Üí material.unitPrice
          let unitPrice = 0;
          let priceSource = 'fallback';

          if (consumed.unitPrice !== undefined && consumed.unitPrice > 0) {
            unitPrice = fixFloatingPointPrecision(parseFloat(consumed.unitPrice));
            priceSource = 'consumed-record';
          } else if (consumed.batchId && consumedBatchPricesCache[consumed.batchId] > 0) {
            unitPrice = consumedBatchPricesCache[consumed.batchId];
            priceSource = 'batch-current-ui';
          } else if (material.unitPrice > 0) {
            unitPrice = fixFloatingPointPrecision(parseFloat(material.unitPrice));
            priceSource = 'material-fallback';
          }

          const quantity = fixFloatingPointPrecision(parseFloat(consumed.quantity) || 0);
          const cost = preciseMultiply(quantity, unitPrice);

          // Obliczono koszt dla ${material.name}

          consumedCostDetails[materialId].totalQuantity = preciseAdd(
            consumedCostDetails[materialId].totalQuantity, 
            quantity
          );
          consumedCostDetails[materialId].totalCost = preciseAdd(
            consumedCostDetails[materialId].totalCost, 
            cost
          );
          consumedCostDetails[materialId].batches.push({
            batchId: consumed.batchId,
            quantity,
            unitPrice,
            cost,
            priceSource
          });

          // Sprawd≈∫ czy konsumpcja ma byƒá wliczona do koszt√≥w
          const shouldIncludeInCosts = consumed.includeInCosts !== undefined 
            ? consumed.includeInCosts 
            : (includeInCosts[material.id] !== false);

          console.log(`üîç [UI-COSTS] Materia≈Ç ${material.name} - includeInCosts: ${shouldIncludeInCosts}`);

          if (shouldIncludeInCosts) {
            totalMaterialCost = preciseAdd(totalMaterialCost, cost);
          }

          // Zawsze dodaj do pe≈Çnego kosztu produkcji
          totalFullProductionCost = preciseAdd(totalFullProductionCost, cost);
        }
      }

      // ===== 2. KOSZTY ZAREZERWOWANYCH (NIESKONSUMOWANYCH) MATERIA≈Å√ìW =====
      const reservedCostDetails = {};

      if (materials.length > 0) {
        // Przetwarzanie zarezerwowanych partii
        
        // Pobierz wszystkie unikalne ID partii z zarezerwowanych materia≈Ç√≥w
        const allReservedBatchIds = [];
        Object.values(currentMaterialBatches).forEach(batches => {
          if (Array.isArray(batches)) {
            batches.forEach(batch => {
              if (batch.batchId) allReservedBatchIds.push(batch.batchId);
            });
          }
        });
        
        const uniqueReservedBatchIds = [...new Set(allReservedBatchIds)];
        // Pobieranie cen zarezerwowanych partii
        
        const batchPricesCache = {};
        
        // Pobierz wszystkie ceny partii r√≥wnolegle
        const reservedBatchPromises = uniqueReservedBatchIds.map(async (batchId) => {
          try {
            const batchRef = doc(db, 'inventoryBatches', batchId);
            const batchDoc = await getDoc(batchRef);
            if (batchDoc.exists()) {
              const batchData = batchDoc.data();
              const price = fixFloatingPointPrecision(parseFloat(batchData.unitPrice) || 0);
              batchPricesCache[batchId] = price;
              // Pobrana cena zarezerwowanej partii
            } else {
              batchPricesCache[batchId] = 0;
              console.warn(`‚ö†Ô∏è [UI-COSTS] Nie znaleziono zarezerwowanej partii ${batchId}`);
            }
          } catch (error) {
            console.warn(`‚ö†Ô∏è [UI-COSTS] B≈ÇƒÖd podczas pobierania ceny zarezerwowanej partii ${batchId}:`, error);
            batchPricesCache[batchId] = 0;
          }
        });
        
        await Promise.all(reservedBatchPromises);

        materials.forEach(material => {
          const materialId = material.inventoryItemId || material.id;
          const reservedBatches = currentMaterialBatches[materialId];
          
          if (!reservedBatches || !reservedBatches.length) return;

          // Oblicz ile zosta≈Ço do skonsumowania z precyzyjnymi obliczeniami
          const consumedQuantity = currentConsumedMaterials
            .filter(consumed => consumed.materialId === materialId)
            .reduce((sum, consumed) => {
              const qty = fixFloatingPointPrecision(parseFloat(consumed.quantity) || 0);
              return preciseAdd(sum, qty);
            }, 0);
          
          const requiredQuantity = fixFloatingPointPrecision(
            parseFloat(materialQuantities[material.id] || material.quantity) || 0
          );
          const remainingQuantity = Math.max(0, preciseSubtract(requiredQuantity, consumedQuantity));
          
          if (remainingQuantity > 0) {
            // ${material.name}: ${remainingQuantity} pozosta≈Çe
            
            // ‚úÖ NOWA LOGIKA: Oblicz ≈õredniƒÖ wa≈ºonƒÖ cenƒô z zarezerwowanych partii (jak w productionService)
            let weightedPriceSum = 0;
            let totalBatchQuantity = 0;
            
            reservedBatches.forEach(batch => {
              const batchQuantity = fixFloatingPointPrecision(parseFloat(batch.quantity) || 0);
              let batchPrice = 0;
              let priceSource = 'fallback';
              
              // Hierarchia cen: aktualna z bazy ‚Üí zapisana w partii ‚Üí fallback z materia≈Çu
              if (batch.batchId && batchPricesCache[batch.batchId] > 0) {
                batchPrice = batchPricesCache[batch.batchId];
                priceSource = 'batch-current-ui';
              } else if (batch.unitPrice > 0) {
                batchPrice = fixFloatingPointPrecision(parseFloat(batch.unitPrice));
                priceSource = 'batch-stored';
              } else if (material.unitPrice > 0) {
                batchPrice = fixFloatingPointPrecision(parseFloat(material.unitPrice));
                priceSource = 'material-fallback';
              }
              
              if (batchQuantity > 0 && batchPrice > 0) {
                const weightedPrice = preciseMultiply(batchPrice, batchQuantity);
                weightedPriceSum = preciseAdd(weightedPriceSum, weightedPrice);
                totalBatchQuantity = preciseAdd(totalBatchQuantity, batchQuantity);
                // Partia ${batch.batchId}: ${batchQuantity} √ó ${batchPrice}‚Ç¨
              }
            });
            
            // Oblicz koszt materia≈Çu
            let materialCost = 0;
            let unitPrice = 0;
            let priceCalculationMethod = 'fallback';
            
            if (totalBatchQuantity > 0) {
              unitPrice = preciseDivide(weightedPriceSum, totalBatchQuantity);
              materialCost = preciseMultiply(remainingQuantity, unitPrice);
              priceCalculationMethod = 'weighted-average';
              // ≈örednia cena dla ${material.name}: ${unitPrice.toFixed(2)}‚Ç¨
            } else {
              // Fallback na cenƒô z materia≈Çu
              unitPrice = fixFloatingPointPrecision(parseFloat(material.unitPrice) || 0);
              materialCost = preciseMultiply(remainingQuantity, unitPrice);
              priceCalculationMethod = 'material-fallback';
              // Fallback cena dla ${material.name}: ${unitPrice}‚Ç¨
            }
            
            reservedCostDetails[materialId] = {
              material,
              quantity: remainingQuantity,
              unitPrice,
              cost: materialCost,
              priceCalculationMethod,
              batchesUsed: reservedBatches.length
            };
            
            // Sprawd≈∫ czy materia≈Ç ma byƒá wliczony do koszt√≥w
            const shouldIncludeInCosts = includeInCosts[material.id] !== false;
            // ${material.name} w kosztach: ${shouldIncludeInCosts}
            
            if (shouldIncludeInCosts) {
              totalMaterialCost = preciseAdd(totalMaterialCost, materialCost);
            }

            // Zawsze dodaj do pe≈Çnego kosztu produkcji
            totalFullProductionCost = preciseAdd(totalFullProductionCost, materialCost);
          }
        });
      }

      // ===== 3. OBLICZ KOSZTY NA JEDNOSTKƒò =====
      const taskQuantity = fixFloatingPointPrecision(parseFloat(task?.quantity) || 1);
      const unitMaterialCost = taskQuantity > 0 ? preciseDivide(totalMaterialCost, taskQuantity) : 0;
      const unitFullProductionCost = taskQuantity > 0 ? preciseDivide(totalFullProductionCost, taskQuantity) : 0;

      // Aplikuj korektƒô precyzji na finalne wyniki
      const finalResults = {
        consumed: {
          totalCost: fixFloatingPointPrecision(
            Object.values(consumedCostDetails).reduce((sum, item) => preciseAdd(sum, item.totalCost || 0), 0)
          ),
          details: consumedCostDetails
        },
        reserved: {
          totalCost: fixFloatingPointPrecision(
            Object.values(reservedCostDetails).reduce((sum, item) => preciseAdd(sum, item.cost || 0), 0)
          ),
          details: reservedCostDetails
        },
        totalMaterialCost: fixFloatingPointPrecision(totalMaterialCost),
        unitMaterialCost: fixFloatingPointPrecision(unitMaterialCost),
        totalFullProductionCost: fixFloatingPointPrecision(totalFullProductionCost),
        unitFullProductionCost: fixFloatingPointPrecision(unitFullProductionCost)
      };

      console.log('‚úÖ [UI-COSTS] Zako≈Ñczono zunifikowane obliczanie koszt√≥w w UI:', {
        totalMaterialCost: finalResults.totalMaterialCost,
        unitMaterialCost: finalResults.unitMaterialCost,
        totalFullProductionCost: finalResults.totalFullProductionCost,
        unitFullProductionCost: finalResults.unitFullProductionCost,
        consumedCost: finalResults.consumed.totalCost,
        reservedCost: finalResults.reserved.totalCost
      });

      return finalResults;

    } catch (error) {
      console.error('‚ùå [UI-COSTS] B≈ÇƒÖd podczas zunifikowanego obliczania koszt√≥w w UI:', error);
      // Fallback na zero values
      return {
        consumed: { totalCost: 0, details: {} },
        reserved: { totalCost: 0, details: {} },
        totalMaterialCost: 0,
        unitMaterialCost: 0,
        totalFullProductionCost: 0,
        unitFullProductionCost: 0
      };
    }
  };

  // Funkcja do por√≥wnywania koszt√≥w miƒôdzy UI a bazƒÖ danych
  // NAPRAWIONA funkcja por√≥wnania koszt√≥w - przyjmuje uiCosts jako parametr aby uniknƒÖƒá pƒôtli
  const compareCostsWithDatabase = async (providedUiCosts = null) => {
    try {
      console.log('üîç [COST-COMPARE] Por√≥wnujƒô koszty UI vs baza danych');
      
      // Je≈õli nie podano koszt√≥w UI, oblicz je (ale tylko raz!)
      const uiCosts = providedUiCosts || await calculateAllCosts();
      
      // Pobierz ≈õwie≈ºe dane z bazy danych
      const { getTaskById } = await import('../../services/productionService');
      const freshTask = await getTaskById(task.id);
      
      const dbCosts = {
        totalMaterialCost: freshTask?.totalMaterialCost || 0,
        unitMaterialCost: freshTask?.unitMaterialCost || 0,
        totalFullProductionCost: freshTask?.totalFullProductionCost || 0,
        unitFullProductionCost: freshTask?.unitFullProductionCost || 0
      };
      
      const differences = {
        totalMaterialCost: Math.abs(uiCosts.totalMaterialCost - dbCosts.totalMaterialCost),
        unitMaterialCost: Math.abs(uiCosts.unitMaterialCost - dbCosts.unitMaterialCost),
        totalFullProductionCost: Math.abs(uiCosts.totalFullProductionCost - dbCosts.totalFullProductionCost),
        unitFullProductionCost: Math.abs(uiCosts.unitFullProductionCost - dbCosts.unitFullProductionCost)
      };
      
      console.log('üìä [COST-COMPARE] Por√≥wnanie koszt√≥w (UI vs ≈õwie≈ºe dane z bazy):', {
        ui: uiCosts,
        freshDatabase: dbCosts,
        currentTaskObject: {
          totalMaterialCost: task?.totalMaterialCost || 0,
          unitMaterialCost: task?.unitMaterialCost || 0,
          totalFullProductionCost: task?.totalFullProductionCost || 0,
          unitFullProductionCost: task?.unitFullProductionCost || 0
        },
        differences,
        maxDifference: Math.max(...Object.values(differences))
      });
      
      return { uiCosts, dbCosts, differences };
    } catch (error) {
      console.error('‚ùå [COST-COMPARE] B≈ÇƒÖd podczas por√≥wnywania koszt√≥w:', error);
      return null;
    }
  };

  // JEDNORAZOWA funkcja synchronizacji koszt√≥w (bez pƒôtli)
  const syncCostsOnce = async () => {
    try {
      console.log('üîÑ [SYNC-ONCE] Rozpoczynam jednorazowƒÖ synchronizacjƒô koszt√≥w');
      
      // 1. Oblicz koszty UI
      const uiCosts = await calculateAllCosts();
      
      // 2. Por√≥wnaj z bazƒÖ danych (przeka≈º uiCosts aby uniknƒÖƒá ponownego obliczania)
      const comparison = await compareCostsWithDatabase(uiCosts);
      if (!comparison) return;
      
      const { dbCosts, differences } = comparison;
      const maxDifference = Math.max(...Object.values(differences));
      const COST_TOLERANCE = 0.005;
      
      if (maxDifference > COST_TOLERANCE) {
        console.log(`üö® [SYNC-ONCE] Wykryto r√≥≈ºnicƒô ${maxDifference.toFixed(4)}‚Ç¨ > ${COST_TOLERANCE}‚Ç¨ - synchronizujƒô`);
        
        // 3. Synchronizuj z bazƒÖ danych
        const { updateTaskCostsAutomatically } = await import('../../services/productionService');
        const result = await updateTaskCostsAutomatically(
          task.id, 
          currentUser?.uid || 'system', 
          'Jednorazowa synchronizacja koszt√≥w'
        );
        
        if (result.success) {
          // 4. Od≈õwie≈º dane zadania
          const { getTaskById } = await import('../../services/productionService');
          const updatedTask = await getTaskById(task.id);
          setTask(updatedTask);
          console.log('‚úÖ [SYNC-ONCE] Synchronizacja zako≈Ñczona pomy≈õlnie');
        } else {
          console.warn('‚ö†Ô∏è [SYNC-ONCE] Synchronizacja nie powiod≈Ça siƒô:', result);
        }
      } else {
        console.log(`‚úÖ [SYNC-ONCE] Koszty zsynchronizowane (r√≥≈ºnica: ${maxDifference.toFixed(4)}‚Ç¨ ‚â§ ${COST_TOLERANCE}‚Ç¨)`);
      }
    } catch (error) {
      console.error('‚ùå [SYNC-ONCE] B≈ÇƒÖd podczas synchronizacji:', error);
    }
  };

  // Zachowane funkcje dla kompatybilno≈õci wstecznej (u≈ºywajƒÖ calculateAllCosts)
  const calculateConsumedMaterialsCost = async () => {
    const costs = await calculateAllCosts();
    return costs.consumed;
  };

  // Funkcja do obliczania koszt√≥w zarezerwowanych (ale nieskonsumowanych) materia≈Ç√≥w
  const calculateReservedMaterialsCost = async () => {
    const costs = await calculateAllCosts();
    return costs.reserved;
  };

  // State dla koszt√≥w w renderMaterialCostsSummary
  const [costsSummary, setCostsSummary] = useState({
    consumed: { totalCost: 0, details: {} },
    reserved: { totalCost: 0, details: {} },
    totalMaterialCost: 0,
    unitMaterialCost: 0,
    totalFullProductionCost: 0,
    unitFullProductionCost: 0
  });

  // Effect do aktualizacji podsumowania koszt√≥w
  useEffect(() => {
    const updateCostsSummary = async () => {
      try {
        const costs = await calculateAllCosts();
        setCostsSummary(costs);
      } catch (error) {
        console.error('B≈ÇƒÖd podczas aktualizacji podsumowania koszt√≥w:', error);
      }
    };

    if (task?.id && materials.length > 0) {
      updateCostsSummary();
    }
  }, [task?.consumedMaterials, task?.materialBatches, materialQuantities, includeInCosts, materials, consumedBatchPrices]);

  const renderMaterialCostsSummary = () => {
    const {
      consumed: consumedCosts,
      reserved: reservedCosts,
      totalMaterialCost,
      unitMaterialCost,
      totalFullProductionCost,
      unitFullProductionCost
    } = costsSummary;
    
    // Sprawd≈∫ czy koszty uleg≈Çy zmianie
    const costChanged = 
      Math.abs((task.totalMaterialCost || 0) - totalMaterialCost) > 0.01 ||
      Math.abs((task.unitMaterialCost || 0) - unitMaterialCost) > 0.01 ||
      Math.abs((task.totalFullProductionCost || 0) - totalFullProductionCost) > 0.01 ||
      Math.abs((task.unitFullProductionCost || 0) - unitFullProductionCost) > 0.01;
    
    return (
      <Box sx={{ mt: 2, p: 2, bgcolor: 'background.default', borderRadius: 1 }}>
        <Grid container spacing={2}>
          <Grid item xs={12} md={6}>
            <Typography variant="h6">{t('materialsSummary.title')}</Typography>
            {costChanged && (
              <Alert severity="info" sx={{ mt: 1 }}>
                {t('materialsSummary.costChanged')}
              </Alert>
            )}
            {consumedCosts.totalCost > 0 && (
              <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                {t('materialsSummary.consumed')}: {consumedCosts.totalCost.toFixed(2)} ‚Ç¨ | 
                {t('materialsSummary.reserved')}: {reservedCosts.totalCost.toFixed(2)} ‚Ç¨
              </Typography>
            )}
          </Grid>
          <Grid item xs={12} md={6} sx={{ textAlign: 'right' }}>
            <Typography variant="body1">
              <strong>{t('materialsSummary.totalCost')}:</strong> {totalMaterialCost.toFixed(2)} ‚Ç¨
              {task.totalMaterialCost !== undefined && costChanged && (
                <Typography variant="caption" color="text.secondary" sx={{ ml: 1 }}>
                  (W bazie: {task.totalMaterialCost.toFixed(2)} ‚Ç¨)
                </Typography>
              )}
            </Typography>
            <Typography variant="body1">
              <strong>{t('materialsSummary.unitCost')}:</strong> ~{unitMaterialCost.toFixed(4)} ‚Ç¨/{task.unit}
              {task.unitMaterialCost !== undefined && costChanged && (
                <Typography variant="caption" color="text.secondary" sx={{ ml: 1 }}>
                  (W bazie: ~{task.unitMaterialCost.toFixed(4)} ‚Ç¨/{task.unit})
                </Typography>
              )}
            </Typography>
            <Typography variant="body1" sx={{ mt: 1, color: 'primary.main' }}>
              <strong>Pe≈Çny koszt produkcji:</strong> {totalFullProductionCost.toFixed(2)} ‚Ç¨
              {task.totalFullProductionCost !== undefined && costChanged && (
                <Typography variant="caption" color="text.secondary" sx={{ ml: 1 }}>
                  (W bazie: {task.totalFullProductionCost.toFixed(2)} ‚Ç¨)
                </Typography>
              )}
            </Typography>
            <Typography variant="body1" sx={{ color: 'primary.main' }}>
              <strong>Pe≈Çny koszt na jednostkƒô:</strong> ~{unitFullProductionCost.toFixed(4)} ‚Ç¨/{task.unit}
              {task.unitFullProductionCost !== undefined && costChanged && (
                <Typography variant="caption" color="text.secondary" sx={{ ml: 1 }}>
                  (W bazie: ~{task.unitFullProductionCost.toFixed(4)} ‚Ç¨/{task.unit})
                </Typography>
              )}
            </Typography>
            {costChanged && (
              <Button 
                variant="outlined" 
                color="primary" 
                startIcon={<SaveIcon />}
                onClick={updateMaterialCostsManually}
                sx={{ mt: 1 }}
                size="small"
              >
                {t('materialsSummary.updateManually')}
              </Button>
            )}
          </Grid>
        </Grid>
      </Box>
    );
  };

  // Funkcja do usuwania wpisu historii produkcji
  const handleDeleteHistoryItem = (item) => {
    setDeleteHistoryItem(item);
    setDeleteHistoryDialogOpen(true);
  };
  
  // Funkcja do obs≈Çugi potwierdzenia usuniƒôcia
  const handleConfirmDeleteHistoryItem = async () => {
    try {
      setLoading(true);
      
      if (!deleteHistoryItem || !deleteHistoryItem.id) {
        showError('Nie mo≈ºna usunƒÖƒá sesji produkcyjnej: brak identyfikatora');
        return;
      }
      
      // Wywo≈Çaj funkcjƒô usuwajƒÖcƒÖ sesjƒô produkcyjnƒÖ
      await deleteProductionSession(deleteHistoryItem.id, currentUser.uid);
      
      showSuccess('Sesja produkcyjna zosta≈Ça usuniƒôta');
      
      // Od≈õwie≈º dane historii produkcji i zadania
      await fetchProductionHistory();
      await fetchTask();
      
    } catch (error) {
      console.error('B≈ÇƒÖd podczas usuwania sesji produkcyjnej:', error);
      showError('Nie uda≈Ço siƒô usunƒÖƒá sesji produkcyjnej: ' + error.message);
    } finally {
      setLoading(false);
      setDeleteHistoryDialogOpen(false);
      setDeleteHistoryItem(null);
    }
  };

  // Funkcja do filtrowania opakowa≈Ñ na podstawie wyszukiwania
  const filteredPackagingItems = packagingItems.filter(item => 
    item.name.toLowerCase().includes(searchPackaging.toLowerCase())
  );

  // Funkcja obs≈ÇugujƒÖca zmianƒô stanu checkboxa dla wliczania do koszt√≥w
  const handleIncludeInCostsChange = async (materialId, checked) => {
    try {
      // Aktualizujemy stan lokalnie
      setIncludeInCosts(prev => ({
        ...prev,
        [materialId]: checked
      }));
      
      // Aktualizacja w bazie danych
      if (task?.id) {
        const taskRef = doc(db, 'productionTasks', task.id);
        await updateDoc(taskRef, {
          [`materialInCosts.${materialId}`]: checked
        });
        
        showSuccess('Zaktualizowano ustawienia koszt√≥w');
        
        // Automatyczna aktualizacja koszt√≥w zostanie wykonana przez productionService.updateTask
      }
    } catch (error) {
      console.error('B≈ÇƒÖd podczas aktualizacji ustawie≈Ñ koszt√≥w:', error);
      showError('Nie uda≈Ço siƒô zaktualizowaƒá ustawie≈Ñ koszt√≥w');
    }
  };

  // Nowa funkcja do pobierania oczekiwanych zam√≥wie≈Ñ dla materia≈Ç√≥w
  const fetchAwaitingOrdersForMaterials = async () => {
    try {
      if (!task || !task.materials) return;
      setAwaitingOrdersLoading(true);
      
      const ordersData = {};
      
      for (const material of task.materials) {
        const materialId = material.inventoryItemId || material.id;
        if (!materialId) continue;
        
        try {
          const { getAwaitingOrdersForInventoryItem } = await import('../../services/inventory');
          const materialOrders = await getAwaitingOrdersForInventoryItem(materialId);
          

          
          if (materialOrders.length > 0) {
            ordersData[materialId] = materialOrders;
          } else {
            ordersData[materialId] = [];
          }
        } catch (error) {
          console.error(`B≈ÇƒÖd podczas pobierania oczekiwanych zam√≥wie≈Ñ dla materia≈Çu ${materialId}:`, error);
          ordersData[materialId] = [];
        }
      }
      
      setAwaitingOrders(ordersData);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania oczekiwanych zam√≥wie≈Ñ dla materia≈Ç√≥w:', error);
      showError('Nie uda≈Ço siƒô pobraƒá informacji o oczekiwanych zam√≥wieniach');
    } finally {
      setAwaitingOrdersLoading(false);
    }
  };

  // Funkcja pomocnicza do formatowania daty
  const formatDateToLocal = (dateString) => {
    if (!dateString) return 'Nie okre≈õlono';
    const date = new Date(dateString);
    return date.toLocaleDateString('pl-PL', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  // Funkcja obs≈ÇugujƒÖca zmianƒô zak≈Çadki materia≈Ç√≥w
  const handleMaterialTabChange = (event, newValue) => {
    setMaterialTab(newValue);
  };

  // Funkcja do obs≈Çugi zmiany ilo≈õci partii
  const handleBatchQuantityChange = (materialId, batchId, value) => {
    const numValue = value === '' ? '' : Number(value);
    if (value === '' || (!isNaN(numValue) && numValue >= 0)) {
      setManualBatchQuantities(prev => ({
        ...prev,
        [materialId]: {
          ...(prev[materialId] || {}),
          [batchId]: numValue
        }
      }));
    }
  };

  // Funkcja do pobierania odpowiedzi formularzy powiƒÖzanych z zadaniem
  const handleProductionControlFormSuccess = (formData) => {
    showSuccess('Formularz kontroli produkcji zosta≈Ç zapisany pomy≈õlnie!');
    // Od≈õwie≈º formularze produkcyjne dla tego zadania
    if (task?.moNumber) {
      fetchFormResponses(task.moNumber);
    }
  };

  const handleCompletedMOFormSuccess = (formData) => {
    showSuccess('Raport zako≈Ñczonego MO zosta≈Ç zapisany pomy≈õlnie!');
    // Od≈õwie≈º formularze produkcyjne dla tego zadania
    if (task?.moNumber) {
      fetchFormResponses(task.moNumber);
    }
  };

  const handleProductionShiftFormSuccess = (formData) => {
    showSuccess('Raport zmiany produkcyjnej zosta≈Ç zapisany pomy≈õlnie!');
    // Od≈õwie≈º formularze produkcyjne dla tego zadania
    if (task?.moNumber) {
      fetchFormResponses(task.moNumber);
    }
  };

  const fetchFormResponses = async (moNumber) => {
    if (!moNumber) return;
    
    setLoadingFormResponses(true);
    try {
      // ‚úÖ OPTYMALIZACJA: R√≥wnoleg≈Çe pobieranie z limitami i sortowaniem
      const [completedMOSnapshot, controlSnapshot, shiftSnapshot] = await Promise.all([
        getDocs(query(
          collection(db, 'Forms/SkonczoneMO/Odpowiedzi'), 
          where('moNumber', '==', moNumber),
          orderBy('date', 'desc'), // Sortowanie od najnowszych
          limit(50) // Limit ostatnich 50 odpowiedzi
        )),
        getDocs(query(
          collection(db, 'Forms/KontrolaProdukcji/Odpowiedzi'), 
          where('manufacturingOrder', '==', moNumber),
          orderBy('fillDate', 'desc'), // Sortowanie od najnowszych
          limit(50) // Limit ostatnich 50 odpowiedzi
        )),
        getDocs(query(
          collection(db, 'Forms/ZmianaProdukcji/Odpowiedzi'), 
          where('moNumber', '==', moNumber),
          orderBy('fillDate', 'desc'), // Sortowanie od najnowszych
          limit(50) // Limit ostatnich 50 odpowiedzi
        ))
      ]);

      const completedMOData = completedMOSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        date: doc.data().date?.toDate(),
        formType: 'completedMO'
      }));

      const controlData = controlSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        fillDate: doc.data().fillDate?.toDate(),
        productionStartDate: doc.data().productionStartDate?.toDate(),
        productionEndDate: doc.data().productionEndDate?.toDate(),
        readingDate: doc.data().readingDate?.toDate(),
        formType: 'productionControl'
      }));

      const shiftData = shiftSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        fillDate: doc.data().fillDate?.toDate(),
        formType: 'productionShift'
      }));

      // ‚úÖ OPTYMALIZACJA: Sortowanie ju≈º wykonane w zapytaniu Firebase
      // Nie trzeba dodatkowo sortowaƒá po stronie klienta
      setFormResponses({
        completedMO: completedMOData,
        productionControl: controlData,
        productionShift: shiftData
      });
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania odpowiedzi formularzy:', error);
    } finally {
      setLoadingFormResponses(false);
    }
  };

  const formatDateTime = (date) => {
    if (!date) return 'Nie okre≈õlono';
    
    try {
      // Obs≈Çuga r√≥≈ºnych format√≥w daty
      let dateObj;
      
      if (date instanceof Date) {
        dateObj = date;
      } else if (typeof date === 'string') {
        // Je≈õli to string ISO, konwertuj na datƒô
        dateObj = new Date(date);
      } else if (date.toDate && typeof date.toDate === 'function') {
        // Firebase timestamp
        dateObj = date.toDate();
      } else if (date.seconds) {
        // Firebase timestamp object
        dateObj = new Date(date.seconds * 1000);
      } else {
        dateObj = new Date(date);
      }
      
      // Sprawd≈∫ czy data jest prawid≈Çowa
      if (isNaN(dateObj.getTime())) {
        console.warn('Nieprawid≈Çowa data:', date);
        return 'Nieprawid≈Çowa data';
      }
      
      return dateObj.toLocaleString('pl-PL', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        timeZone: 'Europe/Warsaw'  // Ustaw polskƒÖ strefƒô czasowƒÖ
      });
    } catch (error) {
      console.error('B≈ÇƒÖd formatowania daty:', error, date);
      return 'B≈ÇƒÖd formatowania';
    }
  };

  // Funkcja pomocnicza do formatowania daty/czasu dla pola datetime-local
  const toLocalDateTimeString = (date) => {
    if (!date) return '';
    
    try {
      let dateObj;
      
      if (date instanceof Date) {
        dateObj = date;
      } else if (typeof date === 'string') {
        dateObj = new Date(date);
      } else if (date.toDate && typeof date.toDate === 'function') {
        dateObj = date.toDate();
      } else if (date.seconds) {
        dateObj = new Date(date.seconds * 1000);
      } else {
        dateObj = new Date(date);
      }
      
      if (isNaN(dateObj.getTime())) return '';
      
      // Format dla datetime-local (YYYY-MM-DDTHH:MM)
      const year = dateObj.getFullYear();
      const month = String(dateObj.getMonth() + 1).padStart(2, '0');
      const day = String(dateObj.getDate()).padStart(2, '0');
      const hours = String(dateObj.getHours()).padStart(2, '0');
      const minutes = String(dateObj.getMinutes()).padStart(2, '0');
      
      return `${year}-${month}-${day}T${hours}:${minutes}`;
    } catch (error) {
      console.error('B≈ÇƒÖd konwersji daty do datetime-local:', error, date);
      return '';
    }
  };

  // Funkcja pomocnicza do parsowania datetime-local z uwzglƒôdnieniem strefy czasowej
  const fromLocalDateTimeString = (dateTimeString) => {
    if (!dateTimeString) return new Date();
    
    try {
      // Obs≈Çuga formatu ISO z datetime-local (YYYY-MM-DDTHH:MM)
      if (dateTimeString.includes('T')) {
        // Interpretuj jako lokalny czas (bez konwersji UTC)
        return new Date(dateTimeString);
      }
      
      // Obs≈Çuga starszego formatu z kropkami i spacjƒÖ (DD.MM.YYYY HH:MM)
      if (dateTimeString.includes(' ')) {
        const [datePart, timePart] = dateTimeString.split(' ');
        const [day, month, year] = datePart.split('.');
        const [hours, minutes] = timePart.split(':');
        
        return new Date(year, month - 1, day, hours, minutes);
      }
      
      // Fallback - spr√≥buj parsowaƒá jako standardowƒÖ datƒô
      return new Date(dateTimeString);
    } catch (error) {
      console.error('B≈ÇƒÖd parsowania datetime-local:', error, dateTimeString);
      return new Date();
    }
  };

  // Funkcja do filtrowania materia≈Ç√≥w na podstawie wyszukiwania
  const filteredRawMaterialsItems = rawMaterialsItems.filter(item => 
    item.name.toLowerCase().includes(searchRawMaterials.toLowerCase())
  );

  // Funkcja do obs≈Çugi usuwania materia≈Çu
  const handleDeleteMaterial = (material) => {
    setMaterialToDelete(material);
    setDeleteMaterialDialogOpen(true);
  };

  // Funkcja do potwierdzenia usuniƒôcia materia≈Çu
  const handleConfirmDeleteMaterial = async () => {
    try {
      setLoading(true);
      
      if (!materialToDelete) {
        showError('Nie wybrano materia≈Çu do usuniƒôcia');
        return;
      }
      
      // Pobierz aktualne zadanie
      const updatedTask = await getTaskById(id);
      const currentMaterials = updatedTask.materials || [];
      
      // Usu≈Ñ materia≈Ç z listy
      const updatedMaterials = currentMaterials.filter(m => m.id !== materialToDelete.id);
      
      // Zaktualizuj zadanie w bazie danych
      await updateDoc(doc(db, 'productionTasks', id), {
        materials: updatedMaterials,
        updatedAt: serverTimestamp(),
        updatedBy: currentUser.uid
      });
      
      // Od≈õwie≈º dane zadania
      fetchTask();
      
      showSuccess(`Materia≈Ç "${materialToDelete.name}" zosta≈Ç usuniƒôty z zadania`);
      setDeleteMaterialDialogOpen(false);
      setMaterialToDelete(null);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas usuwania materia≈Çu:', error);
      showError('Nie uda≈Ço siƒô usunƒÖƒá materia≈Çu: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // Funkcje obs≈Çugi konsumpcji materia≈Ç√≥w
  const handleOpenConsumeMaterialsDialog = () => {
    // Przygotuj listƒô zarezerwowanych materia≈Ç√≥w
    const reservedMaterials = materials.filter(material => {
      const materialId = material.inventoryItemId || material.id;
      const reservedBatches = task.materialBatches && task.materialBatches[materialId];
      return reservedBatches && reservedBatches.length > 0;
    });

    setConsumedMaterials(reservedMaterials);
    
    // Inicjalizuj ilo≈õci konsumpcji dla ka≈ºdego materia≈Çu i partii
    const initialQuantities = {};
    const initialSelections = {};
    
    reservedMaterials.forEach(material => {
      const materialId = material.inventoryItemId || material.id;
      const reservedBatches = task.materialBatches[materialId] || [];
      
      // Inicjalizuj wybory partii (domy≈õlnie wszystkie odznaczone)
      initialSelections[materialId] = {};
      
      reservedBatches.forEach(batch => {
        const batchKey = `${materialId}_${batch.batchId}`;
        initialQuantities[batchKey] = ''; // Domy≈õlnie puste pole
        initialSelections[materialId][batch.batchId] = false; // Domy≈õlnie odznaczone
      });
    });
    
    setConsumeQuantities(initialQuantities);
    setSelectedBatchesToConsume(initialSelections);
    setConsumeErrors({});
    setConsumeMaterialsDialogOpen(true);
  };

  const handleConsumeQuantityChange = (materialId, batchId, value) => {
    const batchKey = `${materialId}_${batchId}`;
    const numericValue = parseFloat(value);
    
    setConsumeQuantities(prev => ({
      ...prev,
      [batchKey]: isNaN(numericValue) ? 0 : numericValue
    }));
    
    // Wyczy≈õƒá b≈Çƒôdy dla tej partii
    setConsumeErrors(prev => {
      const newErrors = { ...prev };
      delete newErrors[batchKey];
      return newErrors;
    });
  };

  const handleBatchToConsumeSelection = (materialId, batchId, selected) => {
    setSelectedBatchesToConsume(prev => ({
      ...prev,
      [materialId]: {
        ...prev[materialId],
        [batchId]: selected
      }
    }));
  };

  const validateConsumeQuantities = () => {
    const errors = {};
    let isValid = true;

    Object.entries(selectedBatchesToConsume).forEach(([materialId, batches]) => {
      Object.entries(batches).forEach(([batchId, isSelected]) => {
        if (isSelected) {
          const batchKey = `${materialId}_${batchId}`;
          const quantity = consumeQuantities[batchKey];
          
          if (quantity === '' || quantity === null || quantity === undefined) {
            errors[batchKey] = 'Podaj ilo≈õƒá do konsumpcji';
            isValid = false;
          } else {
            const numericQuantity = Number(quantity);
            
            if (isNaN(numericQuantity)) {
              errors[batchKey] = 'Warto≈õƒá musi byƒá liczbƒÖ';
              isValid = false;
            } else if (numericQuantity <= 0) {
              errors[batchKey] = 'Warto≈õƒá musi byƒá wiƒôksza od zera';
              isValid = false;
            } else {
              // Sprawd≈∫ czy ilo≈õƒá nie przekracza zarezerwowanej ilo≈õci
              const reservedBatches = task.materialBatches[materialId] || [];
              const batch = reservedBatches.find(b => b.batchId === batchId);
              
              if (batch && numericQuantity > batch.quantity) {
                errors[batchKey] = `Nie mo≈ºna skonsumowaƒá wiƒôcej ni≈º zarezerwowano (${batch.quantity})`;
                isValid = false;
              }
            }
          }
        }
      });
    });

    setConsumeErrors(errors);
    return isValid;
  };

  const handleConfirmConsumeMaterials = async () => {
    try {
      if (!validateConsumeQuantities()) {
        return;
      }

      setLoading(true);

      // Przygotuj dane do aktualizacji stan√≥w magazynowych
      const consumptionData = {};
      
      Object.entries(selectedBatchesToConsume).forEach(([materialId, batches]) => {
        Object.entries(batches).forEach(([batchId, isSelected]) => {
          if (isSelected) {
            const batchKey = `${materialId}_${batchId}`;
            const quantity = consumeQuantities[batchKey] || 0;
            
            if (quantity > 0) {
              if (!consumptionData[materialId]) {
                consumptionData[materialId] = [];
              }
              
              consumptionData[materialId].push({
                batchId,
                quantity,
                timestamp: new Date().toISOString(),
                userId: currentUser.uid
              });
            }
          }
        });
      });

      // Zaktualizuj stany magazynowe - zmniejsz ilo≈õci w wybranych partiach
      const { updateBatch } = await import('../../services/inventory');
      
      for (const [materialId, batches] of Object.entries(consumptionData)) {
        for (const batchData of batches) {
          try {
            // Pobierz aktualne dane partii
            const { getInventoryBatch } = await import('../../services/inventory');
            const currentBatch = await getInventoryBatch(batchData.batchId);
            
            if (currentBatch) {
              // Upewnij siƒô, ≈ºe warto≈õci sƒÖ liczbami
              const currentQuantity = Number(currentBatch.quantity) || 0;
              const consumeQuantity = Number(batchData.quantity) || 0;
              const newQuantity = Math.max(0, currentQuantity - consumeQuantity);
              
              console.log('Konsumpcja materia≈Çu:', {
                currentQuantity,
                consumeQuantity,
                newQuantity,
                batchId: batchData.batchId
              });
              
              await updateBatch(batchData.batchId, {
                quantity: newQuantity
              }, currentUser.uid);
            }
          } catch (error) {
            console.error(`B≈ÇƒÖd podczas aktualizacji partii ${batchData.batchId}:`, error);
            showError(`Nie uda≈Ço siƒô zaktualizowaƒá partii ${batchData.batchId}: ${error.message}`);
          }
        }
      }

      // Aktualizuj rezerwacje - zmniejsz ilo≈õƒá zarezerwowanƒÖ o ilo≈õƒá skonsumowanƒÖ
      try {
        const { updateReservation } = await import('../../services/inventory');
        
        // Pobierz aktualne rezerwacje dla tego zadania
        const transactionsRef = collection(db, 'inventoryTransactions');
        
        for (const [materialId, batches] of Object.entries(consumptionData)) {
          for (const batchData of batches) {
            // ‚úÖ OPTYMALIZACJA: Znajd≈∫ rezerwacjƒô z limitem
            // Najpierw spr√≥buj z active/pending statusem
            let reservationQuery = query(
              transactionsRef,
              where('type', '==', 'booking'),
              where('referenceId', '==', id),
              where('itemId', '==', materialId),
              where('batchId', '==', batchData.batchId),
              where('status', 'in', ['active', 'pending']),
              limit(1) // Dodany limit - potrzebujemy tylko jednej rezerwacji
            );
            
            let reservationSnapshot = await getDocs(reservationQuery);
            
            // Je≈õli nie znaleziono rezerwacji z statusem, spr√≥buj bez filtra statusu
            if (reservationSnapshot.empty) {
              reservationQuery = query(
                transactionsRef,
                where('type', '==', 'booking'),
                where('referenceId', '==', id),
                where('itemId', '==', materialId),
                where('batchId', '==', batchData.batchId),
                limit(1) // Dodany limit - potrzebujemy tylko jednej rezerwacji
              );
              
              reservationSnapshot = await getDocs(reservationQuery);
            }
            
            if (!reservationSnapshot.empty) {
              // We≈∫ pierwszƒÖ rezerwacjƒô (powinna byƒá tylko jedna)
              const reservationDoc = reservationSnapshot.docs[0];
              const reservation = reservationDoc.data();
              const currentReservedQuantity = Number(reservation.quantity) || 0;
              const consumeQuantity = Number(batchData.quantity) || 0;
              const newReservedQuantity = Math.max(0, currentReservedQuantity - consumeQuantity);
              
              console.log('Aktualizacja rezerwacji:', {
                reservationId: reservationDoc.id,
                materialId,
                batchId: batchData.batchId,
                currentReservedQuantity,
                consumeQuantity,
                newReservedQuantity
              });
              
              if (newReservedQuantity > 0) {
                // Aktualizuj rezerwacjƒô z nowƒÖ ilo≈õciƒÖ
                await updateReservation(
                  reservationDoc.id,
                  materialId,
                  newReservedQuantity,
                  batchData.batchId,
                  currentUser.uid
                );
              } else {
                // Je≈õli ilo≈õƒá rezerwacji spad≈Ça do 0, usu≈Ñ rezerwacjƒô
                const { deleteReservation } = await import('../../services/inventory');
                await deleteReservation(reservationDoc.id, currentUser.uid);
              }
            } else {
              console.log(`Nie znaleziono rezerwacji dla materia≈Çu ${materialId}, partii ${batchData.batchId}`);
            }
          }
        }
      } catch (error) {
        console.error('B≈ÇƒÖd podczas aktualizacji rezerwacji:', error);
        showError('Nie uda≈Ço siƒô zaktualizowaƒá rezerwacji: ' + error.message);
      }

      // Zaktualizuj dane w task.materialBatches - zmniejsz ilo≈õci zarezerwowanych partii
      const updatedMaterialBatches = { ...task.materialBatches };
      
      for (const [materialId, batches] of Object.entries(consumptionData)) {
        if (updatedMaterialBatches[materialId]) {
          for (const batchData of batches) {
            const batchIndex = updatedMaterialBatches[materialId].findIndex(
              batch => batch.batchId === batchData.batchId
            );
            
            if (batchIndex >= 0) {
              const currentReservedQuantity = Number(updatedMaterialBatches[materialId][batchIndex].quantity) || 0;
              const consumeQuantity = Number(batchData.quantity) || 0;
              const newReservedQuantity = Math.max(0, currentReservedQuantity - consumeQuantity);
              
              if (newReservedQuantity > 0) {
                // Zaktualizuj ilo≈õƒá zarezerwowanƒÖ
                updatedMaterialBatches[materialId][batchIndex].quantity = newReservedQuantity;
              } else {
                // Usu≈Ñ partiƒô z listy zarezerwowanych je≈õli ilo≈õƒá spad≈Ça do 0
                updatedMaterialBatches[materialId].splice(batchIndex, 1);
              }
            }
          }
          
          // Je≈õli dla materia≈Çu nie zosta≈Çy ≈ºadne zarezerwowane partie, usu≈Ñ ca≈Çy klucz
          if (updatedMaterialBatches[materialId].length === 0) {
            delete updatedMaterialBatches[materialId];
          }
        }
      }

      // Zaktualizuj zadanie - dodaj informacje o skonsumowanych materia≈Çach i zaktualizuj rezerwacje
      const currentConsumedMaterials = task.consumedMaterials || [];
      const newConsumedMaterials = [
        ...currentConsumedMaterials,
        ...Object.entries(consumptionData).flatMap(([materialId, batches]) => 
          batches.map(batch => {
            // Znajd≈∫ materia≈Ç aby ustawiƒá domy≈õlne includeInCosts i pobraƒá cenƒô
            const material = materials.find(m => (m.inventoryItemId || m.id) === materialId);
            const defaultIncludeInCosts = material ? (includeInCosts[material.id] !== false) : true;
            
            // Znajd≈∫ numer partii z task.materialBatches
            let batchNumber = batch.batchId; // fallback to ID
            let unitPrice = 0; // Domy≈õlna cena
            
            if (task.materialBatches && task.materialBatches[materialId]) {
              const batchInfo = task.materialBatches[materialId].find(b => b.batchId === batch.batchId);
              console.log('Szukanie numeru partii dla konsumpcji:', {
                materialId,
                batchId: batch.batchId,
                materialBatches: task.materialBatches[materialId],
                foundBatchInfo: batchInfo
              });
              if (batchInfo && batchInfo.batchNumber) {
                batchNumber = batchInfo.batchNumber;
                console.log(`Znaleziono numer partii: ${batch.batchId} -> ${batchNumber}`);
              } else {
                console.log(`Nie znaleziono numeru partii dla ${batch.batchId}, u≈ºywam ID jako fallback`);
              }
              
              // Pobierz cenƒô jednostkowƒÖ partii
              if (batchInfo && batchInfo.unitPrice) {
                unitPrice = batchInfo.unitPrice;
                console.log(`Znaleziono cenƒô partii: ${batch.batchId} -> ${unitPrice} ‚Ç¨`);
              } else {
                console.log(`Nie znaleziono ceny partii ${batch.batchId}, u≈ºywam ceny materia≈Çu`);
              }
            } else {
              console.log(`Brak zarezerwowanych partii dla materia≈Çu ${materialId}`);
            }
            
            // Je≈õli nie znaleziono ceny w partii, u≈ºyj ceny materia≈Çu
            if (unitPrice === 0 && material && material.unitPrice) {
              unitPrice = material.unitPrice;
              console.log(`U≈ºywam ceny materia≈Çu: ${materialId} -> ${unitPrice} ‚Ç¨`);
            }
            
            console.log('Zapisywanie konsumpcji z numerem partii i cenƒÖ:', {
              materialId,
              batchId: batch.batchId,
              finalBatchNumber: batchNumber,
              quantity: batch.quantity,
              unitPrice: unitPrice
            });
            
            return {
              materialId,
              materialName: material ? material.name : undefined, // Dodaj nazwƒô materia≈Çu
              batchId: batch.batchId,
              batchNumber: batchNumber, // Zapisz numer partii
              quantity: batch.quantity,
              unit: material ? material.unit : undefined, // Dodaj jednostkƒô materia≈Çu
              unitPrice: unitPrice, // Zapisz cenƒô jednostkowƒÖ
              timestamp: batch.timestamp,
              userId: batch.userId,
              userName: currentUser.displayName || currentUser.email,
              includeInCosts: defaultIncludeInCosts
            };
          })
        )
      ];

      // SPRAWD≈π CZY AKTUALIZOWAƒÜ KOSZTY (frontend vs backend)
      const { totalMaterialCost, unitMaterialCost } = calculateAllCosts(newConsumedMaterials, updatedMaterialBatches);
      
      // Sprawd≈∫ czy koszty siƒô zmieni≈Çy (r√≥≈ºnica > 0.001‚Ç¨)
      const costChanged = Math.abs((task.totalMaterialCost || 0) - totalMaterialCost) > 0.001 ||
                          Math.abs((task.unitMaterialCost || 0) - unitMaterialCost) > 0.001;

      // JEDNA ZOPTYMALIZOWANA AKTUALIZACJA BAZY DANYCH
      const updateData = {
        consumedMaterials: newConsumedMaterials,
        materialBatches: updatedMaterialBatches,
        updatedAt: serverTimestamp(),
        updatedBy: currentUser.uid
      };

      // Dodaj koszty TYLKO je≈õli siƒô zmieni≈Çy
      if (costChanged) {
        updateData.totalMaterialCost = totalMaterialCost;
        updateData.unitMaterialCost = unitMaterialCost;
        updateData.costLastUpdatedAt = serverTimestamp();
        updateData.costLastUpdatedBy = currentUser.uid;
        
        console.log(`[OPTIMIZED] Aktualizacja koszt√≥w podczas konsumpcji: ${totalMaterialCost.toFixed(2)} ‚Ç¨ (${unitMaterialCost.toFixed(2)} ‚Ç¨/${task.unit})`);
      } else {
        console.log('[OPTIMIZED] Koszty nie zmieni≈Çy siƒô podczas konsumpcji, pomijam aktualizacjƒô koszt√≥w');
      }

      await updateDoc(doc(db, 'productionTasks', id), updateData);

      // Aktualizuj zwiƒÖzane zam√≥wienia klient√≥w TYLKO je≈õli koszty siƒô zmieni≈Çy
      if (costChanged) {
        await updateRelatedCustomerOrders(task, totalMaterialCost, null, unitMaterialCost, null);
      }

      showSuccess(costChanged ? 
        'Materia≈Çy zosta≈Çy skonsumowane i koszty zaktualizowane w jednej operacji' : 
        'Materia≈Çy zosta≈Çy skonsumowane (koszty bez zmian)');
      setConsumeMaterialsDialogOpen(false);
      
      // Od≈õwie≈º dane zadania
      fetchTask();
      
      // Od≈õwie≈º partie w dialogu rƒôcznej rezerwacji
      await fetchBatchesForMaterialsOptimized();
      
    } catch (error) {
      console.error('B≈ÇƒÖd podczas konsumpcji materia≈Ç√≥w:', error);
      showError('Nie uda≈Ço siƒô skonsumowaƒá materia≈Ç√≥w: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // Funkcje obs≈Çugi korekty konsumpcji
  const handleEditConsumption = (consumption) => {
    setSelectedConsumption(consumption);
    setEditedQuantity(consumption.quantity);
    setEditConsumptionDialogOpen(true);
  };

  const handleConfirmEditConsumption = async () => {
    try {
      setLoading(true);

      if (!selectedConsumption) {
        showError('Nie wybrano konsumpcji do edycji');
        return;
      }

      if (!editedQuantity || editedQuantity <= 0) {
        showError('Podaj prawid≈ÇowƒÖ ilo≈õƒá');
        return;
      }

      // Oblicz r√≥≈ºnicƒô w ilo≈õci
      const quantityDifference = editedQuantity - selectedConsumption.quantity;

      // Aktualizuj stan magazynowy
      const { updateBatch } = await import('../../services/inventory');
      const { getInventoryBatch } = await import('../../services/inventory');
      
      const currentBatch = await getInventoryBatch(selectedConsumption.batchId);
      if (currentBatch) {
        // Upewnij siƒô, ≈ºe warto≈õci sƒÖ liczbami
        const currentQuantity = Number(currentBatch.quantity) || 0;
        const editedQty = Number(editedQuantity) || 0;
        const selectedQty = Number(selectedConsumption.quantity) || 0;
        const quantityDiff = editedQty - selectedQty;
        
        // Je≈õli zwiƒôkszamy ilo≈õƒá konsumpcji (quantityDiff > 0), zmniejszamy stan magazynowy
        // Je≈õli zmniejszamy ilo≈õƒá konsumpcji (quantityDiff < 0), zwiƒôkszamy stan magazynowy
        const newQuantity = Math.max(0, currentQuantity - quantityDiff);
        
        console.log('Edycja konsumpcji:', {
          currentQuantity,
          editedQty,
          selectedQty,
          quantityDiff,
          newQuantity,
          batchId: selectedConsumption.batchId
        });
        
        await updateBatch(selectedConsumption.batchId, {
          quantity: newQuantity
        }, currentUser.uid);
      }

      // Aktualizuj rezerwacje - skoryguj ilo≈õƒá zarezerwowanƒÖ
      try {
        const { updateReservation } = await import('../../services/inventory');
        const transactionsRef = collection(db, 'inventoryTransactions');
        
        // ‚úÖ OPTYMALIZACJA: Znajd≈∫ rezerwacjƒô z limitem
        let reservationQuery = query(
          transactionsRef,
          where('type', '==', 'booking'),
          where('referenceId', '==', id),
          where('itemId', '==', selectedConsumption.materialId),
          where('batchId', '==', selectedConsumption.batchId),
          where('status', 'in', ['active', 'pending']),
          limit(1) // Dodany limit - potrzebujemy tylko jednej rezerwacji
        );
        
        let reservationSnapshot = await getDocs(reservationQuery);
        
        // Je≈õli nie znaleziono rezerwacji z statusem, spr√≥buj bez filtra statusu
        if (reservationSnapshot.empty) {
          reservationQuery = query(
            transactionsRef,
            where('type', '==', 'booking'),
            where('referenceId', '==', id),
            where('itemId', '==', selectedConsumption.materialId),
            where('batchId', '==', selectedConsumption.batchId),
            limit(1) // Dodany limit - potrzebujemy tylko jednej rezerwacji
          );
          
          reservationSnapshot = await getDocs(reservationQuery);
        }
        
        if (!reservationSnapshot.empty) {
          const reservationDoc = reservationSnapshot.docs[0];
          const reservation = reservationDoc.data();
          const currentReservedQuantity = Number(reservation.quantity) || 0;
          const quantityDiff = editedQuantity - selectedConsumption.quantity;
          
          // Skoryguj rezerwacjƒô: je≈õli zwiƒôkszamy konsumpcjƒô, zmniejszamy rezerwacjƒô
          const newReservedQuantity = Math.max(0, currentReservedQuantity - quantityDiff);
          
          console.log('Korekta rezerwacji przy edycji:', {
            reservationId: reservationDoc.id,
            materialId: selectedConsumption.materialId,
            batchId: selectedConsumption.batchId,
            currentReservedQuantity,
            quantityDiff,
            newReservedQuantity
          });
          
          if (newReservedQuantity > 0) {
            await updateReservation(
              reservationDoc.id,
              selectedConsumption.materialId,
              newReservedQuantity,
              selectedConsumption.batchId,
              currentUser.uid
            );
          } else {
            const { deleteReservation } = await import('../../services/inventory');
            await deleteReservation(reservationDoc.id, currentUser.uid);
          }
        }
        
        // Zaktualizuj task.materialBatches
        const updatedMaterialBatches = { ...task.materialBatches };
        const materialId = selectedConsumption.materialId;
        
        if (updatedMaterialBatches[materialId]) {
          const batchIndex = updatedMaterialBatches[materialId].findIndex(
            batch => batch.batchId === selectedConsumption.batchId
          );
          
          if (batchIndex >= 0) {
            const currentReservedQuantity = Number(updatedMaterialBatches[materialId][batchIndex].quantity) || 0;
            const quantityDiff = editedQuantity - selectedConsumption.quantity;
            const newReservedQuantity = Math.max(0, currentReservedQuantity - quantityDiff);
            
            if (newReservedQuantity > 0) {
              updatedMaterialBatches[materialId][batchIndex].quantity = newReservedQuantity;
            } else {
              updatedMaterialBatches[materialId].splice(batchIndex, 1);
            }
            
            // Je≈õli dla materia≈Çu nie zosta≈Çy ≈ºadne zarezerwowane partie
            if (updatedMaterialBatches[materialId].length === 0) {
              delete updatedMaterialBatches[materialId];
            }
            
            // Zaktualizuj task.materialBatches w bazie danych
            await updateDoc(doc(db, 'productionTasks', id), {
              materialBatches: updatedMaterialBatches,
              updatedAt: serverTimestamp()
            });
          }
        }
        
      } catch (error) {
        console.error('B≈ÇƒÖd podczas aktualizacji rezerwacji przy edycji:', error);
        showError('Nie uda≈Ço siƒô zaktualizowaƒá rezerwacji: ' + error.message);
      }

      // Aktualizuj listƒô skonsumowanych materia≈Ç√≥w w zadaniu
      const updatedConsumedMaterials = task.consumedMaterials.map((consumed, index) => {
        if (index === task.consumedMaterials.indexOf(selectedConsumption)) {
          return {
            ...consumed,
            quantity: editedQuantity,
            editedAt: new Date().toISOString(),
            editedBy: currentUser.uid,
            editedByName: currentUser.displayName || currentUser.email
          };
        }
        return consumed;
      });

      // Zaktualizuj zadanie w bazie danych
      await updateDoc(doc(db, 'productionTasks', id), {
        consumedMaterials: updatedConsumedMaterials,
        updatedAt: serverTimestamp(),
        updatedBy: currentUser.uid
      });

      // Od≈õwie≈º dane zadania
      await fetchTask();
      
      // Od≈õwie≈º partie w dialogu rƒôcznej rezerwacji
      await fetchBatchesForMaterialsOptimized();

      showSuccess('Konsumpcja materia≈Çu zosta≈Ça zaktualizowana wraz z rezerwacjami');
      setEditConsumptionDialogOpen(false);
      setSelectedConsumption(null);
      setEditedQuantity(0);
      
      // Automatyczna aktualizacja koszt√≥w zostanie wykonana przez productionService.updateTask

    } catch (error) {
      console.error('B≈ÇƒÖd podczas edycji konsumpcji:', error);
      showError('Nie uda≈Ço siƒô zaktualizowaƒá konsumpcji: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // Funkcje obs≈Çugi usuniƒôcia konsumpcji
  const handleDeleteConsumption = (consumption) => {
    setSelectedConsumption(consumption);
    setDeleteConsumptionDialogOpen(true);
  };

  const handleConfirmDeleteConsumption = async () => {
    try {
      setLoading(true);

      if (!selectedConsumption) {
        showError('Nie wybrano konsumpcji do usuniƒôcia');
        return;
      }

      // Przywr√≥ƒá stan magazynowy
      const { updateBatch } = await import('../../services/inventory');
      const { getInventoryBatch } = await import('../../services/inventory');
      
      const currentBatch = await getInventoryBatch(selectedConsumption.batchId);
      if (currentBatch) {
        // Upewnij siƒô, ≈ºe warto≈õci sƒÖ liczbami
        const currentQuantity = Number(currentBatch.quantity) || 0;
        const consumedQuantity = Number(selectedConsumption.quantity) || 0;
        const newQuantity = currentQuantity + consumedQuantity;
        
        console.log('Przywracanie ilo≈õci:', {
          currentQuantity,
          consumedQuantity,
          newQuantity,
          batchId: selectedConsumption.batchId
        });
        
        await updateBatch(selectedConsumption.batchId, {
          quantity: newQuantity
        }, currentUser.uid);
      }

      // Przywr√≥ƒá rezerwacjƒô tylko je≈õli u≈ºytkownik tego chce
      if (restoreReservation) {
        try {
          const { updateReservation, bookInventoryForTask } = await import('../../services/inventory');
          const transactionsRef = collection(db, 'inventoryTransactions');
          
          // ‚úÖ OPTYMALIZACJA: Znajd≈∫ rezerwacjƒô z limitem
          let reservationQuery = query(
            transactionsRef,
            where('type', '==', 'booking'),
            where('referenceId', '==', id),
            where('itemId', '==', selectedConsumption.materialId),
            where('batchId', '==', selectedConsumption.batchId),
            where('status', 'in', ['active', 'pending']),
            limit(1) // Dodany limit - potrzebujemy tylko jednej rezerwacji
          );
          
          let reservationSnapshot = await getDocs(reservationQuery);
          
          // Je≈õli nie znaleziono rezerwacji z statusem, spr√≥buj bez filtra statusu
          if (reservationSnapshot.empty) {
            reservationQuery = query(
              transactionsRef,
              where('type', '==', 'booking'),
              where('referenceId', '==', id),
              where('itemId', '==', selectedConsumption.materialId),
              where('batchId', '==', selectedConsumption.batchId),
              limit(1) // Dodany limit - potrzebujemy tylko jednej rezerwacji
            );
            
            reservationSnapshot = await getDocs(reservationQuery);
          }
          
          if (!reservationSnapshot.empty) {
            // Je≈õli rezerwacja istnieje, zwiƒôksz jej ilo≈õƒá
            const reservationDoc = reservationSnapshot.docs[0];
            const reservation = reservationDoc.data();
            const currentReservedQuantity = Number(reservation.quantity) || 0;
            const consumedQuantity = Number(selectedConsumption.quantity) || 0;
            const newReservedQuantity = currentReservedQuantity + consumedQuantity;
            
            console.log('Przywracanie rezerwacji:', {
              reservationId: reservationDoc.id,
              materialId: selectedConsumption.materialId,
              batchId: selectedConsumption.batchId,
              currentReservedQuantity,
              consumedQuantity,
              newReservedQuantity
            });
            
            await updateReservation(
              reservationDoc.id,
              selectedConsumption.materialId,
              newReservedQuantity,
              selectedConsumption.batchId,
              currentUser.uid
            );
          } else {
            // Je≈õli rezerwacja nie istnieje, utw√≥rz nowƒÖ
            console.log('Tworzenie nowej rezerwacji po usuniƒôciu konsumpcji:', {
              materialId: selectedConsumption.materialId,
              batchId: selectedConsumption.batchId,
              quantity: selectedConsumption.quantity
            });
            
            await bookInventoryForTask(
              selectedConsumption.materialId,
              selectedConsumption.quantity,
              id,
              currentUser.uid,
              'manual',
              selectedConsumption.batchId
            );
          }
          
          // Zaktualizuj task.materialBatches - przywr√≥ƒá ilo≈õƒá zarezerwowanƒÖ
          const updatedMaterialBatches = { ...task.materialBatches };
          const materialId = selectedConsumption.materialId;
          
          if (!updatedMaterialBatches[materialId]) {
            updatedMaterialBatches[materialId] = [];
          }
          
          const batchIndex = updatedMaterialBatches[materialId].findIndex(
            batch => batch.batchId === selectedConsumption.batchId
          );
          
          if (batchIndex >= 0) {
            // Je≈õli partia istnieje, zwiƒôksz jej ilo≈õƒá
            const currentReservedQuantity = Number(updatedMaterialBatches[materialId][batchIndex].quantity) || 0;
            const consumedQuantity = Number(selectedConsumption.quantity) || 0;
            updatedMaterialBatches[materialId][batchIndex].quantity = currentReservedQuantity + consumedQuantity;
          } else {
            // Je≈õli partia nie istnieje, dodaj jƒÖ
            const { getInventoryBatch } = await import('../../services/inventory');
            const batchInfo = await getInventoryBatch(selectedConsumption.batchId);
            
            updatedMaterialBatches[materialId].push({
              batchId: selectedConsumption.batchId,
              quantity: selectedConsumption.quantity,
              batchNumber: batchInfo?.lotNumber || batchInfo?.batchNumber || 'Bez numeru'
            });
          }
          
          // Zaktualizuj task.materialBatches w bazie danych
          await updateDoc(doc(db, 'productionTasks', id), {
            materialBatches: updatedMaterialBatches,
            updatedAt: serverTimestamp()
          });
          
        } catch (error) {
          console.error('B≈ÇƒÖd podczas przywracania rezerwacji:', error);
          showError('Nie uda≈Ço siƒô przywr√≥ciƒá rezerwacji: ' + error.message);
        }
      }

      // Usu≈Ñ konsumpcjƒô z listy
      const updatedConsumedMaterials = task.consumedMaterials.filter((consumed, index) => 
        index !== task.consumedMaterials.indexOf(selectedConsumption)
      );

      // Zaktualizuj zadanie w bazie danych
      await updateDoc(doc(db, 'productionTasks', id), {
        consumedMaterials: updatedConsumedMaterials,
        updatedAt: serverTimestamp(),
        updatedBy: currentUser.uid
      });

      // Od≈õwie≈º dane zadania
      await fetchTask();
      
      // Od≈õwie≈º partie w dialogu rƒôcznej rezerwacji
      await fetchBatchesForMaterialsOptimized();

      const successMessage = restoreReservation 
        ? 'Konsumpcja materia≈Çu zosta≈Ça usuniƒôta i rezerwacja przywr√≥cona'
        : 'Konsumpcja materia≈Çu zosta≈Ça usuniƒôta';
      showSuccess(successMessage);
      setDeleteConsumptionDialogOpen(false);
      setSelectedConsumption(null);
      setRestoreReservation(true); // Reset do domy≈õlnej warto≈õci
      
      // Automatyczna aktualizacja koszt√≥w zostanie wykonana przez productionService.updateTask

    } catch (error) {
      console.error('B≈ÇƒÖd podczas usuwania konsumpcji:', error);
      showError('Nie uda≈Ço siƒô usunƒÖƒá konsumpcji: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // Funkcja do pobierania cen skonsumowanych partii i aktualizacji cen materia≈Ç√≥w
  const fetchConsumedBatchPrices = async () => {
    if (!task?.consumedMaterials || task.consumedMaterials.length === 0) {
      return;
    }

    try {
      const { getInventoryBatch } = await import('../../services/inventory');
      const batchPrices = {};
      let needsTaskUpdate = false;
      let needsCostUpdate = false;
      const updatedConsumedMaterials = [...task.consumedMaterials];

      for (let i = 0; i < task.consumedMaterials.length; i++) {
        const consumed = task.consumedMaterials[i];
        try {
          const batch = await getInventoryBatch(consumed.batchId);
          if (batch) {
            if (batch.unitPrice) {
              batchPrices[consumed.batchId] = batch.unitPrice;
              
              // Sprawd≈∫ czy cena w konsumpcji siƒô zmieni≈Ça
              const currentPrice = consumed.unitPrice || 0;
              const newPrice = batch.unitPrice;
              
              if (Math.abs(currentPrice - newPrice) > 0.001) {
                console.log(`Aktualizujƒô cenƒô dla skonsumowanej partii ${batch.batchNumber || consumed.batchId}: ${currentPrice.toFixed(4)}‚Ç¨ -> ${newPrice.toFixed(4)}‚Ç¨`);
                updatedConsumedMaterials[i] = {
                  ...consumed,
                  unitPrice: newPrice,
                  priceUpdatedAt: new Date().toISOString(),
                  priceUpdatedFrom: 'batch-sync'
                };
                needsTaskUpdate = true;
                needsCostUpdate = true;
              }
            }
            
            // Je≈õli konsumpcja nie ma zapisanego numeru partii, zaktualizuj go
            if (!consumed.batchNumber && (batch.lotNumber || batch.batchNumber)) {
              const newBatchNumber = batch.lotNumber || batch.batchNumber;
              console.log(`Aktualizujƒô numer partii dla konsumpcji ${i}: ${consumed.batchId} -> ${newBatchNumber}`);
              updatedConsumedMaterials[i] = {
                ...updatedConsumedMaterials[i], // Zachowaj poprzednie zmiany
                batchNumber: newBatchNumber
              };
              needsTaskUpdate = true;
            } else if (consumed.batchNumber === consumed.batchId && (batch.lotNumber || batch.batchNumber)) {
              // Sprawd≈∫ czy zapisany batchNumber to w rzeczywisto≈õci ID - wtedy te≈º zaktualizuj
              const newBatchNumber = batch.lotNumber || batch.batchNumber;
              if (newBatchNumber !== consumed.batchNumber) {
                console.log(`Naprawiam b≈Çƒôdny numer partii (ID jako numer): ${consumed.batchNumber} -> ${newBatchNumber}`);
                updatedConsumedMaterials[i] = {
                  ...updatedConsumedMaterials[i], // Zachowaj poprzednie zmiany
                  batchNumber: newBatchNumber
                };
                needsTaskUpdate = true;
              }
            }
          }
        } catch (error) {
          console.error(`B≈ÇƒÖd podczas pobierania danych partii ${consumed.batchId}:`, error);
        }
      }

      setConsumedBatchPrices(batchPrices);
      
      // Je≈õli trzeba zaktualizowaƒá dane zadania
      if (needsTaskUpdate) {
        try {
          await updateDoc(doc(db, 'productionTasks', id), {
            consumedMaterials: updatedConsumedMaterials,
            updatedAt: serverTimestamp()
          });
          
          // Zaktualizuj lokalny stan
          setTask(prevTask => ({
            ...prevTask,
            consumedMaterials: updatedConsumedMaterials
          }));
          
          if (needsCostUpdate) {
            console.log('Wykryto zmiany cen skonsumowanych partii - zaktualizowano dane zadania');
            // Automatyczna aktualizacja koszt√≥w zostanie wywo≈Çana przez useEffect z dependency na task.consumedMaterials
          } else {
            console.log('Zaktualizowano numery partii w danych zadania');
          }
        } catch (error) {
          console.error('B≈ÇƒÖd podczas aktualizacji danych skonsumowanych partii:', error);
        }
      }
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania cen skonsumowanych partii:', error);
    }
  };

  // Funkcja do obs≈Çugi zmian checkbox√≥w "wliczaj do koszt√≥w" dla skonsumowanych materia≈Ç√≥w
  const handleConsumedIncludeInCostsChange = async (consumptionIndex, checked) => {
    try {
      setConsumedIncludeInCosts(prev => ({
        ...prev,
        [consumptionIndex]: checked
      }));

      // Zaktualizuj dane w zadaniu - dodaj informacje o wliczaniu do koszt√≥w dla ka≈ºdej konsumpcji
      const updatedConsumedMaterials = [...task.consumedMaterials];
      updatedConsumedMaterials[consumptionIndex] = {
        ...updatedConsumedMaterials[consumptionIndex],
        includeInCosts: checked
      };

      await updateDoc(doc(db, 'productionTasks', id), {
        consumedMaterials: updatedConsumedMaterials,
        updatedAt: serverTimestamp(),
        updatedBy: currentUser.uid
      });

      // Od≈õwie≈º dane zadania aby przeliczy≈Ç koszty
      await fetchTask();

      showSuccess(`Zmieniono ustawienie wliczania do koszt√≥w dla skonsumowanego materia≈Çu`);
      
      // Automatyczna aktualizacja koszt√≥w zostanie wykonana przez productionService.updateTask
    } catch (error) {
      console.error('B≈ÇƒÖd podczas zmiany ustawienia wliczania do koszt√≥w:', error);
      showError('Nie uda≈Ço siƒô zmieniƒá ustawienia: ' + error.message);
    }
  };

  // Funkcja do wzbogacenia danych skonsumowanych materia≈Ç√≥w o informacje z partii
  // Funkcje pomocnicze zosta≈Çy zastƒÖpione przez calculateAllCosts()

  const enrichConsumedMaterialsData = async (consumedMaterials) => {
    if (!consumedMaterials || consumedMaterials.length === 0) {
      return consumedMaterials;
    }

    const enrichedMaterials = await Promise.all(
      consumedMaterials.map(async (consumed) => {
        let enrichedConsumed = { ...consumed };

        // Pobierz dane z partii magazynowej je≈õli brakuje informacji
        if (consumed.batchId && (!consumed.expiryDate || !consumed.materialName || !consumed.unit)) {
          try {
            const { getInventoryBatch } = await import('../../services/inventory');
            const batchData = await getInventoryBatch(consumed.batchId);
            
            if (batchData) {
              // Dodaj datƒô wa≈ºno≈õci je≈õli nie ma
              if (!enrichedConsumed.expiryDate && batchData.expiryDate) {
                enrichedConsumed.expiryDate = batchData.expiryDate;
              }

              // Dodaj numer partii je≈õli nie ma
              if (!enrichedConsumed.batchNumber && (batchData.lotNumber || batchData.batchNumber)) {
                enrichedConsumed.batchNumber = batchData.lotNumber || batchData.batchNumber;
              }

              // Pobierz nazwƒô materia≈Çu i jednostkƒô z pozycji magazynowej
              if (batchData.inventoryItemId && (!enrichedConsumed.materialName || !enrichedConsumed.unit)) {
                try {
                  const { getInventoryItemById } = await import('../../services/inventory');
                  const inventoryItem = await getInventoryItemById(batchData.inventoryItemId);
                  
                  if (inventoryItem) {
                    if (!enrichedConsumed.materialName) {
                      enrichedConsumed.materialName = inventoryItem.name;
                    }
                    if (!enrichedConsumed.unit) {
                      enrichedConsumed.unit = inventoryItem.unit;
                    }
                  }
                } catch (error) {
                  console.warn(`Nie uda≈Ço siƒô pobraƒá danych pozycji magazynowej ${batchData.inventoryItemId}:`, error);
                }
              }
            }
          } catch (error) {
            console.warn(`Nie uda≈Ço siƒô pobraƒá danych partii ${consumed.batchId}:`, error);
          }
        }

        return enrichedConsumed;
      })
    );

    return enrichedMaterials;
  };

  // Funkcja do pobierania za≈ÇƒÖcznik√≥w z PO dla sk≈Çadnik√≥w
  const fetchIngredientAttachments = async () => {
    if (!task?.recipe?.ingredients || task.recipe.ingredients.length === 0) {
      return;
    }

    if (!task?.consumedMaterials || task.consumedMaterials.length === 0) {
      return;
    }

    try {
      const attachments = {};
      
      // Dla ka≈ºdego sk≈Çadnika sprawd≈∫ czy mo≈ºna znale≈∫ƒá odpowiadajƒÖcy mu skonsumowany materia≈Ç
      for (const ingredient of task.recipe.ingredients) {
        const ingredientAttachments = [];
        
        // Znajd≈∫ skonsumowane materia≈Çy o tej samej nazwie co sk≈Çadnik
        const matchingConsumedMaterials = task.consumedMaterials.filter(consumed => {
          // Znajd≈∫ materia≈Ç w li≈õcie materia≈Ç√≥w zadania
          const material = materials.find(m => (m.inventoryItemId || m.id) === consumed.materialId);
          const materialName = consumed.materialName || material?.name || '';
          
          // Sprawd≈∫ czy nazwa materia≈Çu pasuje do nazwy sk≈Çadnika (case-insensitive)
          return materialName.toLowerCase().includes(ingredient.name.toLowerCase()) ||
                 ingredient.name.toLowerCase().includes(materialName.toLowerCase());
        });
        
        // Dla ka≈ºdego pasujƒÖcego skonsumowanego materia≈Çu pobierz za≈ÇƒÖczniki z PO
        for (const consumed of matchingConsumedMaterials) {
          if (consumed.batchId) {
            try {
              // Pobierz dane partii magazynowej
              const { getInventoryBatch } = await import('../../services/inventory');
              const batchData = await getInventoryBatch(consumed.batchId);
              
              if (batchData && batchData.purchaseOrderDetails && batchData.purchaseOrderDetails.id) {
                // Pobierz pe≈Çne dane zam√≥wienia zakupu
                const { getPurchaseOrderById } = await import('../../services/purchaseOrderService');
                const poData = await getPurchaseOrderById(batchData.purchaseOrderDetails.id);
                
                // Dla w≈Ça≈õciwo≈õci fizykochemicznych u≈ºywamy tylko certyfikat√≥w CoA
                const coaAttachments = poData.coaAttachments || [];
                
                // Je≈õli nie ma CoA, sprawd≈∫ stare za≈ÇƒÖczniki (kompatybilno≈õƒá wsteczna)
                let attachmentsToProcess = coaAttachments;
                if (coaAttachments.length === 0 && poData.attachments && poData.attachments.length > 0) {
                  console.log('Brak CoA, u≈ºywam starych za≈ÇƒÖcznik√≥w dla kompatybilno≈õci:', poData.attachments);
                  attachmentsToProcess = poData.attachments;
                }
                
                if (attachmentsToProcess.length > 0) {
                  // Dodaj za≈ÇƒÖczniki CoA z informacjƒÖ o ≈∫r√≥dle
                  const poAttachments = attachmentsToProcess.map(attachment => ({
                    ...attachment,
                    poNumber: poData.number,
                    poId: poData.id,
                    lotNumber: consumed.batchNumber || batchData.lotNumber || batchData.batchNumber,
                    category: coaAttachments.length > 0 ? 'CoA' : 'Legacy' // Oznacz czy to CoA czy stare za≈ÇƒÖczniki
                  }));
                  
                  ingredientAttachments.push(...poAttachments);
                }
              }
            } catch (error) {
              console.warn(`Nie uda≈Ço siƒô pobraƒá za≈ÇƒÖcznik√≥w dla partii ${consumed.batchId}:`, error);
            }
          }
        }
        
        // Usu≈Ñ duplikaty za≈ÇƒÖcznik√≥w (po nazwie pliku)
        const uniqueAttachments = ingredientAttachments.filter((attachment, index, self) => 
          index === self.findIndex(a => a.fileName === attachment.fileName)
        );
        
        if (uniqueAttachments.length > 0) {
          attachments[ingredient.name] = uniqueAttachments;
        }
      }
      
      setIngredientAttachments(attachments);
    } catch (error) {
      console.warn('B≈ÇƒÖd podczas pobierania za≈ÇƒÖcznik√≥w sk≈Çadnik√≥w:', error);
    }
  };

  // Funkcja do pobierania za≈ÇƒÖcznik√≥w bada≈Ñ klinicznych
  const fetchClinicalAttachments = async () => {
    if (!task?.id) return;
    
    try {
      // Pobierz obecne za≈ÇƒÖczniki z zadania
      const taskRef = doc(db, 'productionTasks', task.id);
      const taskDoc = await getDoc(taskRef);
      
      if (taskDoc.exists()) {
        const taskData = taskDoc.data();
        setClinicalAttachments(taskData.clinicalAttachments || []);
      }
    } catch (error) {
      console.warn('B≈ÇƒÖd podczas pobierania za≈ÇƒÖcznik√≥w bada≈Ñ klinicznych:', error);
    }
  };

  // Funkcja do przesy≈Çania pliku bada≈Ñ klinicznych
  const uploadClinicalFile = async (file) => {
    try {
      // Walidacja pliku
      const maxSize = 10 * 1024 * 1024; // 10MB
      if (file.size > maxSize) {
        throw new Error('Plik jest za du≈ºy. Maksymalny rozmiar to 10MB.');
      }

      // Dozwolone typy plik√≥w
      const allowedTypes = [
        'application/pdf',
        'image/jpeg',
        'image/png',
        'image/gif',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'text/plain'
      ];
      
      if (!allowedTypes.includes(file.type)) {
        throw new Error('Nieobs≈Çugiwany typ pliku. Dozwolone: PDF, JPG, PNG, GIF, DOC, DOCX, TXT');
      }

      const timestamp = new Date().getTime();
      const sanitizedFileName = file.name.replace(/[^a-zA-Z0-9.-]/g, '_');
      const fileName = `${timestamp}_${sanitizedFileName}`;
      const storagePath = `clinical-research-attachments/${task.id}/${fileName}`;

      const fileRef = ref(storage, storagePath);
      await uploadBytes(fileRef, file);
      const downloadURL = await getDownloadURL(fileRef);

      return {
        id: `${timestamp}_${Math.random().toString(36).substr(2, 9)}`,
        fileName: file.name,
        storagePath,
        downloadURL,
        contentType: file.type,
        size: file.size,
        uploadedAt: new Date().toISOString(),
        uploadedBy: currentUser?.uid
      };
    } catch (error) {
      console.error('B≈ÇƒÖd podczas przesy≈Çania pliku:', error);
      throw error;
    }
  };

  // Funkcja do obs≈Çugi wyboru plik√≥w
  const handleClinicalFileSelect = async (files) => {
    if (!files || files.length === 0) return;

    setUploadingClinical(true);
    const newAttachments = [...clinicalAttachments];

    try {
      for (const file of files) {
        try {
          const uploadedFile = await uploadClinicalFile(file);
          newAttachments.push(uploadedFile);
          showSuccess(`Plik "${file.name}" zosta≈Ç przes≈Çany pomy≈õlnie`);
        } catch (error) {
          showError(`B≈ÇƒÖd podczas przesy≈Çania pliku "${file.name}": ${error.message}`);
        }
      }

      // Zapisz za≈ÇƒÖczniki w bazie danych
      const taskRef = doc(db, 'productionTasks', task.id);
      await updateDoc(taskRef, {
        clinicalAttachments: newAttachments,
        updatedAt: serverTimestamp(),
        updatedBy: currentUser.uid
      });

      setClinicalAttachments(newAttachments);
    } finally {
      setUploadingClinical(false);
    }
  };

  // Funkcja do usuwania pliku
  const handleDeleteClinicalFile = async (attachment) => {
    try {
      const fileRef = ref(storage, attachment.storagePath);
      await deleteObject(fileRef);

      const updatedAttachments = clinicalAttachments.filter(a => a.id !== attachment.id);
      
      // Zaktualizuj bazƒô danych
      const taskRef = doc(db, 'productionTasks', task.id);
      await updateDoc(taskRef, {
        clinicalAttachments: updatedAttachments,
        updatedAt: serverTimestamp(),
        updatedBy: currentUser.uid
      });

      setClinicalAttachments(updatedAttachments);
      showSuccess(`Plik "${attachment.fileName}" zosta≈Ç usuniƒôty`);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas usuwania pliku:', error);
      showError(`B≈ÇƒÖd podczas usuwania pliku: ${error.message}`);
    }
  };

  // Funkcja do pobierania pliku
  const handleDownloadClinicalFile = (attachment) => {
    window.open(attachment.downloadURL, '_blank');
  };

  // Funkcja do uzyskania ikony pliku
  const getClinicalFileIcon = (contentType) => {
    if (contentType.startsWith('image/')) {
      return <ImageIcon sx={{ color: 'primary.main' }} />;
    } else if (contentType === 'application/pdf') {
      return <PdfIcon sx={{ color: 'error.main' }} />;
    } else {
      return <DescriptionIcon sx={{ color: 'action.active' }} />;
    }
  };

  // Funkcja do formatowania rozmiaru pliku
  const formatClinicalFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  // Funkcje dla dodatkowych za≈ÇƒÖcznik√≥w
  const fetchAdditionalAttachments = async () => {
    if (!task?.id) return;
    
    try {
      const taskRef = doc(db, 'productionTasks', task.id);
      const taskDoc = await getDoc(taskRef);
      
      if (taskDoc.exists()) {
        const taskData = taskDoc.data();
        setAdditionalAttachments(taskData.additionalAttachments || []);
      }
    } catch (error) {
      console.warn('B≈ÇƒÖd podczas pobierania dodatkowych za≈ÇƒÖcznik√≥w:', error);
    }
  };

  const uploadAdditionalFile = async (file) => {
    try {
      const maxSize = 20 * 1024 * 1024; // 20MB dla dodatkowych za≈ÇƒÖcznik√≥w
      if (file.size > maxSize) {
        throw new Error('Plik jest za du≈ºy. Maksymalny rozmiar to 20MB.');
      }

      const allowedTypes = [
        'application/pdf',
        'image/jpeg',
        'image/png',
        'image/gif',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'text/plain',
        'application/vnd.ms-excel',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
      ];
      
      if (!allowedTypes.includes(file.type)) {
        throw new Error('Nieobs≈Çugiwany typ pliku. Dozwolone: PDF, JPG, PNG, GIF, DOC, DOCX, TXT, XLS, XLSX');
      }

      const timestamp = new Date().getTime();
      const sanitizedFileName = file.name.replace(/[^a-zA-Z0-9.-]/g, '_');
      const fileName = `${timestamp}_${sanitizedFileName}`;
      const storagePath = `additional-attachments/${task.id}/${fileName}`;

      const fileRef = ref(storage, storagePath);
      await uploadBytes(fileRef, file);
      const downloadURL = await getDownloadURL(fileRef);

      return {
        id: `${timestamp}_${Math.random().toString(36).substr(2, 9)}`,
        fileName: file.name,
        storagePath,
        downloadURL,
        contentType: file.type,
        size: file.size,
        uploadedAt: new Date().toISOString(),
        uploadedBy: currentUser?.uid
      };
    } catch (error) {
      console.error('B≈ÇƒÖd podczas przesy≈Çania pliku:', error);
      throw error;
    }
  };

  const handleAdditionalFileSelect = async (files) => {
    if (!files || files.length === 0) return;

    setUploadingAdditional(true);
    const newAttachments = [...additionalAttachments];

    try {
      for (const file of files) {
        try {
          const uploadedFile = await uploadAdditionalFile(file);
          newAttachments.push(uploadedFile);
          showSuccess(`Plik "${file.name}" zosta≈Ç przes≈Çany pomy≈õlnie`);
        } catch (error) {
          showError(`B≈ÇƒÖd podczas przesy≈Çania pliku "${file.name}": ${error.message}`);
        }
      }

      const taskRef = doc(db, 'productionTasks', task.id);
      await updateDoc(taskRef, {
        additionalAttachments: newAttachments,
        updatedAt: serverTimestamp(),
        updatedBy: currentUser.uid
      });

      setAdditionalAttachments(newAttachments);
    } finally {
      setUploadingAdditional(false);
    }
  };

  const handleDeleteAdditionalFile = async (attachment) => {
    try {
      const fileRef = ref(storage, attachment.storagePath);
      await deleteObject(fileRef);

      const updatedAttachments = additionalAttachments.filter(a => a.id !== attachment.id);
      
      const taskRef = doc(db, 'productionTasks', task.id);
      await updateDoc(taskRef, {
        additionalAttachments: updatedAttachments,
        updatedAt: serverTimestamp(),
        updatedBy: currentUser.uid
      });

      setAdditionalAttachments(updatedAttachments);
      showSuccess(`Plik "${attachment.fileName}" zosta≈Ç usuniƒôty`);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas usuwania pliku:', error);
      showError(`B≈ÇƒÖd podczas usuwania pliku: ${error.message}`);
    }
  };

  const handleDownloadAdditionalFile = (attachment) => {
    window.open(attachment.downloadURL, '_blank');
  };

  // Funkcja do pobierania za≈ÇƒÖcznik√≥w z partii sk≈Çadnik√≥w
  const fetchIngredientBatchAttachments = async () => {
    if (!task?.recipe?.ingredients || !task?.consumedMaterials || materials.length === 0) {
      return;
    }

    try {
      const attachments = {};

      // Dla ka≈ºdego sk≈Çadnika receptury
      for (const ingredient of task.recipe.ingredients) {
        const ingredientAttachments = [];

        // Znajd≈∫ skonsumowane materia≈Çy pasujƒÖce do tego sk≈Çadnika
        const matchingConsumedMaterials = task.consumedMaterials.filter(consumed => {
          // Znajd≈∫ materia≈Ç w li≈õcie materia≈Ç√≥w zadania
          const material = materials.find(m => (m.inventoryItemId || m.id) === consumed.materialId);
          const materialName = consumed.materialName || material?.name || '';
          
          // Sprawd≈∫ czy nazwa materia≈Çu pasuje do nazwy sk≈Çadnika (case-insensitive)
          return materialName.toLowerCase().includes(ingredient.name.toLowerCase()) ||
                 ingredient.name.toLowerCase().includes(materialName.toLowerCase());
        });

        // Dla ka≈ºdego pasujƒÖcego skonsumowanego materia≈Çu pobierz za≈ÇƒÖczniki z partii
        for (const consumed of matchingConsumedMaterials) {
          if (consumed.batchId) {
            try {
              // Pobierz dane partii magazynowej
              const { getInventoryBatch } = await import('../../services/inventory');
              const batchData = await getInventoryBatch(consumed.batchId);
              
              // Sprawd≈∫ czy partia ma za≈ÇƒÖczniki lub certyfikat
              const hasAttachments = (batchData.attachments && batchData.attachments.length > 0);
              const hasCertificate = (batchData.certificateFileName && batchData.certificateDownloadURL);
              
              if (hasAttachments || hasCertificate) {
                const batchAttachments = [];
                
                // Dodaj standardowe za≈ÇƒÖczniki (je≈õli istniejƒÖ)
                if (hasAttachments) {
                  const attachments = batchData.attachments.map(attachment => ({
                    ...attachment,
                    batchNumber: consumed.batchNumber || batchData.lotNumber || batchData.batchNumber,
                    batchId: consumed.batchId,
                    materialName: consumed.materialName || 'Nieznany materia≈Ç',
                    source: 'batch_attachment'
                  }));
                  batchAttachments.push(...attachments);
                }
                
                // Dodaj certyfikat jako za≈ÇƒÖcznik (je≈õli istnieje)
                if (hasCertificate) {
                  const certificateAttachment = {
                    id: `cert_${batchData.id}`,
                    fileName: batchData.certificateFileName,
                    downloadURL: batchData.certificateDownloadURL,
                    contentType: batchData.certificateContentType || 'application/octet-stream',
                    size: 0, // Brak informacji o rozmiarze dla starych certyfikat√≥w
                    uploadedAt: batchData.certificateUploadedAt?.toDate?.() || new Date(),
                    batchNumber: consumed.batchNumber || batchData.lotNumber || batchData.batchNumber,
                    batchId: consumed.batchId,
                    materialName: consumed.materialName || 'Nieznany materia≈Ç',
                    source: 'batch_certificate'
                  };
                  batchAttachments.push(certificateAttachment);
                }
                
                ingredientAttachments.push(...batchAttachments);
              }
            } catch (error) {
              console.warn(`Nie uda≈Ço siƒô pobraƒá za≈ÇƒÖcznik√≥w dla partii ${consumed.batchId}:`, error);
            }
          }
        }

        // Usu≈Ñ duplikaty za≈ÇƒÖcznik√≥w (po nazwie pliku)
        const uniqueAttachments = ingredientAttachments.filter((attachment, index, self) => 
          index === self.findIndex(a => a.fileName === attachment.fileName)
        );

        if (uniqueAttachments.length > 0) {
          attachments[ingredient.name] = uniqueAttachments;
        }
      }

      setIngredientBatchAttachments(attachments);
    } catch (error) {
      console.warn('B≈ÇƒÖd podczas pobierania za≈ÇƒÖcznik√≥w z partii sk≈Çadnik√≥w:', error);
    }
  };

  // Funkcja naprawy danych receptury dla starych zada≈Ñ
  const handleFixRecipeData = async () => {
    if (!task?.recipeId) {
      showError('Brak ID receptury w zadaniu');
      return;
    }

    try {
      setFixingRecipeData(true);
      showInfo('Pobieranie aktualnych danych receptury...');
      
      // Pobierz pe≈Çne dane receptury
      let recipeData = null;
      
      if (task.recipeVersion) {
        // Je≈õli mamy wersjƒô, pobierz konkretnƒÖ wersjƒô receptury
        try {
          const recipeVersion = await getRecipeVersion(task.recipeId, task.recipeVersion);
          recipeData = recipeVersion.data;
          console.log(`Pobrano dane wersji ${task.recipeVersion} receptury ${task.recipeId}`);
        } catch (error) {
          console.warn(`Nie uda≈Ço siƒô pobraƒá wersji ${task.recipeVersion}, pr√≥bujƒô pobraƒá aktualnƒÖ recepturƒô:`, error);
          // Je≈õli nie uda≈Ço siƒô pobraƒá konkretnej wersji, pobierz aktualnƒÖ recepturƒô
          const { getRecipeById } = await import('../../services/recipeService');
          recipeData = await getRecipeById(task.recipeId);
          console.log('Pobrano aktualnƒÖ wersjƒô receptury');
        }
      } else {
        // Je≈õli nie ma wersji, pobierz aktualnƒÖ recepturƒô
        const { getRecipeById } = await import('../../services/recipeService');
        recipeData = await getRecipeById(task.recipeId);
        console.log('Pobrano aktualnƒÖ recepturƒô (brak wersji w zadaniu)');
      }

      if (!recipeData) {
        throw new Error('Nie uda≈Ço siƒô pobraƒá danych receptury');
      }

      // Sprawd≈∫ czy sƒÖ nowe dane do zaktualizowania
      const hasNewMicronutrients = recipeData.micronutrients && recipeData.micronutrients.length > 0;
      const hasNewIngredients = recipeData.ingredients && recipeData.ingredients.length > 0;
      const currentMicronutrients = task.recipe?.micronutrients || [];
      const currentIngredients = task.recipe?.ingredients || [];

      // Zaktualizuj zadanie w bazie danych z pe≈Çnymi danymi receptury
      const taskRef = doc(db, 'productionTasks', id);
      await updateDoc(taskRef, {
        recipe: recipeData,
        updatedAt: serverTimestamp(),
        updatedBy: currentUser.uid
      });

      // Zaktualizuj lokalny stan
      setTask(prevTask => ({
        ...prevTask,
        recipe: recipeData
      }));

      // Poka≈º szczeg√≥≈ÇowƒÖ informacjƒô o tym co zosta≈Ço zaktualizowane
      let updateDetails = [];
      if (hasNewMicronutrients && currentMicronutrients.length === 0) {
        updateDetails.push(`${recipeData.micronutrients.length} mikroelement√≥w`);
      }
      if (hasNewIngredients && currentIngredients.length === 0) {
        updateDetails.push(`${recipeData.ingredients.length} sk≈Çadnik√≥w`);
      }

      if (updateDetails.length > 0) {
        showSuccess(`Dane receptury zosta≈Çy zaktualizowane! Dodano: ${updateDetails.join(', ')}`);
      } else {
        showSuccess('Dane receptury zosta≈Çy od≈õwie≈ºone!');
      }
      
      console.log('Od≈õwie≈ºono dane receptury dla zadania:', id);

    } catch (error) {
      console.error('B≈ÇƒÖd podczas od≈õwie≈ºania danych receptury:', error);
      showError('Nie uda≈Ço siƒô od≈õwie≈ºyƒá danych receptury: ' + error.message);
    } finally {
      setFixingRecipeData(false);
    }
  };

  // Funkcja do pobierania danych firmy
  const fetchCompanyData = async () => {
    try {
      const data = await getCompanyData();
      setCompanyData(data);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania danych firmy:', error);
      // U≈ºywamy domy≈õlnych warto≈õci przy b≈Çƒôdzie
      setCompanyData({
        name: 'BGW Pharma Sp. z o.o.',
        address: 'Szkolna 43B, 84-100 Polchowo'
      });
    }
  };

  // Funkcja do pobierania danych stanowiska
  const fetchWorkstationData = async () => {
    try {
      if (task?.workstationId) {
        const data = await getWorkstationById(task.workstationId);
        setWorkstationData(data);
      } else {
        // Je≈õli nie ma workstationId, ustaw pusty obiekt aby zatrzymaƒá "≈Åadowanie..."
        setWorkstationData({});
      }
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania danych stanowiska:', error);
      setWorkstationData(null);
    }
  };

  // Funkcja do zapisywania alergen√≥w do receptury
  const saveAllergensToRecipe = async (recipeId, allergens) => {
    try {
      // Pobierz aktualnƒÖ recepturƒô
      const { getRecipeById, updateRecipe } = await import('../../services/recipeService');
      const currentRecipe = await getRecipeById(recipeId);
      
      if (!currentRecipe) {
        throw new Error('Nie znaleziono receptury');
      }
      
      // Sprawd≈∫ czy alergeny siƒô zmieni≈Çy
      const currentAllergens = currentRecipe.allergens || [];
      const sortedCurrentAllergens = [...currentAllergens].sort();
      const sortedNewAllergens = [...allergens].sort();
      
      if (JSON.stringify(sortedCurrentAllergens) === JSON.stringify(sortedNewAllergens)) {
        console.log('Alergeny sƒÖ identyczne, pomijam aktualizacjƒô receptury');
        return;
      }
      
      // Zaktualizuj recepturƒô z nowymi allergenami
      const updatedRecipeData = {
        ...currentRecipe,
        allergens: allergens,
        updatedAt: new Date()
      };
      
      await updateRecipe(recipeId, updatedRecipeData, currentUser.uid);
      console.log(`Zaktualizowano alergeny w recepturze ${recipeId}:`, allergens);
      
    } catch (error) {
      console.error('B≈ÇƒÖd podczas zapisywania alergen√≥w do receptury:', error);
      throw error;
    }
  };

  // Funkcja do generowania raportu PDF
  const handleGenerateEndProductReport = async () => {
    if (!task) {
      showError('Brak danych zadania do wygenerowania raportu');
      return;
    }

    try {
      setGeneratingPDF(true);
      showInfo('Generowanie raportu PDF...');

      // Przygotowanie za≈ÇƒÖcznik√≥w w formacie oczekiwanym przez funkcjƒô PDF
      const attachments = [];
      
      // Dodaj za≈ÇƒÖczniki bada≈Ñ klinicznych
      if (clinicalAttachments && clinicalAttachments.length > 0) {
        clinicalAttachments.forEach(attachment => {
          if (attachment.downloadURL && attachment.fileName) {
            const fileExtension = attachment.fileName.split('.').pop().toLowerCase();
            const fileType = ['pdf', 'png', 'jpg', 'jpeg'].includes(fileExtension) ? fileExtension : 'pdf';
            
            attachments.push({
              fileName: attachment.fileName,
              fileType: fileType,
              fileUrl: attachment.downloadURL
            });
          }
        });
      }
      
      // Dodaj za≈ÇƒÖczniki z PO (fizykochemiczne)
      if (ingredientAttachments && Object.keys(ingredientAttachments).length > 0) {
        Object.values(ingredientAttachments).flat().forEach(attachment => {
          if ((attachment.downloadURL || attachment.fileUrl) && attachment.fileName) {
            const fileExtension = attachment.fileName.split('.').pop().toLowerCase();
            const fileType = ['pdf', 'png', 'jpg', 'jpeg'].includes(fileExtension) ? fileExtension : 'pdf';
            
            attachments.push({
              fileName: attachment.fileName,
              fileType: fileType,
              fileUrl: attachment.downloadURL || attachment.fileUrl
            });
          }
        });
      }
      
      // Dodaj dodatkowe za≈ÇƒÖczniki
      if (additionalAttachments && additionalAttachments.length > 0) {
        additionalAttachments.forEach(attachment => {
          if (attachment.downloadURL && attachment.fileName) {
            const fileExtension = attachment.fileName.split('.').pop().toLowerCase();
            const fileType = ['pdf', 'png', 'jpg', 'jpeg'].includes(fileExtension) ? fileExtension : 'pdf';
            
            attachments.push({
              fileName: attachment.fileName,
              fileType: fileType,
              fileUrl: attachment.downloadURL
            });
          }
        });
      }
      
      // Dodaj za≈ÇƒÖczniki z partii sk≈Çadnik√≥w
      if (ingredientBatchAttachments && Object.keys(ingredientBatchAttachments).length > 0) {
        Object.values(ingredientBatchAttachments).flat().forEach(attachment => {
          if ((attachment.downloadURL || attachment.fileUrl) && attachment.fileName) {
            const fileExtension = attachment.fileName.split('.').pop().toLowerCase();
            const fileType = ['pdf', 'png', 'jpg', 'jpeg'].includes(fileExtension) ? fileExtension : 'pdf';
            
            attachments.push({
              fileName: attachment.fileName,
              fileType: fileType,
              fileUrl: attachment.downloadURL || attachment.fileUrl
            });
          }
        });
      }
      
      // Dodaj za≈ÇƒÖczniki z raport√≥w CompletedMO
      if (formResponses?.completedMO && formResponses.completedMO.length > 0) {
        formResponses.completedMO.forEach((report, index) => {
          if (report.mixingPlanReportUrl && report.mixingPlanReportName) {
            const fileExtension = report.mixingPlanReportName.split('.').pop().toLowerCase();
            const fileType = ['pdf', 'png', 'jpg', 'jpeg'].includes(fileExtension) ? fileExtension : 'pdf';
            
            attachments.push({
              fileName: `CompletedMO_Report_${index + 1}_${report.mixingPlanReportName}`,
              fileType: fileType,
              fileUrl: report.mixingPlanReportUrl
            });
          }
        });
      }
      
      // Dodaj za≈ÇƒÖczniki z raport√≥w ProductionControl
      if (formResponses?.productionControl && formResponses.productionControl.length > 0) {
        formResponses.productionControl.forEach((report, index) => {
          // Document scans
          if (report.documentScansUrl && report.documentScansName) {
            const fileExtension = report.documentScansName.split('.').pop().toLowerCase();
            const fileType = ['pdf', 'png', 'jpg', 'jpeg'].includes(fileExtension) ? fileExtension : 'pdf';
            
            attachments.push({
              fileName: `ProductionControl_Report_${index + 1}_${report.documentScansName}`,
              fileType: fileType,
              fileUrl: report.documentScansUrl
            });
          }
          
          // Product photos
          const photoFields = [
            { url: report.productPhoto1Url, name: report.productPhoto1Name, label: 'Photo1' },
            { url: report.productPhoto2Url, name: report.productPhoto2Name, label: 'Photo2' },
            { url: report.productPhoto3Url, name: report.productPhoto3Name, label: 'Photo3' }
          ];
          
          photoFields.forEach(photo => {
            if (photo.url && photo.name) {
              const fileExtension = photo.name.split('.').pop().toLowerCase();
              const fileType = ['pdf', 'png', 'jpg', 'jpeg'].includes(fileExtension) ? fileExtension : 'jpg';
              
              attachments.push({
                fileName: `ProductionControl_Report_${index + 1}_${photo.label}_${photo.name}`,
                fileType: fileType,
                fileUrl: photo.url
              });
            }
          });
        });
      }

      // Usuniƒôcie duplikat√≥w za≈ÇƒÖcznik√≥w na podstawie nazwy pliku
      const uniqueAttachments = attachments.filter((attachment, index, self) => 
        index === self.findIndex(a => a.fileName === attachment.fileName)
      );

      console.log('Za≈ÇƒÖczniki do dodania do raportu:', uniqueAttachments);

      // Przygotowanie danych dodatkowych dla raportu z opcjami optymalizacji PDF
      const additionalData = {
        companyData,
        workstationData,
        productionHistory,
        formResponses,
        clinicalAttachments,
        additionalAttachments,
        ingredientAttachments,
        ingredientBatchAttachments,
        materials,
        currentUser,
        selectedAllergens,
        attachments: uniqueAttachments, // Dodajemy za≈ÇƒÖczniki w odpowiednim formacie
        options: {
          useTemplate: true,           // U≈ºyj szablon t≈Ça (mo≈ºna zmieniƒá na false dla oszczƒôdno≈õci miejsca)
          imageQuality: 0.75,          // Jako≈õƒá kompresji obrazu (0.1-1.0) - zoptymalizowane dla rozmiaru
          enableCompression: true,     // W≈ÇƒÖcz kompresjƒô PDF
          precision: 2,                // Ogranicz precyzjƒô do 2 miejsc po przecinku
          // Zaawansowane opcje kompresji za≈ÇƒÖcznik√≥w
          attachmentCompression: {
            enabled: true,
            imageQuality: 0.75,        // Jako≈õƒá kompresji za≈ÇƒÖcznik√≥w obrazowych (75% - dobry balans)
            maxImageWidth: 1200,       // Maksymalna szeroko≈õƒá obrazu w pikselach
            maxImageHeight: 1600,      // Maksymalna wysoko≈õƒá obrazu w pikselach
            convertPngToJpeg: true     // Konwertuj PNG na JPEG dla lepszej kompresji
          }
        }
      };

      // Generowanie raportu PDF
      const result = await generateEndProductReportPDF(task, additionalData);
      
      if (result.success) {
        // Zapisz alergeny do receptury je≈õli zosta≈Çy wybrane i zadanie ma przypisanƒÖ recepturƒô
        if (selectedAllergens.length > 0 && task.recipeId) {
          try {
            await saveAllergensToRecipe(task.recipeId, selectedAllergens);
            showInfo('Alergeny zosta≈Çy zapisane do receptury');
          } catch (allergenError) {
            console.error('B≈ÇƒÖd podczas zapisywania alergen√≥w do receptury:', allergenError);
            showWarning('Raport zosta≈Ç wygenerowany, ale nie uda≈Ço siƒô zapisaƒá alergen√≥w do receptury');
          }
        }
        
        if (result.withAttachments) {
          showSuccess(`Raport PDF zosta≈Ç wygenerowany z za≈ÇƒÖcznikami (${uniqueAttachments.length}): ${result.fileName}`);
        } else {
          showSuccess(`Raport PDF zosta≈Ç wygenerowany: ${result.fileName}${uniqueAttachments.length > 0 ? ' (za≈ÇƒÖczniki nie zosta≈Çy dodane z powodu b≈Çƒôdu)' : ''}`);
        }
      } else {
        showError('WystƒÖpi≈Ç b≈ÇƒÖd podczas generowania raportu PDF');
      }
    } catch (error) {
      console.error('B≈ÇƒÖd podczas generowania raportu PDF:', error);
      showError(`B≈ÇƒÖd generowania raportu: ${error.message}`);
    } finally {
      setGeneratingPDF(false);
    }
  };

  // Funkcja do aktualizacji stanu element√≥w checklisty planu miesza≈Ñ
  const handleChecklistItemUpdate = async (itemId, completed) => {
    try {
      const taskRef = doc(db, 'productionTasks', task.id);
      const updatedChecklist = task.mixingPlanChecklist.map(checkItem => {
        if (checkItem.id === itemId) {
          return {
            ...checkItem,
            completed: completed,
            completedAt: completed ? new Date().toISOString() : null,
            completedBy: completed ? currentUser.uid : null
          };
        }
        return checkItem;
      });

      await updateDoc(taskRef, {
        mixingPlanChecklist: updatedChecklist,
        updatedAt: serverTimestamp(),
        updatedBy: currentUser.uid
      });

      setTask(prevTask => ({
        ...prevTask,
        mixingPlanChecklist: updatedChecklist
      }));

      showSuccess('Zaktualizowano stan zadania');
    } catch (error) {
      console.error('B≈ÇƒÖd podczas aktualizacji stanu checklisty:', error);
      showError('Nie uda≈Ço siƒô zaktualizowaƒá stanu zadania');
    }
  };

  // Inicjalizacja stanu checkbox√≥w dla skonsumowanych materia≈Ç√≥w
  useEffect(() => {
    if (task?.consumedMaterials && materials.length > 0) {
      const consumedSettings = {};
      let hasChanges = false;
      
      task.consumedMaterials.forEach((consumed, index) => {
        // Sprawd≈∫ czy konsumpcja ma ju≈º ustawienie includeInCosts
        if (consumed.includeInCosts !== undefined) {
          consumedSettings[index] = consumed.includeInCosts;
        } else {
          // Je≈õli nie ma, ustaw na podstawie ustawienia materia≈Çu
          const material = materials.find(m => 
            (m.inventoryItemId || m.id) === consumed.materialId
          );
          if (material) {
            const materialId = material.inventoryItemId || material.id;
            // U≈ºyj ustawienia z includeInCosts lub domy≈õlnie true
            consumedSettings[index] = includeInCosts[materialId] !== false;
          } else {
            consumedSettings[index] = true; // domy≈õlnie true
          }
        }
        
        // Sprawd≈∫ czy to ustawienie siƒô zmieni≈Ço
        if (consumedIncludeInCosts[index] !== consumedSettings[index]) {
          hasChanges = true;
        }
      });
      
      // Aktualizuj stan tylko je≈õli sƒÖ zmiany
      if (hasChanges || Object.keys(consumedIncludeInCosts).length === 0) {
        setConsumedIncludeInCosts(consumedSettings);
      }
    }
  }, [task?.consumedMaterials?.length, materials.length, includeInCosts]); // Kontrolowane zale≈ºno≈õci

  // Pobieranie danych firmy i stanowiska dla raportu
  useEffect(() => {
    if (mainTab === 5) { // Tylko gdy jeste≈õmy w zak≈Çadce "Raport gotowego produktu"
      fetchCompanyData();
      fetchWorkstationData();
    }
  }, [mainTab, task?.workstationId]);

  // Renderuj stronƒô
    return (
      <Container maxWidth="xl">
      {loading ? (
        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
          <CircularProgress />
        </Box>
      ) : task ? (
        <>
          {/* Pasek nawigacyjny i przyciski akcji (Edytuj, Usu≈Ñ) - pozostaje na g√≥rze */}
          <Box sx={{
            display: 'flex',
            flexDirection: isMobile ? 'column' : 'row',
            justifyContent: 'space-between',
            alignItems: isMobile ? 'flex-start' : 'center',
            mb: 3
          }}>
            <Button
              component={Link}
              to="/production"
              startIcon={<ArrowBackIcon />}
              sx={{ mb: isMobile ? 2 : 0 }}
            >
              {t('backToTaskList')}
            </Button>

            <Box sx={{
              display: 'flex',
              flexDirection: isMobile ? 'row' : 'row',
              gap: 1,
              justifyContent: isMobile ? 'flex-start' : 'flex-end',
              width: isMobile ? '100%' : 'auto',
              mb: isMobile ? 2 : 0
            }}>
              <IconButton
                color="primary"
                component={Link}
                to={`/production/tasks/${id}/edit?returnTo=details`}
                title={t('editTask')}
                sx={{ mr: isMobile ? 1 : 1 }}
              >
                <EditIcon />
              </IconButton>
              <IconButton
                color="error"
                onClick={() => setDeleteDialog(true)}
                title={t('deleteTask')}
              >
                <DeleteIcon />
              </IconButton>
            </Box>
          </Box>

          {/* G≈Ç√≥wne zak≈Çadki */}
          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
            <Tabs value={mainTab} onChange={handleMainTabChange} aria-label="G≈Ç√≥wne zak≈Çadki szczeg√≥≈Ç√≥w zadania" variant="scrollable" scrollButtons="auto">
              <Tab label={t('tabs.basicData')} icon={<InfoIcon />} iconPosition="start" />
              <Tab label={t('tabs.materialsAndCosts')} icon={<Materials2Icon />} iconPosition="start" />
              <Tab label={t('tabs.productionAndPlan')} icon={<ProductionIcon />} iconPosition="start" />
              <Tab label={t('tabs.forms')} icon={<FormIcon />} iconPosition="start" />
              <Tab label={t('tabs.changeHistory')} icon={<TimelineIcon />} iconPosition="start" />
              <Tab label={t('tabs.finishedProductReport')} icon={<AssessmentIcon />} iconPosition="start" />
            </Tabs>
          </Box>

          {/* Zawarto≈õƒá zak≈Çadek */}
          {mainTab === 0 && ( // Zak≈Çadka "Dane podstawowe"
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Paper sx={{ p: 3 }}>
                  <Box sx={{
                    display: 'flex',
                    flexDirection: isMobile ? 'column' : 'row',
                    justifyContent: 'space-between',
                    alignItems: isMobile ? 'flex-start' : 'center',
                    mb: 2
                  }}>
                    <Typography variant="h5" component="h1" sx={{ mb: isMobile ? 2 : 0 }}>
                      {task.name}
                      <Chip label={task.moNumber || 'MO'} color="primary" size="small" sx={{ ml: 2 }} />
                      <Chip 
              label={task.status} 
              size="small" 
              sx={{ 
                ml: 1,
                backgroundColor: getStatusColor(task.status),
                color: 'white'
              }} 
            />
                      {(() => {
                        const reservationStatus = calculateMaterialReservationStatus(task);
                        const statusColors = getReservationStatusColors(reservationStatus.status);
                        
                        return (
                          <Chip 
                            label={`${t('materialsLabel')}: ${reservationStatus.label}`} 
                            size="small" 
                            sx={{ 
                              ml: 1,
                              backgroundColor: statusColors.main,
                              color: statusColors.contrastText
                            }} 
                          />
                        );
                      })()}

                    </Typography>
                    <Box sx={{ width: isMobile ? '100%' : 'auto' }}>
                      {getStatusActions()}
                    </Box>
                  </Box>
                  <Grid container spacing={2}>
                    <Grid item xs={12} md={6}><Typography variant="subtitle1" sx={{ fontWeight: 'bold' }}>{t('product')}:</Typography><Typography variant="body1">{task.productName}</Typography></Grid>
                    <Grid item xs={12} md={6}><Typography variant="subtitle1" sx={{ fontWeight: 'bold' }}>{t('quantity')}:</Typography><Typography variant="body1">{task.quantity} {task.unit}</Typography></Grid>
                    <Grid item xs={12} md={6}>
                      <Typography variant="subtitle1" sx={{ fontWeight: 'bold' }}>{t('produced')}:</Typography>
                      <Typography variant="body1">
                        {task.totalCompletedQuantity || 0} {task.unit}
                        {task.totalCompletedQuantity > 0 && (
                          <Typography component="span" variant="caption" sx={{ ml: 1, color: 'text.secondary' }}>
                            ({((task.totalCompletedQuantity / task.quantity) * 100).toFixed(1)}%)
                          </Typography>
                        )}
                      </Typography>
                    </Grid>
                    {task.inventoryProductId && (
                      <Grid item xs={12} md={6}>
                        <Typography variant="subtitle1" sx={{ fontWeight: 'bold' }}>{t('inventoryItem')}:</Typography>
                        <Box sx={{ mt: 1 }}>
                          <Chip 
                            label={task.productName}
                            color="primary"
                            variant="outlined"
                            clickable
                            onClick={() => navigate(`/inventory/${task.inventoryProductId}`)}
                            icon={<InventoryIcon />}
                            sx={{ 
                              cursor: 'pointer',
                              '&:hover': {
                                backgroundColor: 'primary.light',
                                color: 'white'
                              }
                            }}
                          />
                        </Box>
                      </Grid>
                    )}
                    {task.estimatedDuration > 0 && (<Grid item xs={12} md={6}><Typography variant="subtitle1" sx={{ fontWeight: 'bold' }}>{t('estimatedDuration')}:</Typography><Typography variant="body1">{(task.estimatedDuration / 60).toFixed(1)} {t('hours')}</Typography></Grid>)}
                    {(task.recipe && task.recipe.recipeName) || (task.recipeId && task.recipeName) ? (
                      <Grid item xs={12} md={6}>
                        <Typography variant="subtitle1" sx={{ fontWeight: 'bold' }}>{t('recipe')}:</Typography>
                        <Typography variant="body1">
                          <Link to={`/recipes/${task.recipe?.recipeId || task.recipeId}`}>
                            {task.recipe?.recipeName || task.recipeName}
                            {task.recipeVersion && (
                              <Typography component="span" variant="caption" sx={{ ml: 1, color: 'text.secondary' }}>
                                ({t('version')} {task.recipeVersion})
                              </Typography>
                            )}
                          </Link>
                        </Typography>
                      </Grid>
                    ) : null}
                    <Grid item xs={12}><Typography variant="subtitle1" sx={{ fontWeight: 'bold' }}>{t('description')}:</Typography><Typography variant="body1">{task.description || t('noDescription')}</Typography></Grid>
                  </Grid>
                </Paper>
              </Grid>
              <Grid item xs={12}>
                <TaskDetails task={task} />
              </Grid>
            </Grid>
          )}

          {mainTab === 1 && ( // Zak≈Çadka "Materia≈Çy i Koszty"
            <Grid container spacing={3}>
              {/* Sekcja materia≈Ç√≥w */}
              <Grid item xs={12}>
                <Paper sx={{ p: 3 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                    <Typography variant="h6" component="h2">{t('materials.title')}</Typography>
                    <Box>
                      <Button variant="outlined" color="primary" startIcon={<PackagingIcon />} onClick={handleOpenPackagingDialog} sx={{ mt: 2, mb: 2, mr: 2 }}>{t('materials.addPackaging')}</Button>
                      <Button variant="outlined" color="secondary" startIcon={<RawMaterialsIcon />} onClick={handleOpenRawMaterialsDialog} sx={{ mt: 2, mb: 2, mr: 2 }}>{t('materials.addRawMaterials')}</Button>
                      <Button variant="outlined" color="primary" startIcon={<BookmarkAddIcon />} onClick={() => setReserveDialogOpen(true)} sx={{ mt: 2, mb: 2, mr: 2 }}>{t('materials.reserveMaterials')}</Button>
                      <Button variant="outlined" color="warning" startIcon={<InventoryIcon />} onClick={handleOpenConsumeMaterialsDialog} sx={{ mt: 2, mb: 2 }} disabled={!materials.some(material => { const materialId = material.inventoryItemId || material.id; const reservedBatches = task.materialBatches && task.materialBatches[materialId]; return reservedBatches && reservedBatches.length > 0; })}>{t('materials.consumeMaterials')}</Button>
                    </Box>
                  </Box>
                  <TableContainer>
                    <Table>
                      <TableHead><TableRow><TableCell>{t('materials.table.name')}</TableCell><TableCell>{t('materials.table.quantity')}</TableCell><TableCell>{t('materials.table.unit')}</TableCell><TableCell>{t('materials.table.actualQuantity')}</TableCell><TableCell>{t('materials.table.issuedQuantity')}</TableCell><TableCell>{t('materials.table.consumedQuantity')}</TableCell><TableCell>{t('materials.table.unitPrice')}</TableCell><TableCell>{t('materials.table.cost')}</TableCell><TableCell>{t('materials.table.reservedBatches')}</TableCell><TableCell>{t('materials.table.include')}</TableCell><TableCell>{t('materials.table.actions')}</TableCell></TableRow></TableHead>
                      <TableBody>
                        {materials.map((material) => {
                          const materialId = material.inventoryItemId || material.id;
                          const reservedBatches = task.materialBatches && task.materialBatches[materialId];
                          const quantity = materialQuantities[material.id] || material.quantity || 0;
                          // U≈ºyj ≈õredniej wa≈ºonej ceny uwzglƒôdniajƒÖcej rezerwacje PO
                          const unitPrice = calculateWeightedUnitPrice(material, materialId);
                          const cost = quantity * unitPrice;
                          
                          // Oblicz pokrycie rezerwacji dla kolorowania wiersza
                          const reservationCoverage = calculateMaterialReservationCoverage(material, materialId);
                          const rowBackgroundColor = reservationCoverage.hasFullCoverage ? 'rgba(76, 175, 80, 0.08)' : 'transparent';
                          
                          return (
                            <TableRow 
                              key={material.id}
                              sx={{ 
                                backgroundColor: rowBackgroundColor,
                                '&:hover': { 
                                  backgroundColor: reservationCoverage.hasFullCoverage 
                                    ? 'rgba(76, 175, 80, 0.12)' 
                                    : 'rgba(0, 0, 0, 0.04)' 
                                }
                              }}
                            >
                              <TableCell>{material.name}</TableCell><TableCell>{material.quantity}</TableCell><TableCell>{material.unit}</TableCell>
                              <TableCell>{editMode ? (<TextField type="number" value={materialQuantities[material.id] || 0} onChange={(e) => handleQuantityChange(material.id, e.target.value)} onWheel={(e) => e.target.blur()} error={Boolean(errors[material.id])} helperText={errors[material.id]} inputProps={{ min: 0, step: 'any' }} size="small" sx={{ width: '130px' }} />) : (materialQuantities[material.id] || 0)}</TableCell>
                              <TableCell>{(() => { const issuedQuantity = calculateIssuedQuantityForMaterial(material.name); return issuedQuantity > 0 ? `${issuedQuantity} ${material.unit}` : '‚Äî'; })()}</TableCell>
                              <TableCell>{(() => { const consumedQuantity = getConsumedQuantityForMaterial(task.consumedMaterials, materialId); return consumedQuantity > 0 ? `${consumedQuantity} ${material.unit}` : '‚Äî'; })()}</TableCell>
                              <TableCell 
                                title={getPriceBreakdownTooltip(material, materialId)}
                                sx={{ cursor: 'help' }}
                              >
                                {(() => {
                                  const activePOReservations = getPOReservationsForMaterial(materialId).filter(reservation => {
                                    if (reservation.status === 'pending') return true;
                                    if (reservation.status === 'delivered') {
                                      const convertedQuantity = reservation.convertedQuantity || 0;
                                      const reservedQuantity = reservation.reservedQuantity || 0;
                                      return convertedQuantity < reservedQuantity;
                                    }
                                    return false;
                                  });
                                  
                                  // Poka≈º cenƒô je≈õli sƒÖ standardowe rezerwacje lub aktywne rezerwacje PO
                                  const hasAnyReservations = (reservedBatches && reservedBatches.length > 0) || activePOReservations.length > 0;
                                  
                                  return hasAnyReservations ? `${unitPrice.toFixed(4)} ‚Ç¨` : '‚Äî';
                                })()}
                              </TableCell>
                              <TableCell>
                                {(() => {
                                  const activePOReservations = getPOReservationsForMaterial(materialId).filter(reservation => {
                                    if (reservation.status === 'pending') return true;
                                    if (reservation.status === 'delivered') {
                                      const convertedQuantity = reservation.convertedQuantity || 0;
                                      const reservedQuantity = reservation.reservedQuantity || 0;
                                      return convertedQuantity < reservedQuantity;
                                    }
                                    return false;
                                  });
                                  
                                  // Poka≈º koszt je≈õli sƒÖ standardowe rezerwacje lub aktywne rezerwacje PO
                                  const hasAnyReservations = (reservedBatches && reservedBatches.length > 0) || activePOReservations.length > 0;
                                  
                                  return hasAnyReservations ? `${cost.toFixed(2)} ‚Ç¨` : '‚Äî';
                                })()}
                              </TableCell>
                              <TableCell>
                                {(() => {
                                  // Standardowe rezerwacje magazynowe
                                  const standardReservations = reservedBatches || [];
                                  
                                  // Rezerwacje z PO dla tego materia≈Çu (tylko te kt√≥re nie zosta≈Çy w pe≈Çni przekszta≈Çcone)
                                  const allPOReservations = getPOReservationsForMaterial(materialId);
                                  const poReservationsForMaterial = allPOReservations
                                    .filter(reservation => {
                                      // Poka≈º chip tylko je≈õli:
                                      // 1. Status to 'pending' (oczekuje na dostawƒô)
                                      // 2. Status to 'delivered' ale nie wszystko zosta≈Ço przekszta≈Çcone
                                      // 3. Status to 'converted' - nie pokazuj wcale
                                      if (reservation.status === 'pending') return true;
                                      if (reservation.status === 'delivered') {
                                        const convertedQuantity = reservation.convertedQuantity || 0;
                                        const reservedQuantity = reservation.reservedQuantity || 0;
                                        return convertedQuantity < reservedQuantity;
                                      }
                                      return false; // nie pokazuj dla 'converted' lub innych status√≥w
                                    });

                                  
                                  // Sprawd≈∫ czy sƒÖ jakiekolwiek rezerwacje
                                  const hasAnyReservations = standardReservations.length > 0 || poReservationsForMaterial.length > 0;
                                  
                                  if (!hasAnyReservations) {
                                    return (
                                      <Typography variant="body2" color="text.secondary">
                                        Brak zarezerwowanych partii
                                      </Typography>
                                    );
                                  }
                                  
                                  return (
                                    <Box>
                                      {/* Standardowe rezerwacje magazynowe */}
                                      {standardReservations.map((batch, index) => (
                                        <Chip 
                                          key={`standard-${index}`}
                                          size="small" 
                                          label={`${batch.batchNumber} (${batch.quantity} ${material.unit})`} 
                                          color="info" 
                                          variant="outlined" 
                                          sx={{ 
                                            mr: 0.5, 
                                            mb: 0.5, 
                                            cursor: 'pointer',
                                            '& .MuiChip-deleteIcon': {
                                              fontSize: '16px',
                                              '&:hover': {
                                                color: 'error.main'
                                              }
                                            }
                                          }} 
                                          onClick={() => navigate(`/inventory/${materialId}/batches`)}
                                          onDelete={(e) => {
                                            e.stopPropagation(); // Zapobiega wywo≈Çaniu onClick
                                            handleDeleteSingleReservation(materialId, batch.batchId, batch.batchNumber);
                                          }}
                                          deleteIcon={<CloseIcon />}
                                        />
                                      ))}
                                      
                                      {/* Rezerwacje z PO - tylko te kt√≥re nie zosta≈Çy w pe≈Çni przekszta≈Çcone */}
                                      {poReservationsForMaterial.map((reservation, index) => {
                                        const convertedQuantity = reservation.convertedQuantity || 0;
                                        const reservedQuantity = reservation.reservedQuantity || 0;
                                        const availableQuantity = reservedQuantity - convertedQuantity;
                                        
                                        return (
                                          <Chip 
                                            key={`po-${index}`}
                                            size="small" 
                                            label={`PO: ${reservation.poNumber} (${availableQuantity} ${material.unit})`} 
                                            color="warning" 
                                            variant="outlined" 
                                            sx={{ mr: 0.5, mb: 0.5 }}
                                            title={`Rezerwacja z zam√≥wienia ${reservation.poNumber} - Status: ${reservation.status}${convertedQuantity > 0 ? `, przekszta≈Çcone: ${convertedQuantity}` : ''}`}
                                          />
                                        );
                                      })}
                                    </Box>
                                  );
                                })()}
                              </TableCell>
                              <TableCell><Checkbox checked={includeInCosts[material.id] || false} onChange={(e) => handleIncludeInCostsChange(material.id, e.target.checked)} color="primary" /></TableCell>
                              <TableCell>{editMode ? (<Box sx={{ display: 'flex' }}><IconButton color="primary" onClick={handleSaveChanges} title="Zapisz zmiany"><SaveIcon /></IconButton><IconButton color="error" onClick={() => setEditMode(false)} title="Anuluj edycjƒô"><CancelIcon /></IconButton></Box>) : (<Box sx={{ display: 'flex' }}><IconButton color="primary" onClick={() => { setEditMode(true); setMaterialQuantities(prev => ({ ...prev, [material.id]: materialQuantities[material.id] || 0 })); }} title="Edytuj ilo≈õƒá"><EditIcon /></IconButton><IconButton color="error" onClick={() => handleDeleteMaterial(material)} title="Usu≈Ñ materia≈Ç"><DeleteIcon /></IconButton></Box>)}</TableCell>
                            </TableRow>
                          );
                        })}
                      </TableBody>
                    </Table>
                  </TableContainer>
                  {renderMaterialCostsSummary()}
                </Paper>
              </Grid>
              {/* Sekcja skonsumowanych materia≈Ç√≥w */}
              {task.consumedMaterials && task.consumedMaterials.length > 0 && (
                <Grid item xs={12}>
                  <Paper sx={{ p: 3 }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                      <Typography variant="h6" component="h2">{t('consumedMaterials.title')}</Typography>
                      {(() => {
                        const totalCompletedQuantity = task.totalCompletedQuantity || 0;
                        const remainingQuantity = Math.max(0, task.quantity - totalCompletedQuantity);
                        const isFullyProduced = remainingQuantity === 0;
                        if (isFullyProduced) {
                          const isConsumptionConfirmed = task.materialConsumptionConfirmed === true;
                          const buttonColor = isConsumptionConfirmed ? "success" : "info";
                          const buttonText = isConsumptionConfirmed ? t('consumedMaterials.confirmedConsumption') : t('consumedMaterials.manageConsumption');
                          return (<Button variant="outlined" color={buttonColor} startIcon={<BuildCircleIcon />} component={Link} to={`/production/consumption/${task.id}`} size="small">{buttonText}</Button>);
                        } return null;
                      })()}
                    </Box>
                    <TableContainer>
                      <Table size="small">
                        <TableHead><TableRow><TableCell>{t('consumedMaterials.table.material')}</TableCell><TableCell>{t('consumedMaterials.table.batch')}</TableCell><TableCell>{t('consumedMaterials.table.consumedQuantity')}</TableCell><TableCell>{t('consumedMaterials.table.unitPrice')}</TableCell><TableCell>{t('consumedMaterials.table.include')}</TableCell><TableCell>{t('consumedMaterials.table.consumptionDate')}</TableCell><TableCell>{t('consumedMaterials.table.user')}</TableCell><TableCell>{t('consumedMaterials.table.actions')}</TableCell></TableRow></TableHead>
                        <TableBody>
                          {task.consumedMaterials.map((consumed, index) => {
                            const material = materials.find(m => (m.inventoryItemId || m.id) === consumed.materialId);
                            let batchNumber = consumed.batchNumber || consumed.batchId;
                            let batch = null;
                            if (!consumed.batchNumber && task.materialBatches && task.materialBatches[consumed.materialId]) {
                              batch = task.materialBatches[consumed.materialId].find(b => b.batchId === consumed.batchId);
                              if (batch && batch.batchNumber) { batchNumber = batch.batchNumber; }
                            }
                            const batchPrice = consumedBatchPrices[consumed.batchId] || (batch && batch.unitPrice) || 0;
                            const materialId = material?.inventoryItemId || material?.id;
                            return (
                              <TableRow key={index}>
                                <TableCell>{material ? material.name : 'Nieznany materia≈Ç'}</TableCell>
                                <TableCell><Chip size="small" label={`${batchNumber} (${consumed.quantity} ${material ? material.unit : ''})`} color="info" variant="outlined" sx={{ cursor: 'pointer' }} onClick={() => navigate(`/inventory/${materialId}/batches`)} /></TableCell>
                                <TableCell>{consumed.quantity} {material ? material.unit : ''}</TableCell>
                                <TableCell>{batchPrice > 0 ? `${Number(batchPrice).toFixed(4)} ‚Ç¨` : '‚Äî'}</TableCell>
                                <TableCell><Checkbox checked={consumedIncludeInCosts[index] || false} onChange={(e) => handleConsumedIncludeInCostsChange(index, e.target.checked)} color="primary" /></TableCell>
                                <TableCell>{new Date(consumed.timestamp).toLocaleString('pl')}</TableCell>
                                <TableCell>{consumed.userName || 'Nieznany u≈ºytkownik'}</TableCell>
                                <TableCell><Box sx={{ display: 'flex', gap: 1 }}><IconButton size="small" color="primary" onClick={() => handleEditConsumption(consumed)} title="Edytuj konsumpcjƒô"><EditIcon /></IconButton><IconButton size="small" color="error" onClick={() => handleDeleteConsumption(consumed)} title="Usu≈Ñ konsumpcjƒô"><DeleteIcon /></IconButton></Box></TableCell>
                              </TableRow>
                            );
                          })}
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </Paper>
                </Grid>
              )}
              
              {/* {t('poReservations.title')} */}
              <Grid item xs={12}>
                <Paper sx={{ p: 3 }}>
                  <POReservationManager 
                    taskId={task?.id}
                    materials={task?.materials || []}
                    onUpdate={async () => {
                      // Od≈õwie≈º podstawowe dane zadania i rezerwacje PO
                      await Promise.all([
                        fetchTaskBasicData(),
                        fetchPOReservations()
                      ]);
                    }}
                  />
                </Paper>
              </Grid>
            </Grid>
          )}

          {mainTab === 2 && ( // Zak≈Çadka "Produkcja i Plan"
            <Suspense fallback={
              <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 200 }}>
                <CircularProgress />
              </Box>
            }>
              <ProductionPlanTab
                task={task}
                setTask={setTask}
                productionHistory={productionHistory}
                enrichedProductionHistory={enrichedProductionHistory}
                selectedMachineId={selectedMachineId}
                setSelectedMachineId={setSelectedMachineId}
                availableMachines={availableMachines}
                editingHistoryItem={editingHistoryItem}
                editedHistoryItem={editedHistoryItem}
                setEditedHistoryItem={setEditedHistoryItem}
                warehouses={warehouses}
                getUserName={getUserName}
                onAddHistoryItem={(editedItem, historyData) => {
                  setEditedHistoryItem(editedItem);
                  setHistoryInventoryData(historyData);
                  setAddHistoryDialogOpen(true);
                }}
                onEditHistoryItem={handleEditHistoryItem}
                onSaveHistoryItemEdit={handleSaveHistoryItemEdit}
                onCancelHistoryItemEdit={handleCancelHistoryItemEdit}
                onDeleteHistoryItem={handleDeleteHistoryItem}
                toLocalDateTimeString={toLocalDateTimeString}
                fromLocalDateTimeString={fromLocalDateTimeString}
                onChecklistItemUpdate={handleChecklistItemUpdate}
              />
            </Suspense>
          )}

          {mainTab === 3 && ( // Zak≈Çadka "Formularze"
            <Suspense fallback={
              <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 200 }}>
                <CircularProgress />
              </Box>
            }>
              <FormsTab
                task={task}
                formTab={formTab}
                setFormTab={setFormTab}
                formResponses={formResponses}
                loadingFormResponses={loadingFormResponses}
                setCompletedMODialogOpen={setCompletedMODialogOpen}
                setProductionControlDialogOpen={setProductionControlDialogOpen}
                setProductionShiftDialogOpen={setProductionShiftDialogOpen}
              />
            </Suspense>
          )}

          {mainTab === 4 && ( // Zak≈Çadka "Historia zmian"
            <Suspense fallback={
              <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 200 }}>
                <CircularProgress />
              </Box>
            }>
              <ChangeHistoryTab task={task} getUserName={getUserName} />
            </Suspense>
          )}

          {mainTab === 5 && ( // Zak≈Çadka "Raport gotowego produktu"
            <Suspense fallback={
              <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 200 }}>
                <CircularProgress />
              </Box>
            }>
              <EndProductReportTab
                task={task}
                materials={materials}
                productionHistory={productionHistory}
                formResponses={formResponses}
                companyData={companyData}
                workstationData={workstationData}
                clinicalAttachments={clinicalAttachments}
                setClinicalAttachments={setClinicalAttachments}
                additionalAttachments={additionalAttachments}
                setAdditionalAttachments={setAdditionalAttachments}
                ingredientAttachments={ingredientAttachments}
                selectedAllergens={selectedAllergens}
                setSelectedAllergens={setSelectedAllergens}
                availableAllergens={availableAllergens}
                onFixRecipeData={handleFixRecipeData}
                fixingRecipeData={fixingRecipeData}
                uploadingClinical={uploadingClinical}
                uploadingAdditional={uploadingAdditional}
                onClinicalFileSelect={handleClinicalFileSelect}
                onAdditionalFileSelect={handleAdditionalFileSelect}
                onDownloadClinicalFile={handleDownloadClinicalFile}
                onDeleteClinicalFile={handleDeleteClinicalFile}
                onDownloadAdditionalFile={handleDownloadAdditionalFile}
                onDeleteAdditionalFile={handleDeleteAdditionalFile}
                getClinicalFileIcon={getClinicalFileIcon}
                formatClinicalFileSize={formatClinicalFileSize}
                getAdaptiveBackgroundStyle={getAdaptiveBackgroundStyle}
                sortIngredientsByQuantity={sortIngredientsByQuantity}
                ingredientBatchAttachments={ingredientBatchAttachments}
              />
            </Suspense>
          )}

          {/* Wszystkie dialogi pozostajƒÖ bez zmian na ko≈Ñcu komponentu */}
          {/* Dialog potwierdzenia */}
          <Dialog
            open={deleteHistoryDialogOpen}
            onClose={() => setDeleteHistoryDialogOpen(false)}
          >
            <DialogTitle>Potwierd≈∫ usuniƒôcie</DialogTitle>
            <DialogContent>
              <DialogContentText>
                Czy na pewno chcesz usunƒÖƒá wybrany wpis z historii produkcji? Ta operacja jest nieodwracalna.
              </DialogContentText>
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setDeleteHistoryDialogOpen(false)}>
                Anuluj
              </Button>
              <Button 
                onClick={handleConfirmDeleteHistoryItem} 
                variant="contained" 
                color="error"
                disabled={loading}
              >
                {loading ? <CircularProgress size={24} /> : 'Usu≈Ñ wpis'}
              </Button>
            </DialogActions>
          </Dialog>
          {/* Dialog usuwania zadania */}
          <Dialog
            open={deleteDialog}
            onClose={() => setDeleteDialog(false)}
          >
            <DialogTitle>Potwierd≈∫ usuniƒôcie</DialogTitle>
            <DialogContent>
              <DialogContentText>
                Czy na pewno chcesz usunƒÖƒá to zadanie produkcyjne (MO: {task?.moNumber})? Ta operacja jest nieodwracalna.
              </DialogContentText>
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setDeleteDialog(false)}>
                Anuluj
              </Button>
              <Button 
                onClick={handleDelete} 
                variant="contained" 
                color="error"
              >
                Usu≈Ñ zadanie
              </Button>
            </DialogActions>
          </Dialog>
          
          {/* Dialog wyboru opakowa≈Ñ */}
          <Dialog
            open={packagingDialogOpen}
            onClose={() => setPackagingDialogOpen(false)}
            maxWidth="md"
            fullWidth
          >
            <DialogTitle>Dodaj opakowania do zadania</DialogTitle>
            <DialogContent>
              <DialogContentText sx={{ mb: 2 }}>
                Wybierz opakowania, kt√≥re chcesz dodaƒá do zadania produkcyjnego.
              </DialogContentText>
              
              {/* Pasek wyszukiwania opakowa≈Ñ */}
              <TextField
                fullWidth
                margin="normal"
                label="Wyszukaj opakowanie"
                variant="outlined"
                value={searchPackaging}
                onChange={(e) => setSearchPackaging(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <SearchIcon />
                    </InputAdornment>
                  ),
                }}
                sx={{ mb: 2 }}
              />
              
              {/* Opcja natychmiastowej konsumpcji */}
              <FormControlLabel
                control={
                  <Switch
                    checked={consumePackagingImmediately}
                    onChange={(e) => setConsumePackagingImmediately(e.target.checked)}
                    color="primary"
                  />
                }
                label="Konsumuj opakowania natychmiast z wybranych partii"
                sx={{ mb: 2 }}
              />
              
              {loadingPackaging ? (
                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
                  <CircularProgress />
                </Box>
              ) : (
                <TableContainer>
                  <Table>
                    <TableHead>
                      <TableRow>
                        <TableCell padding="checkbox">Wybierz</TableCell>
                        <TableCell>Nazwa</TableCell>
                        <TableCell>Kategoria</TableCell>
                        <TableCell>Dostƒôpne partie</TableCell>
                        <TableCell>Wybrana partia</TableCell>
                        <TableCell>Ilo≈õƒá do dodania</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {filteredPackagingItems.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={6} align="center">
                            {packagingItems.length === 0 
                              ? "Brak dostƒôpnych opakowa≈Ñ"
                              : "Brak wynik√≥w dla podanego wyszukiwania"}
                          </TableCell>
                        </TableRow>
                      ) : (
                        filteredPackagingItems.map((item) => (
                          <TableRow key={item.id}>
                            <TableCell padding="checkbox">
                              <Checkbox
                                checked={item.selected}
                                onChange={(e) => handlePackagingSelection(item.id, e.target.checked)}
                              />
                            </TableCell>
                            <TableCell>{item.name}</TableCell>
                            <TableCell>{item.category}</TableCell>
                            <TableCell>
                              {item.batches && item.batches.length > 0 
                                ? `${item.batches.length} partii dostƒôpnych`
                                : 'Brak dostƒôpnych partii'}
                            </TableCell>
                            <TableCell>
                              <FormControl fullWidth size="small" disabled={!item.selected}>
                                <InputLabel>Wybierz partiƒô</InputLabel>
                                <Select
                                  value={item.selectedBatch?.id || ''}
                                  onChange={(e) => handlePackagingBatchSelection(item.id, e.target.value)}
                                  label="Wybierz partiƒô"
                                >
                                  {item.batches && item.batches.map((batch) => (
                                    <MenuItem key={batch.id} value={batch.id}>
                                      {`LOT: ${batch.lotNumber || batch.batchNumber || 'Brak numeru'} - ${batch.quantity} ${item.unit}${batch.expiryDate ? ` (Wa≈ºne do: ${new Date(batch.expiryDate.seconds ? batch.expiryDate.toDate() : batch.expiryDate).toLocaleDateString()})` : ''}`}
                                    </MenuItem>
                                  ))}
                                </Select>
                              </FormControl>
                            </TableCell>
                            <TableCell>
                              <TextField
                                type="number"
                                value={item.batchQuantity || ''}
                                onChange={(e) => handlePackagingBatchQuantityChange(item.id, e.target.value)}
                                onWheel={(e) => e.target.blur()} // Wy≈ÇƒÖcza reakcjƒô na scroll
                                disabled={!item.selected || !item.selectedBatch}
                                inputProps={{ 
                                  min: 0, 
                                  max: item.selectedBatch ? item.selectedBatch.quantity : 0, 
                                  step: 'any' 
                                }}
                                size="small"
                                sx={{ width: '130px' }} // Poszerzony z 100px do 130px
                                placeholder={item.selectedBatch ? `Max: ${item.selectedBatch.quantity}` : '0'}
                              />
                            </TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                </TableContainer>
              )}
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setPackagingDialogOpen(false)}>
                Anuluj
              </Button>
              <Button 
                onClick={handleAddPackagingToTask} 
                variant="contained" 
                color="primary"
                disabled={loadingPackaging || packagingItems.filter(item => item.selected && item.selectedBatch && item.batchQuantity > 0).length === 0}
              >
                {loadingPackaging ? <CircularProgress size={24} /> : 'Dodaj wybrane opakowania'}
              </Button>
            </DialogActions>
          </Dialog>
          
          {/* Dialog rezerwacji surowc√≥w */}
          <Dialog
            open={reserveDialogOpen}
            onClose={() => setReserveDialogOpen(false)}
            maxWidth="lg"
            fullWidth
          >
            <DialogTitle>Rezerwacja surowc√≥w</DialogTitle>
            <DialogContent>
              <DialogContentText sx={{ mb: 2 }}>
                Wybierz partie materia≈Ç√≥w, kt√≥re chcesz zarezerwowaƒá dla tego zadania produkcyjnego.
              </DialogContentText>
              
              <FormControl component="fieldset" sx={{ mb: 2 }}>
                <FormLabel component="legend">Metoda rezerwacji</FormLabel>
                <RadioGroup 
                  row 
                  value={reservationMethod} 
                  onChange={handleReservationMethodChange}
                >
                  <FormControlLabel 
                    value="automatic" 
                    control={<Radio />} 
                    label="Automatyczna (FIFO)" 
                  />
                  <FormControlLabel 
                    value="manual" 
                    control={<Radio />} 
                    label="Rƒôczna (wyb√≥r partii)" 
                  />
                </RadioGroup>
              </FormControl>
              
              {reservationMethod === 'manual' && renderManualBatchSelection()}
              
              {reservationMethod === 'automatic' && (
                <Alert severity="info" sx={{ mb: 2 }}>
                  System automatycznie zarezerwuje najstarsze dostƒôpne partie materia≈Ç√≥w (FIFO).
                </Alert>
              )}
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setReserveDialogOpen(false)}>
                Anuluj
              </Button>
              <Button 
                onClick={handleReserveMaterials} 
                variant="contained" 
                color="primary"
                disabled={reservingMaterials}
              >
                {reservingMaterials ? <CircularProgress size={24} /> : 'Rezerwuj materia≈Çy'}
              </Button>
            </DialogActions>
          </Dialog>
          
          {/* Dialog dodawania wpisu historii produkcji */}
          <Dialog
            open={addHistoryDialogOpen}
            onClose={() => setAddHistoryDialogOpen(false)}
            maxWidth="md"
            fullWidth
          >
            <DialogTitle>{t('dialogs.addProductionHistory.title')}</DialogTitle>
            <DialogContent>
              <DialogContentText sx={{ mb: 2 }}>
                {t('dialogs.addProductionHistory.description')}
              </DialogContentText>
              
              {historyInventoryError && (
                <Alert severity="error" sx={{ mb: 2 }}>
                  {historyInventoryError}
                </Alert>
              )}
              
              <Grid container spacing={2} sx={{ mt: 1 }}>
                <Grid item xs={12}>
                  <TextField
                    label={t('dialogs.addProductionHistory.producedQuantity')}
                    type="number"
                    value={editedHistoryItem.quantity}
                    onChange={(e) => setEditedHistoryItem(prev => ({ 
                      ...prev, 
                      quantity: e.target.value === '' ? '' : parseFloat(e.target.value) 
                    }))}
                    inputProps={{ min: 0, step: 'any' }}
                    fullWidth
                    required
                    InputProps={{
                      endAdornment: <Typography variant="body2">{task?.unit || 'szt.'}</Typography>
                    }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    label={t('dialogs.addProductionHistory.startDateTime')}
                    type="datetime-local"
                    value={editedHistoryItem.startTime instanceof Date 
                      ? toLocalDateTimeString(editedHistoryItem.startTime) 
                      : ''}
                    onChange={(e) => {
                      const newDate = e.target.value ? fromLocalDateTimeString(e.target.value) : new Date();
                      setEditedHistoryItem(prev => ({ 
                        ...prev, 
                        startTime: newDate
                      }));
                    }}
                    InputLabelProps={{ shrink: true }}
                    fullWidth
                    required
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    label={t('dialogs.addProductionHistory.endDateTime')}
                    type="datetime-local"
                    value={editedHistoryItem.endTime instanceof Date 
                      ? toLocalDateTimeString(editedHistoryItem.endTime) 
                      : ''}
                    onChange={(e) => {
                      const newDate = e.target.value ? fromLocalDateTimeString(e.target.value) : new Date();
                      setEditedHistoryItem(prev => ({ 
                        ...prev, 
                        endTime: newDate
                      }));
                    }}
                    InputLabelProps={{ shrink: true }}
                    fullWidth
                    required
                  />
                </Grid>
                
                {/* Sekcja dodawania do magazynu */}
                <Grid item xs={12}>
                  <Divider sx={{ my: 2 }} />
                  <FormControlLabel
                    control={
                      <Switch
                        checked={addToInventoryOnHistory}
                        onChange={(e) => setAddToInventoryOnHistory(e.target.checked)}
                        color="primary"
                      />
                    }
                    label={t('dialogs.addProductionHistory.addToInventory')}
                  />
                </Grid>
                
                {addToInventoryOnHistory && (
                  <>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        label="Data wa≈ºno≈õci"
                        type="date"
                        value={historyInventoryData.expiryDate ? 
                          historyInventoryData.expiryDate.toISOString().split('T')[0] : ''}
                        onChange={(e) => {
                          const date = e.target.value ? new Date(e.target.value) : null;
                          setHistoryInventoryData(prev => ({ ...prev, expiryDate: date }));
                        }}
                        InputLabelProps={{ shrink: true }}
                        fullWidth
                        required
                      />
                    </Grid>
                    
                    <Grid item xs={12} sm={6}>
                      <TextField
                        label="Numer partii (LOT)"
                        value={historyInventoryData.lotNumber}
                        onChange={(e) => setHistoryInventoryData(prev => ({ 
                          ...prev, 
                          lotNumber: e.target.value 
                        }))}
                        fullWidth
                        required
                      />
                    </Grid>
                    
                    <Grid item xs={12} sm={6}>
                      <TextField
                        label="Ilo≈õƒá ko≈Ñcowa"
                        type="number"
                        value={historyInventoryData.finalQuantity}
                        onChange={(e) => setHistoryInventoryData(prev => ({ 
                          ...prev, 
                          finalQuantity: e.target.value 
                        }))}
                        inputProps={{ min: 0, step: 'any' }}
                        fullWidth
                        required
                        InputProps={{
                          endAdornment: <Typography variant="body2">{task?.unit || 'szt.'}</Typography>
                        }}
                      />
                    </Grid>
                    
                    <Grid item xs={12} sm={6}>
                      <FormControl fullWidth required>
                        <InputLabel>Magazyn docelowy</InputLabel>
                        <Select
                          value={historyInventoryData.warehouseId}
                          onChange={(e) => setHistoryInventoryData(prev => ({ 
                            ...prev, 
                            warehouseId: e.target.value 
                          }))}
                          label="Magazyn docelowy"
                          disabled={warehousesLoading}
                        >
                          {warehouses.map(warehouse => (
                            <MenuItem key={warehouse.id} value={warehouse.id}>
                              {warehouse.name}
                            </MenuItem>
                          ))}
                        </Select>
                      </FormControl>
                    </Grid>
                  </>
                )}
              </Grid>
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setAddHistoryDialogOpen(false)}>
                Anuluj
              </Button>
              <Button 
                onClick={handleAddHistoryItem} 
                variant="contained" 
                color="primary"
                disabled={loading}
              >
                {loading ? <CircularProgress size={24} /> : (addToInventoryOnHistory ? t('dialogs.addProductionHistory.addSessionAndInventory') : t('dialogs.addProductionHistory.addSession'))}
              </Button>
            </DialogActions>
          </Dialog>
          
          {/* Dialog wyboru surowc√≥w */}
          <Dialog
            open={rawMaterialsDialogOpen}
            onClose={() => setRawMaterialsDialogOpen(false)}
            maxWidth="md"
            fullWidth
          >
            <DialogTitle>Dodaj surowiec do zadania</DialogTitle>
            <DialogContent>
              <DialogContentText sx={{ mb: 2 }}>
                Wybierz surowiec lub opakowanie jednostkowe, kt√≥re chcesz dodaƒá do zadania produkcyjnego.
                <br />
                <strong>Uwaga:</strong> Mo≈ºesz dodaƒá dowolnƒÖ ilo≈õƒá - to jest tylko planowanie, nie rezerwacja materia≈Ç√≥w.
              </DialogContentText>
              
              {/* Zak≈Çadki kategorii materia≈Ç√≥w */}
              <Tabs 
                value={materialCategoryTab} 
                onChange={async (e, newValue) => {
                  setMaterialCategoryTab(newValue);
                  setSearchRawMaterials(''); // Wyczy≈õƒá wyszukiwanie przy zmianie zak≈Çadki
                  // Pobierz materia≈Çy dla nowej kategorii
                  const targetCategory = newValue === 0 ? 'Surowce' : 'Opakowania jednostkowe';
                  await fetchAvailableRawMaterials(targetCategory);
                }}
                sx={{ mb: 2, borderBottom: 1, borderColor: 'divider' }}
              >
                <Tab label="Surowce" />
                <Tab label="Opakowania jednostkowe" />
              </Tabs>
              
              {/* Pasek wyszukiwania materia≈Ç√≥w */}
              <TextField
                fullWidth
                margin="normal"
                label={materialCategoryTab === 0 ? "Wyszukaj surowiec" : "Wyszukaj opakowanie jednostkowe"}
                variant="outlined"
                value={searchRawMaterials}
                onChange={(e) => setSearchRawMaterials(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <SearchIcon />
                    </InputAdornment>
                  ),
                }}
                sx={{ mb: 2 }}
              />
              
              {loadingRawMaterials ? (
                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
                  <CircularProgress />
                </Box>
              ) : (
                <TableContainer>
                  <Table>
                    <TableHead>
                      <TableRow>
                        <TableCell padding="checkbox">Wybierz</TableCell>
                        <TableCell>Nazwa</TableCell>
                        <TableCell>Dostƒôpna ilo≈õƒá</TableCell>
                        <TableCell>Ilo≈õƒá do dodania</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {filteredRawMaterialsItems.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={4} align="center">
                            {rawMaterialsItems.length === 0 
                              ? "Brak dostƒôpnych materia≈Ç√≥w"
                              : "Brak wynik√≥w dla podanego wyszukiwania"}
                          </TableCell>
                        </TableRow>
                      ) : (
                        filteredRawMaterialsItems.map((item) => (
                          <TableRow key={item.id}>
                            <TableCell padding="checkbox">
                              <Checkbox
                                checked={item.selected}
                                onChange={(e) => handleRawMaterialsSelection(item.id, e.target.checked)}
                              />
                            </TableCell>
                            <TableCell>{item.name}</TableCell>
                            <TableCell>
                              <Box>
                                <Typography variant="body2">
                                  {item.availableQuantity} {item.unit}
                                </Typography>
                                {item.selected && item.quantity > item.availableQuantity && (
                                  <Typography variant="caption" color="warning.main">
                                    ‚ö†Ô∏è Wiƒôcej ni≈º dostƒôpne
                                  </Typography>
                                )}
                              </Box>
                            </TableCell>
                            <TableCell>
                              <TextField
                                type="number"
                                value={item.quantity || ''}
                                onChange={(e) => handleRawMaterialsQuantityChange(item.id, e.target.value)}
                                disabled={!item.selected}
                                inputProps={{ min: 0, step: 'any' }}
                                size="small"
                                sx={{ 
                                  width: '100px',
                                  '& .MuiOutlinedInput-root': {
                                    borderColor: item.selected && item.quantity > item.availableQuantity ? 'warning.main' : undefined
                                  }
                                }}
                                placeholder="Ilo≈õƒá do dodania"
                                color={item.selected && item.quantity > item.availableQuantity ? 'warning' : 'primary'}
                              />
                            </TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                </TableContainer>
              )}
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setRawMaterialsDialogOpen(false)}>
                Anuluj
              </Button>
              <Button 
                onClick={handleAddRawMaterialsToTask} 
                variant="contained" 
                color="secondary"
                disabled={loadingRawMaterials || rawMaterialsItems.filter(item => item.selected && item.quantity > 0).length === 0}
              >
                {loadingRawMaterials ? <CircularProgress size={24} /> : 'Dodaj wybrane materia≈Çy'}
              </Button>
            </DialogActions>
          </Dialog>

          {/* Dialog usuwania materia≈Çu */}
          <Dialog
            open={deleteMaterialDialogOpen}
            onClose={() => setDeleteMaterialDialogOpen(false)}
          >
            <DialogTitle>Potwierd≈∫ usuniƒôcie materia≈Çu</DialogTitle>
            <DialogContent>
              <DialogContentText>
                Czy na pewno chcesz usunƒÖƒá materia≈Ç "{materialToDelete?.name}" z zadania produkcyjnego? Ta operacja jest nieodwracalna.
              </DialogContentText>
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setDeleteMaterialDialogOpen(false)}>
                Anuluj
              </Button>
              <Button 
                onClick={handleConfirmDeleteMaterial} 
                variant="contained" 
                color="error"
                disabled={loading}
              >
                {loading ? <CircularProgress size={24} /> : 'Usu≈Ñ materia≈Ç'}
              </Button>
            </DialogActions>
          </Dialog>

          {/* Dialog konsumpcji materia≈Ç√≥w */}
          <Dialog
            open={consumeMaterialsDialogOpen}
            onClose={() => setConsumeMaterialsDialogOpen(false)}
            maxWidth="lg"
            fullWidth
          >
            <DialogTitle>Konsumuj materia≈Çy</DialogTitle>
            <DialogContent>
              <DialogContentText sx={{ mb: 2 }}>
                Wybierz partie materia≈Ç√≥w i ilo≈õci, kt√≥re chcesz skonsumowaƒá. Konsumpcja zmniejszy dostƒôpnƒÖ ilo≈õƒá w magazynie.
              </DialogContentText>
              
              {consumedMaterials.length === 0 ? (
                <Alert severity="info">
                  Brak zarezerwowanych materia≈Ç√≥w do konsumpcji.
                </Alert>
              ) : (
                consumedMaterials.map((material) => {
                  const materialId = material.inventoryItemId || material.id;
                  const reservedBatches = task.materialBatches[materialId] || [];
                  
                  return (
                    <Box key={materialId} sx={{ mb: 3 }}>
                      <Typography variant="h6" gutterBottom>
                        {material.name} ({material.unit})
                      </Typography>
                      
                      <TableContainer>
                        <Table size="small">
                          <TableHead>
                            <TableRow>
                              <TableCell padding="checkbox">Konsumuj</TableCell>
                              <TableCell>Numer partii</TableCell>
                              <TableCell>Zarezerwowana ilo≈õƒá</TableCell>
                              <TableCell>Ilo≈õƒá do konsumpcji</TableCell>
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            {reservedBatches.map((batch) => {
                              const batchKey = `${materialId}_${batch.batchId}`;
                              const isSelected = selectedBatchesToConsume[materialId]?.[batch.batchId] || false;
                              
                              return (
                                <TableRow key={batch.batchId}>
                                  <TableCell padding="checkbox">
                                    <Checkbox
                                      checked={isSelected}
                                      onChange={(e) => handleBatchToConsumeSelection(materialId, batch.batchId, e.target.checked)}
                                    />
                                  </TableCell>
                                  <TableCell>{batch.batchNumber}</TableCell>
                                  <TableCell>{batch.quantity} {material.unit}</TableCell>
                                  <TableCell>
                                    <TextField
                                      type="number"
                                      value={consumeQuantities[batchKey] || 0}
                                      onChange={(e) => handleConsumeQuantityChange(materialId, batch.batchId, e.target.value)}
                                      onFocus={(e) => {
                                        // Je≈õli warto≈õƒá to 0, wyczy≈õƒá pole przy focusie
                                        if ((consumeQuantities[batchKey] || 0) === 0) {
                                          e.target.select();
                                        }
                                      }}
                                      onBlur={(e) => {
                                        // Je≈õli pole jest puste po utracie focusu, ustaw 0
                                        if (e.target.value === '' || e.target.value === null) {
                                          handleConsumeQuantityChange(materialId, batch.batchId, 0);
                                        }
                                      }}
                                      onWheel={(e) => e.target.blur()} // Wy≈ÇƒÖcza reakcjƒô na scroll
                                      disabled={!isSelected}
                                      error={Boolean(consumeErrors[batchKey])}
                                      helperText={consumeErrors[batchKey]}
                                      inputProps={{ min: 0, max: batch.quantity, step: 'any' }}
                                      size="small"
                                      sx={{ width: '140px' }} // Poszerzony z 120px do 140px
                                      InputProps={{
                                        endAdornment: <Typography variant="caption">{material.unit}</Typography>
                                      }}
                                    />
                                  </TableCell>
                                </TableRow>
                              );
                            })}
                          </TableBody>
                        </Table>
                      </TableContainer>
                    </Box>
                  );
                })
              )}
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setConsumeMaterialsDialogOpen(false)}>
                Anuluj
              </Button>
              <Button 
                onClick={handleConfirmConsumeMaterials} 
                variant="contained" 
                color="warning"
                disabled={loading || consumedMaterials.length === 0}
              >
                {loading ? <CircularProgress size={24} /> : 'Konsumuj materia≈Çy'}
              </Button>
            </DialogActions>
          </Dialog>

          {/* Dialog rezerwacji surowc√≥w */}
          <Dialog
            open={reserveDialogOpen}
            onClose={() => setReserveDialogOpen(false)}
            maxWidth="lg"
            fullWidth
          >
            <DialogTitle>Rezerwacja surowc√≥w</DialogTitle>
            <DialogContent>
              <DialogContentText sx={{ mb: 2 }}>
                Wybierz partie materia≈Ç√≥w, kt√≥re chcesz zarezerwowaƒá dla tego zadania produkcyjnego.
              </DialogContentText>
              
              <FormControl component="fieldset" sx={{ mb: 2 }}>
                <FormLabel component="legend">Metoda rezerwacji</FormLabel>
                <RadioGroup 
                  row 
                  value={reservationMethod} 
                  onChange={handleReservationMethodChange}
                >
                  <FormControlLabel 
                    value="automatic" 
                    control={<Radio />} 
                    label="Automatyczna (FIFO)" 
                  />
                  <FormControlLabel 
                    value="manual" 
                    control={<Radio />} 
                    label="Rƒôczna (wyb√≥r partii)" 
                  />
                </RadioGroup>
              </FormControl>
              
              {reservationMethod === 'manual' && renderManualBatchSelection()}
              
              {reservationMethod === 'automatic' && (
                <Alert severity="info" sx={{ mb: 2 }}>
                  System automatycznie zarezerwuje najstarsze dostƒôpne partie materia≈Ç√≥w (FIFO).
                </Alert>
              )}
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setReserveDialogOpen(false)}>
                Anuluj
              </Button>
              <Button 
                onClick={handleReserveMaterials} 
                variant="contained" 
                color="primary"
                disabled={reservingMaterials}
              >
                {reservingMaterials ? <CircularProgress size={24} /> : 'Rezerwuj materia≈Çy'}
              </Button>
            </DialogActions>
          </Dialog>

          {/* Dialog korekty konsumpcji */}
          <Dialog
            open={editConsumptionDialogOpen}
            onClose={() => setEditConsumptionDialogOpen(false)}
            maxWidth="md"
            fullWidth
          >
            <DialogTitle>Edytuj konsumpcjƒô</DialogTitle>
            <DialogContent>
              <DialogContentText>
                Wprowad≈∫ nowƒÖ ilo≈õƒá konsumpcji dla wybranej partii:
              </DialogContentText>
              <TextField
                label="Nowa ilo≈õƒá"
                type="number"
                value={editedQuantity}
                onChange={(e) => setEditedQuantity(e.target.value)}
                onWheel={(e) => e.target.blur()} // Wy≈ÇƒÖcza reakcjƒô na scroll
                fullWidth
                InputProps={{
                  endAdornment: <Typography variant="body2">{task?.unit || 'szt.'}</Typography>
                }}
              />
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setEditConsumptionDialogOpen(false)}>
                Anuluj
              </Button>
              <Button 
                onClick={handleConfirmEditConsumption} 
                variant="contained" 
                color="primary"
                disabled={loading}
              >
                {loading ? <CircularProgress size={24} /> : 'Zapisz zmiany'}
              </Button>
            </DialogActions>
          </Dialog>

          {/* Dialog usuwania konsumpcji */}
          <Dialog
            open={deleteConsumptionDialogOpen}
            onClose={() => setDeleteConsumptionDialogOpen(false)}
            maxWidth="md"
            fullWidth
          >
            <DialogTitle>Potwierd≈∫ usuniƒôcie konsumpcji</DialogTitle>
            <DialogContent>
              <DialogContentText>
                Czy na pewno chcesz usunƒÖƒá wybranƒÖ konsumpcjƒô? Ta operacja jest nieodwracalna.
              </DialogContentText>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={restoreReservation}
                    onChange={(e) => setRestoreReservation(e.target.checked)}
                    color="primary"
                  />
                }
                label="Przywr√≥ƒá rezerwacjƒô materia≈Çu po usuniƒôciu konsumpcji"
                sx={{ mt: 2, display: 'block' }}
              />
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setDeleteConsumptionDialogOpen(false)}>
                Anuluj
              </Button>
              <Button 
                onClick={handleConfirmDeleteConsumption} 
                variant="contained" 
                color="error"
                disabled={loading}
              >
                {loading ? <CircularProgress size={24} /> : 'Usu≈Ñ konsumpcjƒô'}
              </Button>
            </DialogActions>
          </Dialog>

          {/* Dialog ustawiania daty wa≈ºno≈õci przy starcie produkcji */}
          <Dialog
            open={startProductionDialogOpen}
            onClose={() => setStartProductionDialogOpen(false)}
            maxWidth="sm"
            fullWidth
          >
            <DialogTitle>Rozpocznij produkcjƒô</DialogTitle>
            <DialogContent>
              <DialogContentText sx={{ mb: 2 }}>
                Data wa≈ºno≈õci gotowego produktu jest wymagana do rozpoczƒôcia produkcji.
              </DialogContentText>
              
              {startProductionError && (
                <Alert severity="error" sx={{ mb: 2 }}>
                  {startProductionError}
                </Alert>
              )}

              <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={pl}>
                <Box sx={{ my: 2 }}>
                  <DateTimePicker
                    label="Data wa≈ºno≈õci gotowego produktu *"
                    value={startProductionData.expiryDate}
                    onChange={(newValue) => setStartProductionData({
                      ...startProductionData, 
                      expiryDate: newValue
                    })}
                    views={['year', 'month', 'day']}
                    format="dd-MM-yyyy"
                    slotProps={{
                      textField: {
                        fullWidth: true,
                        margin: 'dense',
                        variant: 'outlined',
                        helperText: "Data wa≈ºno≈õci produktu jest wymagana",
                        error: !startProductionData.expiryDate,
                        required: true
                      },
                      actionBar: {
                        actions: ['clear', 'today']
                      }
                    }}
                  />
                </Box>
              </LocalizationProvider>
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setStartProductionDialogOpen(false)}>
                Anuluj
              </Button>
              <Button 
                onClick={handleStartProductionWithExpiry} 
                variant="contained"
                disabled={!startProductionData.expiryDate}
              >
                Rozpocznij produkcjƒô
              </Button>
            </DialogActions>
          </Dialog>

          {/* Dialog formularza kontroli produkcji */}
          <ProductionControlFormDialog
            open={productionControlDialogOpen}
            onClose={() => setProductionControlDialogOpen(false)}
            task={task}
            onSuccess={handleProductionControlFormSuccess}
          />

          {/* Dialog formularza zako≈Ñczonego MO */}
          <CompletedMOFormDialog
            open={completedMODialogOpen}
            onClose={() => setCompletedMODialogOpen(false)}
            task={task}
            onSuccess={handleCompletedMOFormSuccess}
          />

          {/* Dialog formularza zmiany produkcyjnej */}
          <ProductionShiftFormDialog
            open={productionShiftDialogOpen}
            onClose={() => setProductionShiftDialogOpen(false)}
            task={task}
            onSuccess={handleProductionShiftFormSuccess}
          />
        </>
      ) : (
        <Typography variant="body1" color="textSecondary">
          Nie uda≈Ço siƒô za≈Çadowaƒá danych zadania. Spr√≥buj ponownie.
        </Typography>
      )}
    </Container>
  );
};

export default TaskDetailsPage; 