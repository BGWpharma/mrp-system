import React, { useState, useEffect, useMemo } from 'react';
import { useNavigate, useLocation, Link as RouterLink } from 'react-router-dom';
import {
  Box,
  Button,
  Paper,
  Typography,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  TableContainer,
  TablePagination,
  IconButton,
  TextField,
  InputAdornment,
  Chip,
  Tooltip,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  CircularProgress,
  Collapse,
  Card,
  CardContent,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Divider,
  Link
} from '@mui/material';
import {
  Add as AddIcon,
  Search as SearchIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  FilterList as FilterListIcon,
  Clear as ClearIcon,
  KeyboardArrowDown as KeyboardArrowDownIcon,
  KeyboardArrowUp as KeyboardArrowUpIcon,
  LocalShipping as LocalShippingIcon,
  EventNote as EventNoteIcon,
  Payment as PaymentIcon,
  MoreVert as MoreVertIcon,
  CheckCircle as CheckCircleIcon,
  Cancel as CancelIcon,
  Refresh as RefreshIcon,
  People as CustomersIcon,
  ShoppingCart as ShoppingCartIcon,
  ArrowDropDown as ArrowDropDownIcon,
  Download as DownloadIcon
} from '@mui/icons-material';
import { 
  getAllOrders, 
  deleteOrder, 
  updateOrderStatus, 
  getOrderById,
  ORDER_STATUSES,
  getOrdersWithPagination
} from '../../services/orderService';
import { useAuth } from '../../hooks/useAuth';
import { useNotification } from '../../hooks/useNotification';
import { formatDate, formatTimestamp, formatDateForInput } from '../../utils/dateUtils';
import { formatCurrency } from '../../utils/formatUtils';
import { getRecipeById } from '../../services/recipeService';
import { exportToCSV, formatDateForExport, formatCurrencyForExport } from '../../utils/exportUtils';
import { getUsersDisplayNames } from '../../services/userService';
import { useTranslation } from '../../hooks/useTranslation';
import { collection, onSnapshot } from 'firebase/firestore';
import { db } from '../../services/firebase/config';
import { useOrderListState } from '../../contexts/OrderListStateContext';

const OrdersList = () => {
  const { t } = useTranslation('orders');
  
  // U≈ºyj kontekstu dla zarzƒÖdzania stanem listy
  const { state, actions } = useOrderListState();
  
  // Lokalne stany (nie zapisywane w kontek≈õcie)
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [totalItems, setTotalItems] = useState(0);
  const [totalPages, setTotalPages] = useState(1);
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [expandedOrderId, setExpandedOrderId] = useState(null);
  const [orderToDelete, setOrderToDelete] = useState(null);
  const [statusChangeInfo, setStatusChangeInfo] = useState(null);
  const [customers, setCustomers] = useState([]);
  const [customersLoading, setCustomersLoading] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false);
  const [statusDialogOpen, setStatusDialogOpen] = useState(false);
  const [orderToUpdateStatus, setOrderToUpdateStatus] = useState(null);
  const [newStatus, setNewStatus] = useState('');

  const { currentUser } = useAuth();
  const { showSuccess, showError, showInfo } = useNotification();
  const navigate = useNavigate();
  const location = useLocation();

  // G≈Ç√≥wny efekt inicjalizacyjny - wykonuje siƒô tylko raz przy pierwszym renderowaniu
  useEffect(() => {
    fetchCustomers();
    // Nie wywo≈Çujemy tu fetchOrders() - zostanie wywo≈Çane przez efekt zale≈ºny od parametr√≥w
    setIsInitialized(true);
  }, []);

  // Obs≈Çuga debounce dla wyszukiwania
  useEffect(() => {
    if (searchTimeout) {
      clearTimeout(searchTimeout);
    }
    
    const timeoutId = setTimeout(() => {
      actions.setDebouncedSearchTerm(state.searchTerm);
    }, 500); // 500ms op√≥≈∫nienia
    
    setSearchTimeout(timeoutId);
    
    return () => {
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }
    };
  }, [state.searchTerm]);
  
  // Efekt odpowiedzialny za pobieranie zam√≥wie≈Ñ przy zmianach parametr√≥w
  useEffect(() => {
    // Wywo≈Çujemy fetchOrders tylko je≈õli komponent jest ju≈º zainicjalizowany
    if (isInitialized) {
      fetchOrders();
    }
  }, [state.page, state.rowsPerPage, state.orderBy, state.orderDirection, state.debouncedSearchTerm, isInitialized]);

  // Nas≈Çuchiwanie powiadomie≈Ñ o aktualizacji koszt√≥w zada≈Ñ produkcyjnych
  useEffect(() => {
    let channel;
    try {
      // Stw√≥rz BroadcastChannel do nas≈Çuchiwania aktualizacji koszt√≥w
      channel = new BroadcastChannel('production-costs-update');
      
      const handleCostUpdate = async (event) => {
        if (event.data.type === 'TASK_COSTS_UPDATED') {
          const { taskId, costs, timestamp } = event.data;
          console.log(`[ORDERS_LIST_BROADCAST] Otrzymano powiadomienie o aktualizacji koszt√≥w zadania ${taskId}:`, costs);
          
          // Sprawd≈∫ czy kt√≥re≈õ z aktualnie wy≈õwietlanych zam√≥wie≈Ñ ma to zadanie produkcyjne
          const hasAffectedOrder = orders.some(order => 
            (order.items && order.items.some(item => item.productionTaskId === taskId)) ||
            (order.productionTasks && order.productionTasks.some(task => task.id === taskId))
          );
          
          if (hasAffectedOrder) {
            console.log(`[ORDERS_LIST_BROADCAST] Znaleziono zam√≥wienie z zadaniem ${taskId}, od≈õwie≈ºam listƒô po kr√≥tkiej przerwie`);
            
            // Od≈õwie≈º listƒô zam√≥wie≈Ñ po kr√≥tkiej przerwie, aby upewniƒá siƒô, ≈ºe baza danych zosta≈Ça zaktualizowana
            setTimeout(() => {
              fetchOrders();
              console.log('üîÑ [ORDERS_LIST_BROADCAST] Od≈õwie≈ºono listƒô zam√≥wie≈Ñ po otrzymaniu powiadomienia o aktualizacji koszt√≥w');
            }, 500);
          } else {
            console.log(`[ORDERS_LIST_BROADCAST] Zadanie ${taskId} nie dotyczy aktualnie wy≈õwietlanych zam√≥wie≈Ñ`);
          }
        }
      };

      channel.addEventListener('message', handleCostUpdate);
      console.log(`[ORDERS_LIST_BROADCAST] Nas≈Çuchiwanie powiadomie≈Ñ o kosztach zada≈Ñ dla listy zam√≥wie≈Ñ`);
      
    } catch (error) {
      console.warn('Nie mo≈ºna utworzyƒá BroadcastChannel dla listy zam√≥wie≈Ñ:', error);
    }

    return () => {
      if (channel) {
        channel.close();
        console.log(`[ORDERS_LIST_BROADCAST] Zamkniƒôto nas≈Çuchiwanie powiadomie≈Ñ dla listy zam√≥wie≈Ñ`);
      }
    };
  }, [orders]); // Zale≈ºno≈õƒá od orders, aby sprawdzaƒá aktualnƒÖ listƒô

  // Real-time listener dla synchronizacji miƒôdzy u≈ºytkownikami
  useEffect(() => {
    let unsubscribe = null;
    let updateTimeout = null;

    const setupRealtimeListener = () => {
      try {
        console.log('üî• [FIREBASE_LISTENER] Uruchamiam Firebase listener dla zam√≥wie≈Ñ');
        
        // Real-time listener dla wszystkich zam√≥wie≈Ñ
        const ordersRef = collection(db, 'orders');
        
        unsubscribe = onSnapshot(ordersRef, (snapshot) => {
          const changesCount = snapshot.docChanges().length;
          console.log(`üì° [FIREBASE_LISTENER] Real-time aktualizacja zam√≥wie≈Ñ: ${changesCount} zmian`);
          
          if (changesCount > 0) {
            let hasRelevantChanges = false;
            
            snapshot.docChanges().forEach((change) => {
              const order = { id: change.doc.id, ...change.doc.data() };
              
              if (change.type === 'modified') {
                console.log(`üîÑ [FIREBASE_LISTENER] Zmodyfikowano zam√≥wienie: ${order.number || order.id}`);
                hasRelevantChanges = true;
              }
            });
            
            if (hasRelevantChanges) {
              console.log('üîÑ [FIREBASE_LISTENER] Planowanie od≈õwie≈ºenia listy zam√≥wie≈Ñ...');
              
              // Debounce aby uniknƒÖƒá zbyt czƒôstych aktualizacji
              if (updateTimeout) {
                clearTimeout(updateTimeout);
              }
              
              updateTimeout = setTimeout(() => {
                console.log('üìã [FIREBASE_LISTENER] Od≈õwie≈ºanie listy zam√≥wie≈Ñ z filtrami');
                fetchOrders();
              }, 1000); // 1s debounce dla aktualizacji miƒôdzy u≈ºytkownikami
            }
          }
        }, (error) => {
          console.error('‚ùå [FIREBASE_LISTENER] B≈ÇƒÖd Firebase listener:', error);
        });
        
      } catch (error) {
        console.error('‚ùå [FIREBASE_LISTENER] B≈ÇƒÖd podczas konfiguracji Firebase listener:', error);
      }
    };

    // Uruchom listener tylko je≈õli komponent jest zainicjalizowany
    if (isInitialized) {
      setupRealtimeListener();
    }

    // Cleanup
    return () => {
      if (unsubscribe) {
        unsubscribe();
        console.log('üõë [FIREBASE_LISTENER] Od≈ÇƒÖczono Firebase listener dla zam√≥wie≈Ñ');
      }
      if (updateTimeout) {
        clearTimeout(updateTimeout);
      }
    };
  }, [isInitialized]); // Zale≈ºno≈õƒá od isInitialized

  const fetchOrders = async () => {
    try {
      setLoading(true);
      
      // Przygotowanie filtr√≥w dla funkcji z paginacjƒÖ
      const paginationFilters = {
        ...state.filters,
        searchTerm: state.debouncedSearchTerm
      };
      
      // Wywo≈Çanie funkcji paginacji serwerowej
      const result = await getOrdersWithPagination(
        state.page,
        state.rowsPerPage,
        state.orderBy,
        state.orderDirection,
        paginationFilters
      );
      
      // Aktualizacja danych i metadanych paginacji
      setOrders(result.data);
      setTotalItems(result.pagination.totalItems);
      setTotalPages(result.pagination.totalPages);
      
      // Usuwamy zbƒôdne logowanie, kt√≥re generuje wielokrotne komunikaty
      // console.log("Pobrano zam√≥wienia z paginacjƒÖ:", result);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas pobierania zam√≥wie≈Ñ:', error);
      showError(t('orders.notifications.fetchError'));
    } finally {
      setLoading(false);
    }
  };

  const fetchCustomers = async () => {
    try {
      setCustomersLoading(true);
      const { getAllCustomers } = await import('../../services/customerService');
      const data = await getAllCustomers();
      setCustomers(data);
    } catch (error) {
      console.error(t('orders.notifications.customersError'), error);
    } finally {
      setCustomersLoading(false);
    }
  };

  const applyFilters = async () => {
    actions.setPage(1); // Reset do pierwszej strony przy zmianie filtr√≥w
    fetchOrders();
  };

  useEffect(() => {
    if (location.state?.customerId) {
      actions.setFilters({
        customerId: location.state.customerId
      });
      
      if (location.state?.customerName) {
        showSuccess(t('orders.notifications.customerOrdersFilter', { customerName: location.state.customerName }));
      }
      
      // Zastosuj filtry przy pierwszym za≈Çadowaniu
      const timer = setTimeout(() => {
        applyFilters();
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [location.state, showSuccess]);

  useEffect(() => {
    if (orders && orders.length > 0) {
      // To tylko sprawdza czy daty sƒÖ poprawnie sformatowane
      // W razie potrzeby mo≈ºna tu wykonaƒá jakie≈õ dzia≈Çania
    }
  }, [orders]);

  const resetFilters = () => {
    actions.resetFilters();
    fetchOrders();
  };

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    // Dla p√≥l typu date (fromDate, toDate) zapewniamy poprawny format
    actions.setFilters({
      [name]: value
    });
  };

  const handleSearchChange = (e) => {
    actions.setSearchTerm(e.target.value);
  };

  const handleChangePage = (event, newPage) => {
    actions.setPage(newPage + 1); // Dodanie +1, poniewa≈º MUI TablePagination u≈ºywa indeksowania od 0, a nasza funkcja od 1
  };

  const handleChangeRowsPerPage = (event) => {
    actions.setRowsPerPage(parseInt(event.target.value, 10));
  };

  const handleAddOrder = () => {
    navigate('/orders/new');
  };

  const handleEditOrder = (orderId) => {
    navigate(`/orders/edit/${orderId}`);
  };

  const handleDeleteOrderClick = (order) => {
    setOrderToDelete(order);
  };

  const handleConfirmDelete = async () => {
    if (!orderToDelete) return;
    
    try {
      await deleteOrder(orderToDelete.id);
      setOrders(prev => prev.filter(order => order.id !== orderToDelete.id));
      showSuccess(t('orders.notifications.orderDeleted'));
    } catch (error) {
      showError(t('orders.notifications.deleteError', { error: error.message }));
      console.error('Error deleting order:', error);
    } finally {
      setOrderToDelete(null);
    }
  };

  const handleCancelDelete = () => {
    setOrderToDelete(null);
  };

  const handleStatusChangeClick = (order, newStatus) => {
    try {
      if (!order || !order.id || typeof order.id !== 'string') {
        console.error('Nieprawid≈Çowy identyfikator zam√≥wienia:', order);
        showError(t('orders.notifications.statusUpdateError'));
        return;
      }

      // Konwertuj status zam√≥wienia do string je≈õli jest obiektem
      const currentStatus = typeof order.status === 'object' 
        ? JSON.stringify(order.status) 
        : (order.status || 'Nieznany');
      
      // Konwertuj nowy status do string je≈õli jest obiektem  
      const statusValue = typeof newStatus === 'object'
        ? JSON.stringify(newStatus)
        : (newStatus || 'Nieznany');
      
    setStatusChangeInfo({
      orderId: order.id,
        orderNumber: order.orderNumber || order.id.substring(0, 8).toUpperCase(),
        currentStatus: currentStatus,
        newStatus: statusValue
      });
    } catch (error) {
      console.error('B≈ÇƒÖd podczas przygotowania zmiany statusu:', error);
      showError(t('orders.notifications.statusUpdateError'));
    }
  };

  const handleConfirmStatusChange = async () => {
    if (!statusChangeInfo) return;
    
    try {
      await updateOrderStatus(statusChangeInfo.orderId, statusChangeInfo.newStatus, currentUser.uid);
      
      // Aktualizacja lokalnego stanu
      setOrders(prev => prev.map(order => {
        if (order.id === statusChangeInfo.orderId) {
          return { ...order, status: statusChangeInfo.newStatus };
        }
        return order;
      }));
      
      showSuccess(t('orders.notifications.statusUpdated'));
    } catch (error) {
      showError(t('orders.notifications.statusUpdateError'));
      console.error('Error updating order status:', error);
    } finally {
      setStatusChangeInfo(null);
    }
  };

  const handleCancelStatusChange = () => {
    setStatusChangeInfo(null);
  };

  // Nowe funkcje obs≈Çugi zmiany statusu (podobnie jak w PO)
  const handleStatusClick = (order) => {
    setOrderToUpdateStatus(order);
    setNewStatus(order.status || 'Nowe');
    setStatusDialogOpen(true);
  };

  const handleStatusUpdate = async () => {
    try {
      await updateOrderStatus(orderToUpdateStatus.id, newStatus, currentUser.uid);
      
      // Po aktualizacji od≈õwie≈ºamy listƒô
      fetchOrders();
      
      showSuccess(t('orders.notifications.statusUpdated'));
      setStatusDialogOpen(false);
      setOrderToUpdateStatus(null);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas aktualizacji statusu zam√≥wienia:', error);
      showError(t('orders.notifications.statusUpdateError'));
    }
  };

  const toggleExpand = (orderId) => {
    setExpandedOrderId(expandedOrderId === orderId ? null : orderId);
  };

  // U≈ºywamy danych bezpo≈õrednio z serwera
  const displayedOrders = orders;

  const getStatusChipColor = (status) => {
    switch (status) {
      case 'Nowe': return '#1976d2'; // oryginalny niebieski
      case 'W realizacji': return '#2196f3'; // oryginalny jasnoniebieski
      case 'Zako≈Ñczone': return '#4caf50'; // oryginalny zielony
      case 'Anulowane': return '#f44336'; // oryginalny czerwony
      default: return '#757575'; // oryginalny szary
    }
  };

  // Nawigacja do listy zam√≥wie≈Ñ filtrowanej po kliencie
  const handleViewCustomerOrders = (customerId, customerName) => {
    // Ustawiam filtry i przechodzƒô do listy zam√≥wie≈Ñ
    actions.setFilters({
      customerId: customerId
    });
    showSuccess(t('orders.notifications.customerOrdersFilter', { customerName }));
    applyFilters();
  };

  const handleRefreshOrder = async (order) => {
    try {
      // Import potrzebnych funkcji
      const { getOrderById } = await import('../../services/orderService');
      const { getPurchaseOrderById } = await import('../../services/purchaseOrderService');
      
      // Pobierz zaktualizowane dane zam√≥wienia
      const updatedOrder = await getOrderById(order.id);
      console.log("Pobrane zaktualizowane dane zam√≥wienia:", updatedOrder);
      
      // Inicjalizujemy warto≈õƒá zam√≥wie≈Ñ zakupu
      let poTotal = 0;
      
      // Przetwarzamy powiƒÖzane PO, pobierajƒÖc ich aktualne dane
      if (updatedOrder.linkedPurchaseOrders && updatedOrder.linkedPurchaseOrders.length > 0) {
        console.log(`Aktualizujƒô ${updatedOrder.linkedPurchaseOrders.length} powiƒÖzanych PO dla zam√≥wienia ${order.id}`);
        
        // Pobierz aktualne dane ka≈ºdego PO
        const updatedPOs = await Promise.all(
          updatedOrder.linkedPurchaseOrders.map(async (po) => {
            if (!po.id) {
              console.warn("Pominiƒôto PO bez ID:", po);
              return po;
            }
            
            try {
              // Pobierz najnowsze dane PO z bazy
              const freshPO = await getPurchaseOrderById(po.id);
              console.log(`Pobrano aktualne dane PO ${po.number}:`, freshPO);
              
              // U≈ºyj zaktualizowanej warto≈õci totalGross
              if (freshPO.totalGross !== undefined && freshPO.totalGross !== null) {
                const value = typeof freshPO.totalGross === 'number' ? freshPO.totalGross : parseFloat(freshPO.totalGross) || 0;
                console.log(`U≈ºywam warto≈õci totalGross z bazy dla ${freshPO.number}: ${value}`);
                poTotal += value;
                return { ...freshPO }; // U≈ºyj wszystkich zaktualizowanych danych
              } else {
                console.warn(`PO ${freshPO.number || freshPO.id} nie ma warto≈õci totalGross w bazie`);
                
                // W ostateczno≈õci oblicz warto≈õƒá brutto
                const productsValue = typeof freshPO.totalValue === 'number' ? freshPO.totalValue : parseFloat(freshPO.totalValue) || 0;
                const vatRate = typeof freshPO.vatRate === 'number' ? freshPO.vatRate : parseFloat(freshPO.vatRate) || 23;
                const vatValue = (productsValue * vatRate) / 100;
                
                let additionalCosts = 0;
                if (freshPO.additionalCostsItems && Array.isArray(freshPO.additionalCostsItems)) {
                  additionalCosts = freshPO.additionalCostsItems.reduce((costsSum, cost) => {
                    const costValue = typeof cost.value === 'number' ? cost.value : parseFloat(cost.value) || 0;
                    return costsSum + costValue;
                  }, 0);
                } else {
                  additionalCosts = typeof freshPO.additionalCosts === 'number' ? freshPO.additionalCosts : parseFloat(freshPO.additionalCosts) || 0;
                }
                
                const grossValue = productsValue + vatValue + additionalCosts;
                console.log(`Obliczona warto≈õƒá brutto PO ${freshPO.number}: ${grossValue}`);
                poTotal += grossValue;
                return { ...freshPO, totalGross: grossValue };
              }
            } catch (error) {
              console.error(`B≈ÇƒÖd podczas pobierania danych PO ${po.id}:`, error);
              // Je≈õli nie mo≈ºemy pobraƒá danych, u≈ºywamy aktualnych
              const value = typeof po.totalGross === 'number' ? po.totalGross : parseFloat(po.totalGross) || 0;
              poTotal += value;
              return po;
            }
          })
        );
        
        // Aktualizuj linkedPurchaseOrders na dane z zaktualizowanymi warto≈õciami
        updatedOrder.linkedPurchaseOrders = updatedPOs;
      }
      
      // Obliczamy warto≈õƒá produkt√≥w z uwzglƒôdnieniem koszt√≥w produkcji
      const calculateItemTotalValue = (item) => {
        // Podstawowa warto≈õƒá pozycji
        const itemValue = (parseFloat(item.quantity) || 0) * (parseFloat(item.price) || 0);
        
        // Je≈õli produkt jest z listy cenowej I ma cenƒô wiƒôkszƒÖ od 0, zwracamy tylko warto≈õƒá pozycji
        if (item.fromPriceList && parseFloat(item.price || 0) > 0) {
          return itemValue;
        }
        
        // Je≈õli produkt nie jest z listy cenowej LUB ma cenƒô 0, i ma koszt produkcji, dodajemy go
        if (item.productionTaskId && item.productionCost !== undefined) {
          return itemValue + parseFloat(item.productionCost || 0);
        }
        
        // Domy≈õlnie zwracamy tylko warto≈õƒá pozycji
        return itemValue;
      };
      
      const subtotal = (updatedOrder.items || []).reduce((sum, item) => {
        return sum + calculateItemTotalValue(item);
      }, 0);
      
      // Dodanie koszt√≥w dostawy
      const shippingCost = parseFloat(updatedOrder.shippingCost) || 0;
      
      // Dodatkowe koszty (tylko pozytywne)
      const additionalCosts = updatedOrder.additionalCostsItems ? 
        updatedOrder.additionalCostsItems
          .filter(cost => parseFloat(cost.value) > 0)
          .reduce((sum, cost) => sum + (parseFloat(cost.value) || 0), 0) : 0;
      
      // Rabaty (warto≈õci ujemne) - jako warto≈õƒá pozytywna do odjƒôcia
      const discounts = updatedOrder.additionalCostsItems ? 
        Math.abs(updatedOrder.additionalCostsItems
          .filter(cost => parseFloat(cost.value) < 0)
          .reduce((sum, cost) => sum + (parseFloat(cost.value) || 0), 0)) : 0;
      
      // ≈ÅƒÖczna warto≈õƒá zam√≥wienia
      const recalculatedTotalValue = subtotal + shippingCost + additionalCosts - discounts;
      
      console.log(`Zaktualizowane warto≈õci zam√≥wienia ${order.id}: produkty=${subtotal}, dostawa=${shippingCost}, PO=${poTotal}, razem=${recalculatedTotalValue}`);
      
      // Sprawd≈∫ czy warto≈õƒá siƒô zmieni≈Ça w por√≥wnaniu do zapisanej w bazie
      const savedTotalValue = parseFloat(updatedOrder.totalValue) || 0;
      const valueChanged = Math.abs(recalculatedTotalValue - savedTotalValue) > 0.01;
      
      // Je≈õli warto≈õƒá siƒô zmieni≈Ça, zaktualizuj jƒÖ w bazie danych
      if (valueChanged) {
        console.log(`Warto≈õƒá zam√≥wienia ${order.id} zosta≈Ça zaktualizowana: ${savedTotalValue} ‚Üí ${recalculatedTotalValue}`);
        
        try {
          const { updateOrder } = await import('../../services/orderService');
          
          // Przygotuj bezpieczne dane do aktualizacji
          const safeUpdateData = {
            items: updatedOrder.items,
            totalValue: recalculatedTotalValue,
            orderNumber: updatedOrder.orderNumber,
            orderDate: updatedOrder.orderDate, // Wymagane przez walidacjƒô
            status: updatedOrder.status,
            customer: updatedOrder.customer,
            shippingCost: updatedOrder.shippingCost,
            additionalCostsItems: updatedOrder.additionalCostsItems,
            productionTasks: updatedOrder.productionTasks,
            linkedPurchaseOrders: updatedOrder.linkedPurchaseOrders
          };
          
          console.log(`Zapisujƒô do bazy danych zam√≥wienie ${order.id} z warto≈õciƒÖ:`, recalculatedTotalValue);
          console.log('Dane do zapisu:', safeUpdateData);
          
          await updateOrder(updatedOrder.id, safeUpdateData, 'system');
          console.log(`‚úÖ Zapisano zaktualizowanƒÖ warto≈õƒá zam√≥wienia ${order.id} do bazy danych`);
          
          // Weryfikacja - sprawd≈∫ czy dane zosta≈Çy rzeczywi≈õcie zapisane
          const verificationOrder = await getOrderById(order.id);
          const verificationValue = parseFloat(verificationOrder.totalValue) || 0;
          console.log(`üîç Weryfikacja: warto≈õƒá w bazie po zapisie: ${verificationValue}`);
          
          if (Math.abs(verificationValue - recalculatedTotalValue) > 0.01) {
            console.error(`‚ùå B≈ÅƒÑD SYNCHRONIZACJI: Oczekiwana warto≈õƒá ${recalculatedTotalValue}, a w bazie ${verificationValue}`);
            showError(t('orders.notifications.valuesRefreshError'));
          } else {
            console.log(`‚úÖ Weryfikacja potwierdza prawid≈Çowy zapis do bazy danych`);
          }
          
        } catch (error) {
          console.error(`‚ùå B≈ÇƒÖd podczas aktualizacji warto≈õci zam√≥wienia ${order.id} w bazie danych:`, error);
          showError(t('orders.notifications.moSaveError'));
        }
      } else {
        console.log(`Warto≈õƒá zam√≥wienia ${order.id} nie zmieni≈Ça siƒô (${recalculatedTotalValue}), pomijam zapis do bazy`);
      }
      
      // Aktualizuj ten jeden element w tablicy zam√≥wie≈Ñ
      setOrders(prevOrders => prevOrders.map(o => {
        if (o.id === order.id) {
          return {
            ...updatedOrder,
            totalValue: recalculatedTotalValue,
            productsValue: subtotal,
            purchaseOrdersValue: poTotal,
            shippingCost: shippingCost
          };
        }
        return o;
      }));
      
      showSuccess(t('orders.notifications.valuesRefreshed', { count: 1 }));
    } catch (error) {
      console.error('B≈ÇƒÖd podczas od≈õwie≈ºania danych zam√≥wienia:', error);
      showError(t('orders.notifications.valuesRefreshError'));
    }
  };

  const handleRefreshAll = async () => {
    try {
      setLoading(true);
      showInfo(t('orders.notifications.refreshingValues'));
      
      // Import potrzebnych funkcji
      const { getOrderById } = await import('../../services/orderService');
      const { getPurchaseOrderById } = await import('../../services/purchaseOrderService');
      
      // Pobierz ≈õwie≈ºe dane z serwera
      const freshData = await getAllOrders();
      console.log("Pobrane ≈õwie≈ºe dane zam√≥wie≈Ñ:", freshData);
      
      // Przelicz warto≈õci dla ka≈ºdego zam√≥wienia z pe≈Çnym od≈õwie≈ºeniem PO
      const updatedOrders = await Promise.all(freshData.map(async (order) => {
        console.log(`Od≈õwie≈ºam dane zam√≥wienia ${order.id}`);
        
        // Pobierz zaktualizowane pe≈Çne dane zam√≥wienia
        const updatedOrderData = await getOrderById(order.id);
        console.log("Pobrane pe≈Çne dane zam√≥wienia:", updatedOrderData);
        
        // Aktualizuj koszty produkcji dla pozycji zam√≥wienia
        if (updatedOrderData.productionTasks && updatedOrderData.productionTasks.length > 0 && updatedOrderData.items && updatedOrderData.items.length > 0) {
          // Importuj funkcjƒô do pobierania szczeg√≥≈Ç√≥w zadania
          const { getTaskById } = await import('../../services/productionService');
          const { calculateFullProductionUnitCost, calculateProductionUnitCost } = await import('../../utils/costCalculator');
          
          console.log("Aktualizujƒô koszty produkcji dla zam√≥wienia:", order.id);
          
          for (let i = 0; i < updatedOrderData.items.length; i++) {
            const item = updatedOrderData.items[i];
            
            // Znajd≈∫ powiƒÖzane zadanie produkcyjne
            const associatedTask = updatedOrderData.productionTasks?.find(task => 
              task.id === item.productionTaskId
            );
            
            if (associatedTask) {
              try {
                // Pobierz szczeg√≥≈Çowe dane zadania z bazy danych
                const taskDetails = await getTaskById(associatedTask.id);
                
                const fullProductionCost = taskDetails.totalFullProductionCost || associatedTask.totalFullProductionCost || 0;
                const productionCost = taskDetails.totalMaterialCost || associatedTask.totalMaterialCost || 0;
                
                // Oblicz koszty jednostkowe z uwzglƒôdnieniem logiki listy cenowej
                const calculatedFullProductionUnitCost = calculateFullProductionUnitCost(item, fullProductionCost);
                const calculatedProductionUnitCost = calculateProductionUnitCost(item, productionCost);
                
                // Aktualizuj informacje o zadaniu produkcyjnym w elemencie zam√≥wienia
                updatedOrderData.items[i] = {
                  ...item,
                  productionTaskId: associatedTask.id,
                  productionTaskNumber: associatedTask.moNumber || taskDetails.moNumber,
                  productionStatus: associatedTask.status || taskDetails.status,
                  // U≈ºywaj totalMaterialCost jako podstawowy koszt produkcji (tylko materia≈Çy wliczane do koszt√≥w)
                  productionCost: productionCost,
                  // Dodaj pe≈Çny koszt produkcji (wszystkie materia≈Çy niezale≈ºnie od flagi "wliczaj")
                  fullProductionCost: fullProductionCost,
                  // Dodaj obliczone koszty jednostkowe
                  productionUnitCost: calculatedProductionUnitCost,
                  fullProductionUnitCost: calculatedFullProductionUnitCost
                };
                
                console.log(`Zaktualizowano koszty dla pozycji ${item.name}: koszt podstawowy = ${updatedOrderData.items[i].productionCost}‚Ç¨, pe≈Çny koszt = ${updatedOrderData.items[i].fullProductionCost}‚Ç¨, pe≈Çny koszt/szt = ${calculatedFullProductionUnitCost.toFixed(2)}‚Ç¨ (lista cenowa: ${item.fromPriceList ? 'tak' : 'nie'})`);
              } catch (error) {
                console.error(`B≈ÇƒÖd podczas pobierania szczeg√≥≈Ç√≥w zadania ${associatedTask.id}:`, error);
                
                // W przypadku b≈Çƒôdu, u≈ºyj podstawowych danych z associatedTask
                const fullProductionCost = associatedTask.totalFullProductionCost || 0;
                const productionCost = associatedTask.totalMaterialCost || 0;
                
                updatedOrderData.items[i] = {
                  ...item,
                  productionTaskId: associatedTask.id,
                  productionTaskNumber: associatedTask.moNumber,
                  productionStatus: associatedTask.status,
                  productionCost: productionCost,
                  fullProductionCost: fullProductionCost,
                  productionUnitCost: productionCost / (parseFloat(item.quantity) || 1),
                  fullProductionUnitCost: fullProductionCost / (parseFloat(item.quantity) || 1)
                };
              }
            }
          }
        }
        
        // Inicjalizujemy warto≈õci
        let poTotal = 0;
        
        // Pobieramy aktualne wersje wszystkich powiƒÖzanych PO bezpo≈õrednio z bazy
        if (updatedOrderData.linkedPurchaseOrders && updatedOrderData.linkedPurchaseOrders.length > 0) {
          console.log(`Aktualizujƒô ${updatedOrderData.linkedPurchaseOrders.length} powiƒÖzanych PO dla zam√≥wienia ${order.id}`);
          
          // Pobierz aktualne dane ka≈ºdego PO
          const updatedPOs = await Promise.all(
            updatedOrderData.linkedPurchaseOrders.map(async (po) => {
              if (!po.id) {
                console.warn("Pominiƒôto PO bez ID:", po);
                return po;
              }
              
              try {
                // Pobierz najnowsze dane PO z bazy
                const freshPO = await getPurchaseOrderById(po.id);
                console.log(`Pobrano aktualne dane PO ${po.number}:`, freshPO);
                
                // U≈ºyj zaktualizowanej warto≈õci totalGross
                if (freshPO.totalGross !== undefined && freshPO.totalGross !== null) {
                  const value = typeof freshPO.totalGross === 'number' ? freshPO.totalGross : parseFloat(freshPO.totalGross) || 0;
                  console.log(`U≈ºywam warto≈õci totalGross z bazy dla ${freshPO.number}: ${value}`);
                  poTotal += value;
                  return { ...freshPO }; // Zwr√≥ƒá pe≈Çne zaktualizowane dane
                } else {
                  console.warn(`PO ${freshPO.number || freshPO.id} nie ma warto≈õci totalGross w bazie`);
                  
                  // W ostateczno≈õci oblicz warto≈õƒá brutto
                  const productsValue = typeof freshPO.totalValue === 'number' ? freshPO.totalValue : parseFloat(freshPO.totalValue) || 0;
                  const vatRate = typeof freshPO.vatRate === 'number' ? freshPO.vatRate : parseFloat(freshPO.vatRate) || 23;
                  const vatValue = (productsValue * vatRate) / 100;
                  
                  let additionalCosts = 0;
                  if (freshPO.additionalCostsItems && Array.isArray(freshPO.additionalCostsItems)) {
                    additionalCosts = freshPO.additionalCostsItems.reduce((costsSum, cost) => {
                      const costValue = typeof cost.value === 'number' ? cost.value : parseFloat(cost.value) || 0;
                      return costsSum + costValue;
                    }, 0);
                  } else {
                    additionalCosts = typeof freshPO.additionalCosts === 'number' ? freshPO.additionalCosts : parseFloat(freshPO.additionalCosts) || 0;
                  }
                  
                  const grossValue = productsValue + vatValue + additionalCosts;
                  console.log(`Obliczona warto≈õƒá brutto PO ${freshPO.number}: ${grossValue}`);
                  poTotal += grossValue;
                  return { ...freshPO, totalGross: grossValue };
                }
              } catch (error) {
                console.error(`B≈ÇƒÖd podczas pobierania danych PO ${po.id}:`, error);
                // Je≈õli nie mo≈ºemy pobraƒá danych, u≈ºywamy aktualnych
                const value = typeof po.totalGross === 'number' ? po.totalGross : parseFloat(po.totalGross) || 0;
                poTotal += value;
                return po;
              }
            })
          );
          
          // Aktualizuj linkedPurchaseOrders na dane z zaktualizowanymi warto≈õciami
          updatedOrderData.linkedPurchaseOrders = updatedPOs;
        }
        
        // Obliczamy aktualnƒÖ warto≈õƒá zam√≥wienia uwzglƒôdniajƒÖc koszty produkcji
        const calculateItemTotalValue = (item) => {
          // Podstawowa warto≈õƒá pozycji
          const itemValue = (parseFloat(item.quantity) || 0) * (parseFloat(item.price) || 0);
          
          // Je≈õli produkt jest z listy cenowej I ma cenƒô wiƒôkszƒÖ od 0, zwracamy tylko warto≈õƒá pozycji
          if (item.fromPriceList && parseFloat(item.price || 0) > 0) {
            return itemValue;
          }
          
          // Je≈õli produkt nie jest z listy cenowej LUB ma cenƒô 0, i ma koszt produkcji, dodajemy go
          if (item.productionTaskId && item.productionCost !== undefined) {
            return itemValue + parseFloat(item.productionCost || 0);
          }
          
          // Domy≈õlnie zwracamy tylko warto≈õƒá pozycji
          return itemValue;
        };
        
        // Oblicz warto≈õƒá produkt√≥w z uwzglƒôdnieniem koszt√≥w produkcji
        const subtotal = (updatedOrderData.items || []).reduce((sum, item) => {
          return sum + calculateItemTotalValue(item);
        }, 0);
        
        // Koszt dostawy
        const shippingCost = parseFloat(updatedOrderData.shippingCost) || 0;
        
        // Dodatkowe koszty (tylko pozytywne)
        const additionalCosts = updatedOrderData.additionalCostsItems ? 
          updatedOrderData.additionalCostsItems
            .filter(cost => parseFloat(cost.value) > 0)
            .reduce((sum, cost) => sum + (parseFloat(cost.value) || 0), 0) : 0;
        
        // Rabaty (warto≈õci ujemne) - jako warto≈õƒá pozytywna do odjƒôcia
        const discounts = updatedOrderData.additionalCostsItems ? 
          Math.abs(updatedOrderData.additionalCostsItems
            .filter(cost => parseFloat(cost.value) < 0)
            .reduce((sum, cost) => sum + (parseFloat(cost.value) || 0), 0)) : 0;
        
        // Oblicz ca≈ÇkowitƒÖ aktualnƒÖ warto≈õƒá zam√≥wienia
        const recalculatedTotalValue = subtotal + shippingCost + additionalCosts - discounts;
        
        // Sprawd≈∫ czy warto≈õƒá siƒô zmieni≈Ça w por√≥wnaniu do zapisanej w bazie
        const savedTotalValue = parseFloat(updatedOrderData.totalValue) || 0;
        const valueChanged = Math.abs(recalculatedTotalValue - savedTotalValue) > 0.01;
        
                 if (valueChanged) {
           console.log(`Warto≈õƒá zam√≥wienia ${order.id} zosta≈Ça zaktualizowana: ${savedTotalValue} ‚Üí ${recalculatedTotalValue}`);
           
           // Zaktualizuj zam√≥wienie w bazie danych z nowymi kosztami produkcji i warto≈õciƒÖ
           try {
             const { updateOrder } = await import('../../services/orderService');
             
             // Przygotuj bezpieczne dane do aktualizacji
             const safeUpdateData = {
               items: updatedOrderData.items,
               totalValue: recalculatedTotalValue,
               orderNumber: updatedOrderData.orderNumber,
               orderDate: updatedOrderData.orderDate, // Wymagane przez walidacjƒô
               status: updatedOrderData.status,
               customer: updatedOrderData.customer,
               shippingCost: updatedOrderData.shippingCost,
               additionalCostsItems: updatedOrderData.additionalCostsItems,
               productionTasks: updatedOrderData.productionTasks,
               linkedPurchaseOrders: updatedOrderData.linkedPurchaseOrders
             };
             
             console.log(`[handleRefreshAll] Zapisujƒô zam√≥wienie ${order.id} z warto≈õciƒÖ:`, recalculatedTotalValue);
             await updateOrder(updatedOrderData.id, safeUpdateData, 'system');
             console.log(`‚úÖ [handleRefreshAll] Zapisano zam√≥wienie ${order.id} do bazy danych`);
           } catch (error) {
             console.error(`‚ùå [handleRefreshAll] B≈ÇƒÖd podczas aktualizacji warto≈õci zam√≥wienia ${order.id}:`, error);
           }
         } else {
           console.log(`[handleRefreshAll] Warto≈õƒá zam√≥wienia ${order.id} nie zmieni≈Ça siƒô (${recalculatedTotalValue}), pomijam zapis`);
         }
        
        console.log(`Zaktualizowane dane zam√≥wienia ${order.id}: przeliczenieWarto≈õci=${recalculatedTotalValue}, produkty=${subtotal}, dostawa=${shippingCost}, PO=${poTotal}`);
        
        return {
          ...updatedOrderData,
          totalValue: recalculatedTotalValue, // U≈ºywamy przeliczonej warto≈õci
          productsValue: subtotal,
          purchaseOrdersValue: poTotal,
          shippingCost: shippingCost
        };
      }));
      
      setOrders(updatedOrders);
      showSuccess(t('orders.notifications.valuesRefreshed', { count: orders.length }));
    } catch (error) {
      console.error('B≈ÇƒÖd podczas od≈õwie≈ºania danych zam√≥wie≈Ñ:', error);
      showError(t('orders.notifications.valuesRefreshError'));
    } finally {
      setLoading(false);
    }
  };

  // Dodajmy funkcjƒô pomocniczƒÖ do bezpiecznego renderowania warto≈õci
  const safeRenderValue = (value) => {
    if (value === null || value === undefined) {
      return '-';
    }
    
    if (typeof value === 'object') {
      return JSON.stringify(value);
    }
    
    return String(value);
  };

  // Funkcja do formatowania danych dostawcy
  const formatSupplier = (supplier) => {
    if (!supplier) return '-';
    
    if (typeof supplier === 'string') {
      return supplier;
    }
    
    if (typeof supplier === 'object') {
      // Je≈õli obiekt ma pole name, u≈ºyj go
      if (supplier.name) {
        return supplier.name;
      }
      
      // W przeciwnym razie sformatuj ca≈Çy obiekt
      try {
        return JSON.stringify(supplier).substring(0, 50) + (JSON.stringify(supplier).length > 50 ? '...' : '');
      } catch (e) {
        return 'Nieprawid≈Çowe dane dostawcy';
      }
    }
    
    return String(supplier);
  };

  // Obs≈Çuga sortowania kolumn
  const handleSort = (column) => {
    const isAsc = state.orderBy === column && state.orderDirection === 'asc';
    actions.setOrderDirection(isAsc ? 'desc' : 'asc');
    actions.setOrderBy(column);
    actions.setPage(1); // Reset do pierwszej strony
  };

  // Funkcja do od≈õwie≈ºania warto≈õci przed eksportem
  const refreshOrdersForExport = async () => {
    try {
      // Import potrzebnych funkcji
      const { getAllOrders } = await import('../../services/orderService');
      const { getOrderById } = await import('../../services/orderService');
      const { getPurchaseOrderById } = await import('../../services/purchaseOrderService');
      
      // Pobierz wszystkie zam√≥wienia z uwzglƒôdnieniem filtr√≥w
      let ordersToRefresh = orders;
      
      // Je≈õli mamy wiƒôcej ni≈º jednƒÖ stronƒô, pobierz wszystkie zam√≥wienia
      if (totalPages > 1) {
        const allOrdersResult = await getOrdersWithPagination(
          1, // pierwsza strona
          totalItems, // wszystkie elementy
          state.orderBy,
          state.orderDirection,
          { ...state.filters, searchTerm: state.debouncedSearchTerm }
        );
        ordersToRefresh = allOrdersResult.data;
      }
      
      // Przelicz warto≈õci dla ka≈ºdego zam√≥wienia
      const updatedOrders = await Promise.all(ordersToRefresh.map(async (order) => {
        console.log(`[Export] Od≈õwie≈ºam warto≈õci zam√≥wienia ${order.id}`);
        
        // Pobierz zaktualizowane pe≈Çne dane zam√≥wienia
        const updatedOrderData = await getOrderById(order.id);
        
        // Aktualizuj koszty produkcji dla pozycji zam√≥wienia
        if (updatedOrderData.productionTasks && updatedOrderData.productionTasks.length > 0 && updatedOrderData.items && updatedOrderData.items.length > 0) {
          const { getTaskById } = await import('../../services/productionService');
          const { calculateFullProductionUnitCost, calculateProductionUnitCost } = await import('../../utils/costCalculator');
          
          for (let i = 0; i < updatedOrderData.items.length; i++) {
            const item = updatedOrderData.items[i];
            
            // Znajd≈∫ powiƒÖzane zadanie produkcyjne
            const associatedTask = updatedOrderData.productionTasks?.find(task => 
              task.id === item.productionTaskId
            );
            
            if (associatedTask) {
              try {
                // Pobierz szczeg√≥≈Çowe dane zadania z bazy danych
                const taskDetails = await getTaskById(associatedTask.id);
                
                const fullProductionCost = taskDetails.totalFullProductionCost || associatedTask.totalFullProductionCost || 0;
                const productionCost = taskDetails.totalMaterialCost || associatedTask.totalMaterialCost || 0;
                
                // Oblicz koszty jednostkowe z uwzglƒôdnieniem logiki listy cenowej
                const calculatedFullProductionUnitCost = calculateFullProductionUnitCost(item, fullProductionCost);
                const calculatedProductionUnitCost = calculateProductionUnitCost(item, productionCost);
                
                // Aktualizuj informacje o zadaniu produkcyjnym w elemencie zam√≥wienia
                updatedOrderData.items[i] = {
                  ...item,
                  productionTaskId: associatedTask.id,
                  productionTaskNumber: associatedTask.moNumber || taskDetails.moNumber,
                  productionStatus: associatedTask.status || taskDetails.status,
                  productionCost: productionCost,
                  fullProductionCost: fullProductionCost,
                  productionUnitCost: calculatedProductionUnitCost,
                  fullProductionUnitCost: calculatedFullProductionUnitCost
                };
              } catch (error) {
                console.error(`B≈ÇƒÖd podczas pobierania szczeg√≥≈Ç√≥w zadania ${associatedTask.id}:`, error);
                
                // W przypadku b≈Çƒôdu, u≈ºyj podstawowych danych z associatedTask
                const fullProductionCost = associatedTask.totalFullProductionCost || 0;
                const productionCost = associatedTask.totalMaterialCost || 0;
                
                updatedOrderData.items[i] = {
                  ...item,
                  productionTaskId: associatedTask.id,
                  productionTaskNumber: associatedTask.moNumber,
                  productionStatus: associatedTask.status,
                  productionCost: productionCost,
                  fullProductionCost: fullProductionCost,
                  productionUnitCost: productionCost / (parseFloat(item.quantity) || 1),
                  fullProductionUnitCost: fullProductionCost / (parseFloat(item.quantity) || 1)
                };
              }
            }
          }
        }
        
        // Oblicz warto≈õƒá produkt√≥w z uwzglƒôdnieniem koszt√≥w produkcji
        const calculateItemTotalValue = (item) => {
          const itemValue = (parseFloat(item.quantity) || 0) * (parseFloat(item.price) || 0);
          if (item.fromPriceList && parseFloat(item.price || 0) > 0) {
            return itemValue;
          }
          if (item.productionTaskId && item.productionCost !== undefined) {
            return itemValue + parseFloat(item.productionCost || 0);
          }
          return itemValue;
        };
        
        const subtotal = (updatedOrderData.items || []).reduce((sum, item) => {
          return sum + calculateItemTotalValue(item);
        }, 0);
        
        const shippingCost = parseFloat(updatedOrderData.shippingCost) || 0;
        const additionalCosts = updatedOrderData.additionalCostsItems ? 
          updatedOrderData.additionalCostsItems
            .filter(cost => parseFloat(cost.value) > 0)
            .reduce((sum, cost) => sum + (parseFloat(cost.value) || 0), 0) : 0;
        const discounts = updatedOrderData.additionalCostsItems ? 
          Math.abs(updatedOrderData.additionalCostsItems
            .filter(cost => parseFloat(cost.value) < 0)
            .reduce((sum, cost) => sum + (parseFloat(cost.value) || 0), 0)) : 0;
        
        const recalculatedTotalValue = subtotal + shippingCost + additionalCosts - discounts;
        
        return {
          ...updatedOrderData,
          totalValue: recalculatedTotalValue,
          productsValue: subtotal,
          shippingCost: shippingCost
        };
      }));
      
      // Aktualizuj stan z od≈õwie≈ºonymi danymi
      setOrders(updatedOrders);
      console.log(`[Export] Od≈õwie≈ºono warto≈õci dla ${updatedOrders.length} zam√≥wie≈Ñ`);
      
    } catch (error) {
      console.error('B≈ÇƒÖd podczas od≈õwie≈ºania warto≈õci przed eksportem:', error);
      showError(t('orders.notifications.valuesRefreshError'));
      throw error; // Przerwij eksport w przypadku b≈Çƒôdu
    }
  };

  const handleRefreshMO = async (order) => {
    try {
      setLoading(true);
      showInfo(t('orders.notifications.refreshingMO'));
      
      // Import potrzebnych funkcji
      const { getOrderById } = await import('../../services/orderService');
      
      // Pobierz zaktualizowane dane zam√≥wienia
      const updatedOrder = await getOrderById(order.id);
      
      // Aktualizuj koszty produkcji dla pozycji zam√≥wienia
      if (updatedOrder.productionTasks && updatedOrder.productionTasks.length > 0 && updatedOrder.items && updatedOrder.items.length > 0) {
        // Importuj funkcjƒô do pobierania szczeg√≥≈Ç√≥w zadania
        const { getTaskById } = await import('../../services/productionService');
        const { calculateFullProductionUnitCost, calculateProductionUnitCost } = await import('../../utils/costCalculator');
        
        console.log("Aktualizujƒô koszty produkcji dla zam√≥wienia:", order.id);
        
        for (let i = 0; i < updatedOrder.items.length; i++) {
          const item = updatedOrder.items[i];
          
          // Znajd≈∫ powiƒÖzane zadanie produkcyjne
          const associatedTask = updatedOrder.productionTasks?.find(task => 
            task.id === item.productionTaskId
          );
          
          if (associatedTask) {
            try {
              // Pobierz szczeg√≥≈Çowe dane zadania z bazy danych
              const taskDetails = await getTaskById(associatedTask.id);
              
              const fullProductionCost = taskDetails.totalFullProductionCost || associatedTask.totalFullProductionCost || 0;
              const productionCost = taskDetails.totalMaterialCost || associatedTask.totalMaterialCost || 0;
              
              // Oblicz koszty jednostkowe z uwzglƒôdnieniem logiki listy cenowej
              const calculatedFullProductionUnitCost = calculateFullProductionUnitCost(item, fullProductionCost);
              const calculatedProductionUnitCost = calculateProductionUnitCost(item, productionCost);
              
              // Aktualizuj informacje o zadaniu produkcyjnym w elemencie zam√≥wienia
              updatedOrder.items[i] = {
                ...item,
                productionTaskId: associatedTask.id,
                productionTaskNumber: associatedTask.moNumber || taskDetails.moNumber,
                productionStatus: associatedTask.status || taskDetails.status,
                // U≈ºywaj totalMaterialCost jako podstawowy koszt produkcji (tylko materia≈Çy wliczane do koszt√≥w)
                productionCost: productionCost,
                // Dodaj pe≈Çny koszt produkcji (wszystkie materia≈Çy niezale≈ºnie od flagi "wliczaj")
                fullProductionCost: fullProductionCost,
                // Dodaj obliczone koszty jednostkowe
                productionUnitCost: calculatedProductionUnitCost,
                fullProductionUnitCost: calculatedFullProductionUnitCost
              };
              
              console.log(`Zaktualizowano koszty dla pozycji ${item.name}: koszt podstawowy = ${updatedOrder.items[i].productionCost}‚Ç¨, pe≈Çny koszt = ${updatedOrder.items[i].fullProductionCost}‚Ç¨, pe≈Çny koszt/szt = ${calculatedFullProductionUnitCost.toFixed(2)}‚Ç¨ (lista cenowa: ${item.fromPriceList ? 'tak' : 'nie'})`);
            } catch (error) {
              console.error(`B≈ÇƒÖd podczas pobierania szczeg√≥≈Ç√≥w zadania ${associatedTask.id}:`, error);
              
              // W przypadku b≈Çƒôdu, u≈ºyj podstawowych danych z associatedTask
              const fullProductionCost = associatedTask.totalFullProductionCost || 0;
              const productionCost = associatedTask.totalMaterialCost || 0;
              
              updatedOrder.items[i] = {
                ...item,
                productionTaskId: associatedTask.id,
                productionTaskNumber: associatedTask.moNumber,
                productionStatus: associatedTask.status,
                productionCost: productionCost,
                fullProductionCost: fullProductionCost,
                productionUnitCost: productionCost / (parseFloat(item.quantity) || 1),
                fullProductionUnitCost: fullProductionCost / (parseFloat(item.quantity) || 1)
              };
            }
          }
        }
        
        // Zapisz zaktualizowane dane do bazy
        try {
          const { updateOrder } = await import('../../services/orderService');
          
          const safeUpdateData = {
            items: updatedOrder.items,
            orderNumber: updatedOrder.orderNumber,
            orderDate: updatedOrder.orderDate,
            status: updatedOrder.status,
            customer: updatedOrder.customer,
            shippingCost: updatedOrder.shippingCost,
            additionalCostsItems: updatedOrder.additionalCostsItems,
            productionTasks: updatedOrder.productionTasks
          };
          
          await updateOrder(updatedOrder.id, safeUpdateData, 'system');
          
          // Zaktualizuj lokalny stan
          setOrders(prevOrders => prevOrders.map(o => {
            if (o.id === order.id) {
              return { ...o, ...updatedOrder };
            }
            return o;
          }));
          
          showSuccess(t('orders.notifications.moRefreshed'));
        } catch (updateError) {
          console.error('B≈ÇƒÖd podczas zapisywania zaktualizowanych danych MO:', updateError);
          showError(t('orders.notifications.moSaveError'));
        }
      } else {
        showInfo(t('orders.notifications.noMOData'));
      }
    } catch (error) {
      console.error('B≈ÇƒÖd podczas od≈õwie≈ºania danych MO:', error);
      showError(t('orders.notifications.moRefreshError'));
    } finally {
      setLoading(false);
    }
  };

  const handleRefreshCMRData = async (order) => {
    try {
      setLoading(true);
      showInfo(t('orders.notifications.refreshingCMR'));
      
      // Import funkcji do debugowania i od≈õwie≈ºania danych CMR
      const { debugOrderCMRConnections, refreshShippedQuantitiesFromCMR, cleanupObsoleteCMRConnections } = await import('../../services/orderService');
      
      // Najpierw uruchom debugowanie aby zobaczyƒá stan przed od≈õwie≈ºaniem
      console.log('=== ROZPOCZƒòCIE DEBUGOWANIA CMR ===');
      await debugOrderCMRConnections(order.id);
      console.log('=== KONIEC DEBUGOWANIA CMR ===');
      
      // Od≈õwie≈º dane wys≈Çanych ilo≈õci na podstawie CMR
      const result = await refreshShippedQuantitiesFromCMR(order.id, currentUser?.uid || 'system');
      
      // Je≈õli znaleziono nieaktualne powiƒÖzania, automatycznie je oczy≈õƒá
      if (result.stats.obsoleteConnections > 0) {
        console.log(`üßπ Znaleziono ${result.stats.obsoleteConnections} nieaktualnych powiƒÖza≈Ñ - rozpoczynanie oczyszczania...`);
        try {
          const cleanupResult = await cleanupObsoleteCMRConnections(result.stats.obsoleteItems, currentUser?.uid || 'system');
          console.log(`‚úÖ Oczyszczono ${cleanupResult.cleanedItems} nieaktualnych powiƒÖza≈Ñ`);
          
          // Uruchom ponowne od≈õwie≈ºanie po oczyszczeniu
          const secondResult = await refreshShippedQuantitiesFromCMR(order.id, currentUser?.uid || 'system');
          result.stats = { ...result.stats, ...secondResult.stats, cleanedItems: cleanupResult.cleanedItems };
        } catch (cleanupError) {
          console.error('B≈ÇƒÖd podczas oczyszczania nieaktualnych powiƒÖza≈Ñ:', cleanupError);
          showError(`B≈ÇƒÖd podczas oczyszczania: ${cleanupError.message}`);
        }
      }
      
      // Zaktualizuj lokalny stan zam√≥wienia
      setOrders(prevOrders => prevOrders.map(o => {
        if (o.id === order.id) {
          return { 
            ...o, 
            items: result.updatedItems 
          };
        }
        return o;
      }));
      
      // Poka≈º statystyki od≈õwie≈ºania
      const { stats } = result;
      let message = t('orders.notifications.cmrRefreshed', {
        cmrs: stats.processedCMRs,
        items: stats.shippedItems,
        references: stats.cmrReferences
      });
      
      // Dodaj informacje o oczyszczonych powiƒÖzaniach je≈õli by≈Çy
      if (stats.cleanedItems > 0) {
        message += ` Oczyszczono ${stats.cleanedItems} nieaktualnych powiƒÖza≈Ñ.`;
      } else if (stats.obsoleteConnections > 0) {
        message += ` Wykryto ${stats.obsoleteConnections} nieaktualnych powiƒÖza≈Ñ (nie uda≈Ço siƒô oczy≈õciƒá).`;
      }
      
      showSuccess(message);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas od≈õwie≈ºania danych CMR:', error);
      showError(t('orders.notifications.cmrRefreshError', { error: error.message }));
    } finally {
      setLoading(false);
    }
  };

  // Funkcja eksportu zam√≥wie≈Ñ klient√≥w z pozycjami do CSV
  const handleExportOrdersToCSV = async () => {
    try {
      setLoading(true);
      showInfo(t('orders.notifications.refreshingValues'));
      
      // Najpierw od≈õwie≈º wszystkie warto≈õci zam√≥wie≈Ñ
      await refreshOrdersForExport();
      
      // Pobierz wszystkie zam√≥wienia z uwzglƒôdnieniem aktualnych filtr√≥w
      let exportOrders = orders;
      
      // Je≈õli mamy tylko jednƒÖ stronƒô danych, pobieramy wszystkie zam√≥wienia z filtrami
      if (totalPages > 1) {
        const allOrdersResult = await getOrdersWithPagination(
          1, // pierwsza strona
          totalItems, // wszystkie elementy
          state.orderBy,
          state.orderDirection,
          { ...state.filters, searchTerm: state.debouncedSearchTerm }
        );
        exportOrders = allOrdersResult.data;
      }

      // Pobierz nazwy u≈ºytkownik√≥w dla p√≥l "Utworzone przez"
      const createdByUserIds = exportOrders
        .map(order => order.createdBy)
        .filter(id => id)
        .filter((id, index, array) => array.indexOf(id) === index); // usu≈Ñ duplikaty
      
      let userNames = {};
      if (createdByUserIds.length > 0) {
        try {
          userNames = await getUsersDisplayNames(createdByUserIds);
        } catch (error) {
          console.error('B≈ÇƒÖd podczas pobierania nazw u≈ºytkownik√≥w:', error);
        }
      }

      // Przygotuj dane do eksportu - ka≈ºda pozycja zam√≥wienia jako osobny wiersz
      const exportData = [];
      
      exportOrders.forEach(order => {
        if (order.items && order.items.length > 0) {
          order.items.forEach((item, itemIndex) => {
            // Znajd≈∫ powiƒÖzane zadanie produkcyjne dla tej pozycji
            let associatedTask = null;
            if (order.productionTasks && order.productionTasks.length > 0) {
              // Najpierw szukaj po orderItemId (najdok≈Çadniejsze dopasowanie)
              associatedTask = order.productionTasks.find(task => 
                task.orderItemId && task.orderItemId === item.id
              );
              
              // Je≈õli nie znaleziono po orderItemId, spr√≥buj dopasowaƒá po nazwie i ilo≈õci
              if (!associatedTask) {
                associatedTask = order.productionTasks.find(task => 
                  task.productName === item.name && 
                  parseFloat(task.quantity) === parseFloat(item.quantity) &&
                  !order.productionTasks.some(t => t.orderItemId === item.id) // upewnij siƒô, ≈ºe zadanie nie jest ju≈º przypisane
                );
              }
            }

            // Pobierz dane zadania produkcyjnego - priorytet dla danych z order.productionTasks
            const productionTaskId = associatedTask?.id || item.productionTaskId || '';
            const productionTaskNumber = associatedTask?.moNumber || item.productionTaskNumber || '';
            const productionStatus = associatedTask?.status || item.productionStatus || '';
            
            // Oblicz warto≈õƒá pozycji z uwzglƒôdnieniem koszt√≥w produkcji
            const itemValue = (parseFloat(item.quantity) || 0) * (parseFloat(item.price) || 0);
            let totalItemValue = itemValue;
            
            // Je≈õli produkt nie jest z listy cenowej LUB ma cenƒô 0, i ma koszt produkcji, dodaj go
            if ((!item.fromPriceList || parseFloat(item.price || 0) === 0) && (associatedTask || item.productionTaskId) && item.productionCost !== undefined) {
              totalItemValue += parseFloat(item.productionCost || 0);
            }

            // Pobierz poprawny adres klienta (priorytet: shippingAddress > billingAddress > address)
            const customerAddress = order.customer?.shippingAddress || 
                                   order.customer?.billingAddress || 
                                   order.customer?.address || '';

            exportData.push({
              orderNumber: order.orderNumber || order.id,
              orderDate: formatDateForExport(order.orderDate),
              customerName: order.customer?.name || 'Nieznany klient',
              customerEmail: order.customer?.email || '',
              customerPhone: order.customer?.phone || '',
              customerAddress: customerAddress,
              orderStatus: order.status || '',
              itemNumber: itemIndex + 1,
              itemName: item.name || '',
              itemDescription: item.description || '',
              itemQuantity: parseFloat(item.quantity) || 0,
              itemUnit: item.unit || 'szt.',
              itemPrice: parseFloat(item.price) || 0,
              itemValue: Number(itemValue.toFixed(2)),
              itemFromPriceList: item.fromPriceList,
              productionTaskId: productionTaskId,
              productionTaskNumber: productionTaskNumber,
              productionStatus: productionStatus,
              productionCost: Number((parseFloat(item.productionCost || 0)).toFixed(2)),
              totalItemValue: Number(totalItemValue.toFixed(2)),
              expectedDeliveryDate: formatDateForExport(order.expectedDeliveryDate),
              deadline: formatDateForExport(order.deadline),
              deliveryDate: formatDateForExport(order.deliveryDate),
              shippingCost: Number((parseFloat(order.shippingCost || 0)).toFixed(2)),
              orderTotalValue: Number((parseFloat(order.totalValue || 0)).toFixed(2)),
              paymentStatus: order.paymentStatus || '',
              notes: order.notes || '',
              createdBy: userNames[order.createdBy] || order.createdBy || '',
              createdAt: formatDateForExport(order.createdAt),
              updatedAt: formatDateForExport(order.updatedAt)
            });
          });
        } else {
          // Je≈õli zam√≥wienie nie ma pozycji, dodaj wiersz z danymi zam√≥wienia
          const customerAddress = order.customer?.shippingAddress || 
                                 order.customer?.billingAddress || 
                                 order.customer?.address || '';

          exportData.push({
            orderNumber: order.orderNumber || order.id,
            orderDate: formatDateForExport(order.orderDate),
            customerName: order.customer?.name || 'Nieznany klient',
            customerEmail: order.customer?.email || '',
            customerPhone: order.customer?.phone || '',
            customerAddress: customerAddress,
            orderStatus: order.status || '',
            itemNumber: 0,
            itemName: 'BRAK POZYCJI',
            itemDescription: '',
            itemQuantity: 0,
            itemUnit: '',
            itemPrice: 0,
            itemValue: 0,
            itemFromPriceList: false,
            productionTaskId: '',
            productionTaskNumber: '',
            productionStatus: '',
            productionCost: 0,
            totalItemValue: 0,
            expectedDeliveryDate: formatDateForExport(order.expectedDeliveryDate),
            deadline: formatDateForExport(order.deadline),
            deliveryDate: formatDateForExport(order.deliveryDate),
            shippingCost: Number((parseFloat(order.shippingCost || 0)).toFixed(2)),
            orderTotalValue: Number((parseFloat(order.totalValue || 0)).toFixed(2)),
            paymentStatus: order.paymentStatus || '',
            notes: order.notes || '',
            createdBy: userNames[order.createdBy] || order.createdBy || '',
            createdAt: formatDateForExport(order.createdAt),
            updatedAt: formatDateForExport(order.updatedAt)
          });
        }
      });

      // Definicja nag≈Ç√≥wk√≥w dla CSV
      const headers = [
        { label: 'Numer zam√≥wienia', key: 'orderNumber' },
        { label: 'Data zam√≥wienia', key: 'orderDate' },
        { label: 'Nazwa klienta', key: 'customerName' },
        { label: 'Email klienta', key: 'customerEmail' },
        { label: 'Telefon klienta', key: 'customerPhone' },
        { label: 'Adres klienta', key: 'customerAddress' },
        { label: 'Status zam√≥wienia', key: 'orderStatus' },
        { label: 'Nr pozycji', key: 'itemNumber' },
        { label: 'Nazwa produktu', key: 'itemName' },
        { label: 'Opis produktu', key: 'itemDescription' },
        { label: 'Ilo≈õƒá', key: 'itemQuantity' },
        { label: 'Jednostka', key: 'itemUnit' },
        { label: 'Cena jednostkowa', key: 'itemPrice' },
        { label: 'Warto≈õƒá pozycji', key: 'itemValue' },
        { label: 'Z listy cenowej', key: 'itemFromPriceList' },
        { label: 'ID zadania produkcyjnego', key: 'productionTaskId' },
        { label: 'Numer MO', key: 'productionTaskNumber' },
        { label: 'Status produkcji', key: 'productionStatus' },
        { label: 'Koszt produkcji', key: 'productionCost' },
        { label: '≈ÅƒÖczna warto≈õƒá pozycji', key: 'totalItemValue' },
        { label: 'Planowana dostawa', key: 'expectedDeliveryDate' },
        { label: 'Termin realizacji', key: 'deadline' },
        { label: 'Data dostawy', key: 'deliveryDate' },
        { label: 'Koszt dostawy', key: 'shippingCost' },
        { label: '≈ÅƒÖczna warto≈õƒá zam√≥wienia', key: 'orderTotalValue' },
        { label: 'Status p≈Çatno≈õci', key: 'paymentStatus' },
        { label: 'Uwagi', key: 'notes' },
        { label: 'Utworzone przez', key: 'createdBy' },
        { label: 'Data utworzenia', key: 'createdAt' },
        { label: 'Data aktualizacji', key: 'updatedAt' }
      ];

      // Wygeneruj plik CSV
      const currentDate = new Date().toISOString().slice(0, 10);
      const filename = `zamowienia_klientow_pozycje_${currentDate}`;
      const success = exportToCSV(exportData, headers, filename);

      if (success) {
        showSuccess(t('orders.notifications.exportSuccess', { 
          items: exportData.length, 
          orders: exportOrders.length 
        }));
      } else {
        showError(t('orders.notifications.exportError'));
      }
    } catch (error) {
      console.error('B≈ÇƒÖd podczas eksportu CSV:', error);
      showError(t('orders.notifications.exportErrorGeneral', { error: error.message }));
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3, flexDirection: { xs: 'column', sm: 'row' }, gap: { xs: 2, sm: 0 } }}>
        <Typography variant="h4" component="h1">
          {t('orders.title')}
        </Typography>
        <Box sx={{ display: 'flex', flexDirection: { xs: 'column', sm: 'row' }, gap: 1, width: { xs: '100%', sm: 'auto' } }}>
          <Button
            variant="outlined"
            color="primary"
            startIcon={<CustomersIcon />}
            onClick={() => navigate('/customers')}
            sx={{ width: '100%' }}
          >
            {t('orders.manageCustomers')}
          </Button>
          <Button
            variant="contained"
            color="primary"
            startIcon={<AddIcon />}
            onClick={handleAddOrder}
            sx={{ width: '100%' }}
          >
            {t('orders.newOrder')}
          </Button>
        </Box>
      </Box>

      <Paper sx={{ p: 2, mb: 3 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <TextField
            placeholder={t('orders.searchOrders')}
            variant="outlined"
            size="small"
            value={state.searchTerm}
            onChange={handleSearchChange}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon />
                </InputAdornment>
              ),
              endAdornment: state.searchTerm && (
                <InputAdornment position="end">
                  <IconButton size="small" onClick={() => actions.setSearchTerm('')}>
                    <ClearIcon />
                  </IconButton>
                </InputAdornment>
              )
            }}
            sx={{ width: 300 }}
          />

          <Box sx={{ display: 'flex', gap: 1 }}>
            <Button 
              variant="outlined" 
              color="secondary" 
              startIcon={<DownloadIcon />}
              onClick={handleExportOrdersToCSV}
              disabled={loading}
            >
              {loading ? t('orders.exporting') : t('orders.exportCsv')}
            </Button>
            <Button 
              variant={state.showFilters ? "contained" : "outlined"} 
              startIcon={<FilterListIcon />}
              onClick={() => actions.setShowFilters(!state.showFilters)}
              color={state.showFilters ? "primary" : "inherit"}
            >
              {t('orders.filtersToggle')}
            </Button>
            <Button 
              variant="outlined" 
              startIcon={<RefreshIcon />}
              onClick={handleRefreshAll}
              disabled={loading}
              sx={{ minWidth: 150 }}
            >
              {loading ? t('orders.refreshing') : t('orders.refreshValues')}
            </Button>
          </Box>
        </Box>

        <Collapse in={state.showFilters}>
          <Card variant="outlined" sx={{ mb: 2 }}>
            <CardContent>
              <Grid container spacing={2} alignItems="center">
                <Grid item xs={12} sm={6} md={3}>
                  <FormControl fullWidth size="small">
                    <InputLabel>{t('orders.filters.status')}</InputLabel>
                    <Select
                      name="status"
                      value={state.filters.status}
                      onChange={handleFilterChange}
                      label={t('orders.filters.status')}
                    >
                      <MenuItem value="all">{t('orders.filters.all')}</MenuItem>
                      {ORDER_STATUSES.map(status => (
                        <MenuItem key={status.value} value={status.value}>
                          {status.label}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={6} md={3}>
                  <TextField
                    label={t('orders.filters.fromDate')}
                    type="date"
                    name="fromDate"
                    value={state.filters.fromDate}
                    onChange={handleFilterChange}
                    size="small"
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    inputProps={{ max: state.filters.toDate || undefined }}
                  />
                </Grid>
                <Grid item xs={12} sm={6} md={3}>
                  <TextField
                    label={t('orders.filters.toDate')}
                    type="date"
                    name="toDate"
                    value={state.filters.toDate}
                    onChange={handleFilterChange}
                    size="small"
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    inputProps={{ min: state.filters.fromDate || undefined }}
                  />
                </Grid>
                <Grid item xs={12} sm={6} md={3}>
                  <FormControl fullWidth size="small">
                    <InputLabel>{t('orders.filters.customer')}</InputLabel>
                    <Select
                      name="customerId"
                      value={state.filters.customerId}
                      onChange={handleFilterChange}
                      label={t('orders.filters.customer')}
                      disabled={customersLoading}
                    >
                      <MenuItem value="">{t('orders.filters.allCustomers')}</MenuItem>
                      {customers.map(customer => (
                        <MenuItem key={customer.id} value={customer.id}>
                          {customer.name}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={6} md={3}>
                  <Box sx={{ display: 'flex', gap: 1 }}>
                    <Button 
                      variant="contained" 
                      onClick={applyFilters}
                      fullWidth
                    >
                      {t('orders.applyFilters')}
                    </Button>
                    <Button 
                      variant="outlined" 
                      onClick={resetFilters}
                      color="inherit"
                    >
                      {t('orders.reset')}
                    </Button>
                  </Box>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Collapse>

        {loading ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4, mb: 4 }}>
            <CircularProgress />
          </Box>
        ) : (
          <>
            <TableContainer>
              <Table sx={{ minWidth: 800 }}>
                <TableHead>
                  <TableRow>
                    <TableCell>{t('orders.table.details')}</TableCell>
                    <TableCell 
                      onClick={() => handleSort('orderNumber')}
                      style={{ cursor: 'pointer' }}
                    >
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        {t('orders.table.number')} 
                        {state.orderBy === 'orderNumber' && (
                          <ArrowDropDownIcon 
                            sx={{ 
                              transform: state.orderDirection === 'asc' ? 'rotate(180deg)' : 'none',
                              transition: 'transform 0.2s'
                            }} 
                          />
                        )}
                      </Box>
                    </TableCell>
                    <TableCell 
                      onClick={() => handleSort('customer.name')}
                      style={{ cursor: 'pointer' }}
                    >
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        {t('orders.table.customer')}
                        {state.orderBy === 'customer.name' && (
                          <ArrowDropDownIcon 
                            sx={{ 
                              transform: state.orderDirection === 'asc' ? 'rotate(180deg)' : 'none',
                              transition: 'transform 0.2s'
                            }} 
                          />
                        )}
                      </Box>
                    </TableCell>
                    <TableCell>{t('orders.table.status')}</TableCell>
                    <TableCell 
                      onClick={() => handleSort('orderDate')}
                      style={{ cursor: 'pointer' }}
                    >
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        {t('orders.table.date')}
                        {state.orderBy === 'orderDate' && (
                          <ArrowDropDownIcon 
                            sx={{ 
                              transform: state.orderDirection === 'asc' ? 'rotate(180deg)' : 'none',
                              transition: 'transform 0.2s'
                            }} 
                          />
                        )}
                      </Box>
                    </TableCell>
                    <TableCell 
                      onClick={() => handleSort('expectedDeliveryDate')}
                      style={{ cursor: 'pointer' }}
                    >
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        {t('orders.table.deliveryDeadline')}
                        {state.orderBy === 'expectedDeliveryDate' && (
                          <ArrowDropDownIcon 
                            sx={{ 
                              transform: state.orderDirection === 'asc' ? 'rotate(180deg)' : 'none',
                              transition: 'transform 0.2s'
                            }} 
                          />
                        )}
                      </Box>
                    </TableCell>
                    <TableCell 
                      onClick={() => handleSort('totalValue')}
                      style={{ cursor: 'pointer' }}
                      align="right"
                    >
                      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>
                        {t('orders.table.value')}
                        {state.orderBy === 'totalValue' && (
                          <ArrowDropDownIcon 
                            sx={{ 
                              transform: state.orderDirection === 'asc' ? 'rotate(180deg)' : 'none',
                              transition: 'transform 0.2s'
                            }} 
                          />
                        )}
                      </Box>
                    </TableCell>
                    <TableCell align="right">{t('orders.table.actions')}</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {displayedOrders.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={8} align="center">
                        {t('orders.noOrders')}
                      </TableCell>
                    </TableRow>
                  ) : (
                    displayedOrders.map((order) => (
                      <React.Fragment key={order.id}>
                        <TableRow hover>
                          <TableCell>
                            <IconButton
                              size="small"
                              onClick={() => toggleExpand(order.id)}
                            >
                              {expandedOrderId === order.id ? (
                                <KeyboardArrowUpIcon />
                              ) : (
                                <KeyboardArrowDownIcon />
                              )}
                            </IconButton>
                          </TableCell>
                          <TableCell>
                            <Typography variant="body2" fontWeight="medium">
                              {order.orderNumber || (order.id && order.id.substring(0, 8).toUpperCase())}
                            </Typography>
                          </TableCell>
                          <TableCell>
                            <Typography variant="body2" fontWeight="medium">
                              {typeof order.customer === 'object' && order.customer !== null 
                                ? (order.customer?.name || t('orders.constants.noCustomerData')) 
                                : String(order.customer) || t('orders.constants.noCustomerData')}
                            </Typography>
                          </TableCell>
                          <TableCell>
                            <Chip 
                              label={order.status} 
                              size="small"
                              clickable
                              onClick={() => handleStatusClick(order)}
                              sx={{
                                backgroundColor: getStatusChipColor(order.status),
                                color: 'white',
                                cursor: 'pointer',
                                '&:hover': {
                                  opacity: 0.8
                                }
                              }}
                            />
                          </TableCell>
                          <TableCell>
                            <Typography variant="body2" fontWeight="medium">
                            {order.orderDate ? (
                              typeof order.orderDate === 'object' && typeof order.orderDate.toDate === 'function' 
                                ? formatDate(order.orderDate.toDate(), false)
                                : formatDate(order.orderDate, false)
                            ) : '-'}
                            </Typography>
                          </TableCell>
                          <TableCell>
                            <Typography variant="body2" fontWeight="medium">
                            {order.deadline ? (
                              typeof order.deadline === 'object' && typeof order.deadline.toDate === 'function' 
                                ? formatDate(order.deadline.toDate(), false)
                                : formatDate(order.deadline, false)
                            ) : '-'}
                            </Typography>
                          </TableCell>
                          <TableCell align="right">
                            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end' }}>
                              <Typography variant="body2" fontWeight="medium">
                                {formatCurrency(order.totalValue || 0)}
                              </Typography>
                              {order.purchaseOrdersValue > 0 && (
                                <Typography variant="caption" color="text.secondary">
                                  (PO: {formatCurrency(order.purchaseOrdersValue || 0)})
                                </Typography>
                              )}
                            </Box>
                          </TableCell>
                          <TableCell align="right">
                            <Tooltip title={t('orders.actions.edit')}>
                              <IconButton
                                size="small"
                                onClick={() => handleEditOrder(order.id)}
                              >
                                <EditIcon fontSize="small" />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title={t('orders.actions.details')}>
                              <IconButton
                                size="small"
                                component={RouterLink}
                                to={`/orders/${order.id}`}
                                target="_blank"
                                rel="noopener noreferrer"
                                color="primary"
                              >
                                <EventNoteIcon fontSize="small" />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title={t('orders.actions.delete')}>
                              <IconButton
                                size="small"
                                onClick={() => handleDeleteOrderClick(order)}
                                color="error"
                              >
                                <DeleteIcon fontSize="small" />
                              </IconButton>
                            </Tooltip>
                          </TableCell>
                        </TableRow>

                        {/* Expanded details */}
                        <TableRow>
                          <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={8}>
                            <Collapse in={expandedOrderId === order.id} timeout="auto" unmountOnExit>
                              <Box sx={{ py: 2, px: 2 }}>
                                <Typography variant="h6" gutterBottom component="div">
                                  {t('orders.expandedDetails.orderDetails')}
                                </Typography>

                                <Grid container spacing={2}>
                                  <Grid item xs={12} md={6}>
                                    <Typography variant="subtitle2">{t('orders.expandedDetails.contact')}</Typography>
                                    <Typography variant="body2">
                                      {t('orders.expandedDetails.email')} {typeof order.customer?.email === 'object' 
                                        ? JSON.stringify(order.customer.email) 
                                        : (order.customer?.email || '-')}
                                    </Typography>
                                    <Typography variant="body2">
                                      {t('orders.expandedDetails.phone')} {typeof order.customer?.phone === 'object' 
                                        ? JSON.stringify(order.customer.phone) 
                                        : (order.customer?.phone || '-')}
                                    </Typography>
                                    <Typography variant="body2">
                                      {t('orders.expandedDetails.address')} {typeof order.customer?.address === 'object' 
                                        ? JSON.stringify(order.customer.address) 
                                        : (order.customer?.address || '-')}
                                    </Typography>
                                  </Grid>

                                  <Grid item xs={12} md={6}>
                                    <Typography variant="subtitle2">{t('orders.expandedDetails.paymentInfo')}</Typography>
                                    <Typography variant="body2">
                                      {t('orders.expandedDetails.paymentMethod')} {typeof order.paymentMethod === 'object'
                                        ? JSON.stringify(order.paymentMethod)
                                        : (order.paymentMethod || '-')}
                                    </Typography>
                                    <Typography variant="body2">
                                      {t('orders.expandedDetails.paymentStatus')} {typeof order.paymentStatus === 'object'
                                        ? JSON.stringify(order.paymentStatus)
                                        : (order.paymentStatus || '-')}
                                    </Typography>
                                    <Typography variant="body2">
                                      {t('orders.expandedDetails.delivery')} {typeof order.shippingMethod === 'object'
                                        ? JSON.stringify(order.shippingMethod)
                                        : (order.shippingMethod || '-')} 
                                      ({formatCurrency(order.shippingCost || 0)})
                                    </Typography>
                                  </Grid>

                                  <Grid item xs={12}>
                                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                                      <Typography variant="subtitle2">
                                        {t('orders.expandedDetails.products')}
                                      </Typography>
                                      <Box sx={{ display: 'flex', gap: 1 }}>
                                        <Button
                                          size="small"
                                          startIcon={<RefreshIcon />}
                                          onClick={() => handleRefreshMO(order)}
                                          title="Od≈õwie≈º dane MO"
                                        >
                                          {t('orders.expandedDetails.refreshMO')}
                                        </Button>
                                        <Button
                                          size="small"
                                          startIcon={<RefreshIcon />}
                                          onClick={() => handleRefreshCMRData(order)}
                                          title="Od≈õwie≈º dane wys≈Çanych ilo≈õci z CMR"
                                          variant="outlined"
                                          color="secondary"
                                        >
                                          {t('orders.expandedDetails.refreshCMR')}
                                        </Button>
                                      </Box>
                                    </Box>
                                    <TableContainer component={Paper} variant="outlined">
                                      <Table size="small">
                                        <TableHead>
                                          <TableRow>
                                            <TableCell>{t('orders.expandedDetails.product')}</TableCell>
                                            <TableCell align="right">{t('orders.expandedDetails.quantity')}</TableCell>
                                            <TableCell align="right">{t('orders.expandedDetails.reserved')}</TableCell>
                                            <TableCell align="right">{t('orders.expandedDetails.price')}</TableCell>
                                            <TableCell align="right">{t('orders.expandedDetails.value')}</TableCell>
                                            <TableCell align="right">{t('orders.expandedDetails.productionCost')}</TableCell>
                                            <TableCell>{t('orders.expandedDetails.mo')}</TableCell>
                                          </TableRow>
                                        </TableHead>
                                        <TableBody>
                                          {order.items && Array.isArray(order.items) && order.items.map((item, index) => (
                                            <TableRow key={index}>
                                              <TableCell>{typeof item.name === 'object' ? JSON.stringify(item.name) : (item.name || '-')}</TableCell>
                                              <TableCell align="right">
                                                {item.quantity} {typeof item.unit === 'object' ? JSON.stringify(item.unit) : (item.unit || '')}
                                              </TableCell>
                                              <TableCell align="right">
                                                {(() => {
                                                  // Oblicz ≈ÇƒÖcznƒÖ ilo≈õƒá wys≈ÇanƒÖ z historii CMR
                                                  const totalShippedFromCMR = item.cmrHistory && Array.isArray(item.cmrHistory) ? 
                                                    item.cmrHistory.reduce((total, cmrEntry) => {
                                                      return total + (parseFloat(cmrEntry.quantity) || 0);
                                                    }, 0) : 0;
                                                  
                                                  // U≈ºyj ilo≈õci z historii CMR lub fallback na shippedQuantity
                                                  const displayQuantity = totalShippedFromCMR > 0 ? totalShippedFromCMR : (parseFloat(item.shippedQuantity) || 0);
                                                  const orderedQuantity = parseFloat(item.quantity) || 0;
                                                  
                                                  // Sprawd≈∫ czy pozycja jest w pe≈Çni wys≈Çana
                                                  const isFullyShipped = displayQuantity >= orderedQuantity;
                                                  const hasHistory = item.cmrHistory && item.cmrHistory.length > 0;
                                                  
                                                  return (
                                                    <div>
                                                      <Typography 
                                                        variant="body2"
                                                        style={{ 
                                                          color: isFullyShipped ? '#4caf50' : '#ff9800',
                                                          fontWeight: 'bold'
                                                        }}
                                                      >
                                                        {displayQuantity.toLocaleString()} / {orderedQuantity.toLocaleString()}
                                                      </Typography>
                                                      
                                                      {hasHistory && (
                                                        <div style={{ marginTop: '4px' }}>
                                                          {item.cmrHistory.map((cmrEntry, cmrIndex) => (
                                                            <Typography 
                                                              key={cmrIndex}
                                                              variant="caption" 
                                                              style={{ 
                                                                display: 'block', 
                                                                fontSize: '0.7rem',
                                                                color: '#666',
                                                                lineHeight: '1.2'
                                                              }}
                                                            >
                                                              {cmrEntry.cmrNumber}: {parseFloat(cmrEntry.quantity || 0).toLocaleString()} {cmrEntry.unit || 'szt.'}
                                                              {cmrEntry.shipmentDate && (
                                                                <span style={{ color: '#999', marginLeft: '4px' }}>
                                                                  ({new Date(cmrEntry.shipmentDate).toLocaleDateString('pl-PL')})
                                                                </span>
                                                              )}
                                                            </Typography>
                                                          ))}
                                                        </div>
                                                      )}
                                                      
                                                      {!hasHistory && displayQuantity > 0 && (
                                                        <Typography 
                                                          variant="caption" 
                                                          style={{ 
                                                            display: 'block', 
                                                            fontSize: '0.7rem',
                                                            color: '#999'
                                                          }}
                                                        >
                                                          {item.lastCmrNumber && `Ostatni CMR: ${item.lastCmrNumber}`}
                                                        </Typography>
                                                      )}
                                                    </div>
                                                  );
                                                })()}
                                              </TableCell>
                                              <TableCell align="right">
                                                {formatCurrency(parseFloat(item.price) || 0)}
                                              </TableCell>
                                              <TableCell align="right">
                                                {formatCurrency((parseFloat(item.price) || 0) * (parseFloat(item.quantity) || 0))}
                                              </TableCell>
                                              <TableCell align="right">
                                                {item.productionTaskId && item.productionCost !== undefined ? (
                                                  <Typography>
                                                    {formatCurrency(item.productionCost)}
                                                  </Typography>
                                                ) : (
                                                  <Typography variant="body2" color="text.secondary">-</Typography>
                                                )}
                                              </TableCell>
                                              <TableCell>
                                                {(() => {
                                                  // Sprawd≈∫ najpierw bezpo≈õrednie pola w pozycji
                                                  if (item.productionTaskId && item.productionTaskNumber) {
                                                    return (
                                                      <Link
                                                        component={RouterLink}
                                                        to={`/production/tasks/${item.productionTaskId}`}
                                                        sx={{ 
                                                          textDecoration: 'none',
                                                          fontWeight: 'medium',
                                                          '&:hover': {
                                                            textDecoration: 'underline'
                                                          }
                                                        }}
                                                      >
                                                        <Chip
                                                          label={item.productionTaskNumber}
                                                          color="primary"
                                                          size="small"
                                                          variant="outlined"
                                                          clickable
                                                        />
                                                      </Link>
                                                    );
                                                  }
                                                  
                                                  // Je≈õli nie ma bezpo≈õrednich p√≥l, szukaj w order.productionTasks
                                                  if (order.productionTasks && order.productionTasks.length > 0) {
                                                    const matchingTask = order.productionTasks.find(task => 
                                                      task.orderItemId === item.id || 
                                                      (task.productName === item.name && task.quantity == item.quantity)
                                                    );
                                                    
                                                    if (matchingTask) {
                                                      return (
                                                        <Link
                                                          component={RouterLink}
                                                          to={`/production/tasks/${matchingTask.id}`}
                                                          sx={{ 
                                                            textDecoration: 'none',
                                                            fontWeight: 'medium',
                                                            '&:hover': {
                                                              textDecoration: 'underline'
                                                            }
                                                          }}
                                                        >
                                                          <Chip
                                                            label={matchingTask.moNumber}
                                                            color="primary"
                                                            size="small"
                                                            variant="outlined"
                                                            clickable
                                                          />
                                                        </Link>
                                                      );
                                                    }
                                                  }
                                                  
                                                  // Je≈õli nic nie znaleziono, poka≈º my≈õlnik
                                                  return (
                                                    <Typography variant="body2" color="text.secondary">
                                                      -
                                                    </Typography>
                                                  );
                                                })()}
                                              </TableCell>
                                            </TableRow>
                                          ))}
                                        </TableBody>
                                      </Table>
                                    </TableContainer>
                                  </Grid>

                                  <Grid item xs={12}>
                                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                      <Typography variant="subtitle2" gutterBottom>
                                        {t('orders.expandedDetails.linkedPurchaseOrders')}
                                      </Typography>
                                      <Button
                                        size="small"
                                        startIcon={<RefreshIcon />}
                                        onClick={() => handleRefreshOrder(order)}
                                      >
                                        {t('orders.expandedDetails.refreshPOData')}
                                      </Button>
                                    </Box>
                                    {order.linkedPurchaseOrders && Array.isArray(order.linkedPurchaseOrders) && order.linkedPurchaseOrders.length > 0 ? (
                                      <TableContainer component={Paper} variant="outlined">
                                        <Table size="small">
                                          <TableHead>
                                            <TableRow sx={{ bgcolor: 'primary.light' }}>
                                              <TableCell>{t('orders.expandedDetails.poNumber')}</TableCell>
                                              <TableCell>{t('orders.expandedDetails.supplier')}</TableCell>
                                              <TableCell align="right">{t('orders.expandedDetails.poValue')}</TableCell>
                                              <TableCell>{t('orders.expandedDetails.poStatus')}</TableCell>
                                              <TableCell></TableCell>
                                            </TableRow>
                                          </TableHead>
                                          <TableBody>
                                            {order.linkedPurchaseOrders.map((po, index) => (
                                              <TableRow key={index} hover>
                                                <TableCell>
                                                  <Chip 
                                                    label={typeof po.number === 'object' ? JSON.stringify(po.number) : (po.number || '-')} 
                                                    color="primary" 
                                                    variant="outlined" 
                                                    size="small"
                                                    icon={<ShoppingCartIcon fontSize="small" />}
                                                    sx={{ fontWeight: 'bold' }}
                                                  />
                                                </TableCell>
                                                <TableCell>{formatSupplier(po.supplier)}</TableCell>
                                                <TableCell align="right">
                                                  {(() => {
                                                    try {
                                                    // Je≈õli zam√≥wienie ma ju≈º warto≈õƒá brutto, u≈ºywamy jej
                                                    if (po.totalGross !== undefined && po.totalGross !== null) {
                                                      return formatCurrency(parseFloat(po.totalGross));
                                                    }
                                                    
                                                    // W przeciwnym razie obliczamy warto≈õƒá brutto
                                                    const productsValue = parseFloat(po.value) || 0;
                                                    const vatRate = parseFloat(po.vatRate) || 23;
                                                    const vatValue = (productsValue * vatRate) / 100;
                                                    
                                                    // Sprawdzenie r√≥≈ºnych format√≥w dodatkowych koszt√≥w
                                                    let additionalCosts = 0;
                                                    if (po.additionalCostsItems && Array.isArray(po.additionalCostsItems)) {
                                                      additionalCosts = po.additionalCostsItems.reduce((costsSum, cost) => {
                                                        return costsSum + (parseFloat(cost.value) || 0);
                                                      }, 0);
                                                    } else {
                                                        additionalCosts = typeof po.additionalCosts === 'number' ? po.additionalCosts : parseFloat(po.additionalCosts) || 0;
                                                    }
                                                    
                                                    // Warto≈õƒá brutto: produkty + VAT + dodatkowe koszty
                                                    const grossValue = productsValue + vatValue + additionalCosts;
                                                    
                                                    return formatCurrency(grossValue);
                                                    } catch (error) {
                                                      console.error("B≈ÇƒÖd obliczenia warto≈õci PO:", error);
                                                      return formatCurrency(0);
                                                    }
                                                  })()}
                                                </TableCell>
                                                <TableCell>
                                                  <Chip 
                                                    label={typeof po.status === 'object' ? JSON.stringify(po.status) : (po.status || "Robocze")} 
                                                    color={
                                                      po.status === 'completed' ? 'success' : 
                                                      po.status === 'in_progress' ? 'warning' : 
                                                      'default'
                                                    }
                                                    size="small"
                                                  />
                                                </TableCell>
                                                <TableCell>
                                                  <Button 
                                                    size="small" 
                                                    variant="contained"
                                                    onClick={() => typeof po.id === 'string' ? navigate(`/purchase-orders/${po.id}`) : null}
                                                    disabled={typeof po.id !== 'string'}
                                                  >
                                                    {t('orders.actions.details')}
                                                  </Button>
                                                </TableCell>
                                              </TableRow>
                                            ))}
                                          </TableBody>
                                        </Table>
                                      </TableContainer>
                                    ) : (
                                      <Typography variant="body2" color="text.secondary">
                                        {t('orders.expandedDetails.noPurchaseOrders')}
                                      </Typography>
                                    )}
                                  </Grid>

                                  <Grid item xs={12}>
                                    <Box sx={{ mt: 2, display: 'flex', flexDirection: 'column', gap: 1, border: '1px solid #eee', p: 2, borderRadius: 1 }}>
                                      <Typography variant="subtitle1" fontWeight="bold">{t('orders.expandedDetails.valueSummary')}</Typography>
                                      <Grid container spacing={2}>
                                        <Grid item xs={4}>
                                          <Typography variant="body2">{t('orders.expandedDetails.productsValue')}</Typography>
                                          <Typography variant="h6">{formatCurrency(order.productsValue || 0)}</Typography>
                                        </Grid>
                                        <Grid item xs={4}>
                                          <Typography variant="body2">{t('orders.expandedDetails.deliveryCost')}</Typography>
                                          <Typography variant="h6">{formatCurrency(order.shippingCost || 0)}</Typography>
                                        </Grid>
                                        <Grid item xs={4}>
                                          <Typography variant="body2">{t('orders.expandedDetails.poValue')}</Typography>
                                          <Typography variant="h6" color="warning.main">{formatCurrency(order.purchaseOrdersValue || 0)}</Typography>
                                        </Grid>
                                        <Grid item xs={12}>
                                          <Divider sx={{ my: 1 }} />
                                          <Typography variant="subtitle1" fontWeight="bold">
                                            {t('orders.expandedDetails.totalValue')} {formatCurrency((order.productsValue || 0) + (order.shippingCost || 0))}
                                          </Typography>
                                          <Typography variant="body2" color="text.secondary">
                                            {t('orders.expandedDetails.withoutPO')}
                                          </Typography>
                                        </Grid>
                                      </Grid>
                                    </Box>
                                  </Grid>

                                  <Grid item xs={12}>
                                    <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>
                                      <Typography variant="subtitle2">{t('orders.expandedDetails.changeStatus')}</Typography>
                                      {ORDER_STATUSES.map(status => {
                                        // Sprawd≈∫ czy order.status jest prymitywem, je≈õli nie - konwertuj do stringa
                                        const orderStatus = typeof order.status === 'object' ? JSON.stringify(order.status) : String(order.status || '');
                                        const statusValue = typeof status.value === 'object' ? JSON.stringify(status.value) : String(status.value || '');
                                        
                                        return orderStatus !== statusValue && (
                                          <Button 
                                            key={statusValue}
                                            variant="outlined"
                                            size="small"
                                            onClick={() => handleStatusChangeClick(order, status.value)}
                                            sx={{
                                              borderColor: getStatusChipColor(status.value),
                                              color: getStatusChipColor(status.value),
                                              '&:hover': {
                                                backgroundColor: getStatusChipColor(status.value) + '20',
                                                borderColor: getStatusChipColor(status.value)
                                              }
                                            }}
                                          >
                                            {status.label}
                                          </Button>
                                        );
                                      })}
                                    </Box>
                                  </Grid>
                                </Grid>
                              </Box>
                            </Collapse>
                          </TableCell>
                        </TableRow>
                      </React.Fragment>
                    ))
                  )}
                </TableBody>
              </Table>
            </TableContainer>

            {/* Komponent paginacji */}
            <TablePagination
              rowsPerPageOptions={[5, 10, 25, 50]}
              component="div"
              count={totalItems}
              rowsPerPage={state.rowsPerPage}
              page={state.page - 1} // Odejmujemy 1, bo MUI TablePagination u≈ºywa indeksowania od 0
              onPageChange={handleChangePage}
              onRowsPerPageChange={handleChangeRowsPerPage}
              labelRowsPerPage={t('orders.pagination.rowsPerPage')}
              labelDisplayedRows={({ from, to, count }) => t('orders.pagination.displayedRows', { from, to, count })}
            />
          </>
        )}
      </Paper>

      {/* Dialog potwierdzenia usuniƒôcia */}
      <Dialog
        open={!!orderToDelete}
        onClose={handleCancelDelete}
      >
        <DialogTitle>{t('orders.dialogs.deleteConfirmation.title')}</DialogTitle>
        <DialogContent>
          <DialogContentText>
            {orderToDelete && t('orders.dialogs.deleteConfirmation.description', {
              number: orderToDelete.id && orderToDelete.id.substring(0, 8).toUpperCase(),
              customer: typeof orderToDelete.customer === 'object' && orderToDelete.customer !== null 
                ? (orderToDelete.customer.name || '(brak danych)') 
                : String(orderToDelete.customer) || '(brak danych)',
              value: formatCurrency(orderToDelete.totalValue || 0)
            })}
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCancelDelete}>{t('orders.dialogs.deleteConfirmation.cancel')}</Button>
          <Button onClick={handleConfirmDelete} color="error" variant="contained">
            {t('orders.dialogs.deleteConfirmation.confirm')}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Dialog zmiany statusu */}
      <Dialog
        open={!!statusChangeInfo}
        onClose={handleCancelStatusChange}
      >
        <DialogTitle>{t('orders.dialogs.statusChange.title')}</DialogTitle>
        <DialogContent>
          <DialogContentText>
            {statusChangeInfo && t('orders.dialogs.statusChange.description', {
              number: statusChangeInfo.orderNumber,
              currentStatus: statusChangeInfo.currentStatus,
              newStatus: statusChangeInfo.newStatus
            })}
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCancelStatusChange}>{t('orders.dialogs.statusChange.cancel')}</Button>
          <Button onClick={handleConfirmStatusChange} color="primary" variant="contained">
            {t('orders.dialogs.statusChange.confirm')}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Nowy dialog zmiany statusu (podobnie jak w PO) */}
      <Dialog
        open={statusDialogOpen}
        onClose={() => setStatusDialogOpen(false)}
      >
        <DialogTitle>{t('orders.dialogs.statusChange.newTitle')}</DialogTitle>
        <DialogContent>
          <DialogContentText sx={{ mb: 2 }}>
            {t('orders.dialogs.statusChange.selectStatus')}
            {orderToUpdateStatus && (
              <>
                <br />
                {t('orders.dialogs.statusChange.orderNumber')} {orderToUpdateStatus.orderNumber || `#${orderToUpdateStatus.id.substring(0, 8).toUpperCase()}`}
              </>
            )}
          </DialogContentText>
          <FormControl fullWidth>
            <InputLabel id="new-status-label">{t('orders.dialogs.statusChange.status')}</InputLabel>
            <Select
              labelId="new-status-label"
              value={newStatus}
              onChange={(e) => setNewStatus(e.target.value)}
              label={t('orders.dialogs.statusChange.status')}
            >
              {ORDER_STATUSES.map((status) => (
                <MenuItem key={status.value} value={status.value}>
                  {status.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setStatusDialogOpen(false)}>{t('orders.dialogs.statusChange.cancel')}</Button>
          <Button color="primary" onClick={handleStatusUpdate}>{t('orders.dialogs.statusChange.update')}</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default OrdersList; 